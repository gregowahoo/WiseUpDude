@using WiseUpDude.Model
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Components.Forms
@inject WiseUpDude.Data.Repositories.Interfaces.ILearningTrackSourceRepository SourceRepo
@inject WiseUpDude.Shared.Services.ToastService ToastService

@rendermode InteractiveServer

<div class="d-flex justify-content-between align-items-center mb-3">
    <h4 class="text-secondary mb-0"><i class="bi bi-link-45deg me-2"></i>Sources for Category ID: @LearningTrackCategoryId</h4>
    <button class="btn btn-success" @onclick="ShowAddModal">
        <i class="bi bi-plus-circle-fill me-1"></i> Add New Source
    </button>
</div>

@if (sources == null)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 150px;">
        <div class="spinner-border text-info" role="status"><span class="visually-hidden">Loading...</span></div>
        <strong class="ms-2">Loading sources...</strong>
    </div>
}
else if (!sources.Any())
{
    <div class="alert alert-light text-center" role="alert">
        <i class="bi bi-info-circle me-2"></i> No sources found for this category.
        <button class="btn btn-link p-0 ms-1" @onclick="ShowAddModal">Add one now!</button>
    </div>
}
else
{
    <QuickGrid Items="@sourcesQueryable" ResizableColumns="true" Pagination="@paginationState" Class="table table-hover table-sm table-bordered">
        <PropertyColumn Property="@(s => s.Name)" Sortable="true" Title="Source Name">
            <ColumnOptions><div class="custom-header"><i class="bi bi-type me-1"></i> Source Name</div></ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(s => s.SourceType)" Sortable="true" Title="Type">
            <ColumnOptions><div class="custom-header"><i class="bi bi-tag me-1"></i> Type</div></ColumnOptions>
        </PropertyColumn>
        <TemplateColumn Title="URL">
            <ColumnOptions><div class="custom-header"><i class="bi bi-link me-1"></i> URL</div></ColumnOptions>
            <ChildContent Context="source">
                @if (!string.IsNullOrWhiteSpace(source.Url))
                {
                    <a href="@source.Url" target="_blank">@source.Url</a>
                }
            </ChildContent>
        </TemplateColumn>
        <PropertyColumn Property="@(s => s.Description)" Title="Description">
            <ColumnOptions><div class="custom-header"><i class="bi bi-text-paragraph me-1"></i> Description</div></ColumnOptions>
        </PropertyColumn>
        <TemplateColumn Title="Actions" Class="text-center">
            <ColumnOptions><div class="custom-header"><i class="bi bi-tools me-1"></i> Actions</div></ColumnOptions>
            <ChildContent Context="source">
                <button class="btn btn-sm btn-primary me-1" @onclick="() => SelectSource(source)" title="Select Source">
                    <i class="bi bi-check-circle-fill"></i> Select
                </button>
                <button class="btn btn-sm btn-outline-secondary me-1" @onclick="() => ShowEditModal(source)" title="Edit Source">
                    <i class="bi bi-pencil-square"></i> Edit
                </button>
                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteSource(source)" title="Delete Source">
                    <i class="bi bi-trash"></i> Delete
                </button>
            </ChildContent>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="@paginationState" />
}

<Modal IsVisible="@showModal" Title="@modalTitle" OnClose="CloseModal">
    <EditForm Model="@modalSource" OnValidSubmit="SaveSource">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label class="form-label">Name</label>
            <InputText class="form-control" @bind-Value="modalSource.Name" />
        </div>
        <div class="mb-3">
            <label class="form-label">Type</label>
            <InputText class="form-control" @bind-Value="modalSource.SourceType" />
        </div>
        <div class="mb-3">
            <label class="form-label">URL</label>
            <InputText class="form-control" @bind-Value="modalSource.Url" />
        </div>
        <div class="mb-3">
            <label class="form-label">Description</label>
            <InputTextArea class="form-control" @bind-Value="modalSource.Description" />
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="CloseModal">Cancel</button>
    </EditForm>
</Modal>

@code {
    [Parameter] public int LearningTrackCategoryId { get; set; }
    [Parameter] public EventCallback<LearningTrackSource> OnLearningTrackSourceSelected { get; set; }

    private List<LearningTrackSource>? sources;
    private IQueryable<LearningTrackSource>? sourcesQueryable;
    private PaginationState paginationState = new PaginationState { ItemsPerPage = 5 };

    private bool showModal = false;
    private string modalTitle = "Add/Edit Source";
    private LearningTrackSource modalSource = new();
    private bool isEdit = false;

    protected override async Task OnParametersSetAsync()
    {
        await LoadSourcesFromRepo();
    }

    private async Task LoadSourcesFromRepo()
    {
        sources = null;
        await InvokeAsync(StateHasChanged);
        try
        {
            var allSources = await SourceRepo.GetAllAsync();
            sources = allSources.Where(s => s.LearningTrackCategoryId == LearningTrackCategoryId).ToList();
            sourcesQueryable = sources.AsQueryable();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to load sources: {ex.Message}", ToastLevel.Error);
            sources = new List<LearningTrackSource>();
            sourcesQueryable = sources.AsQueryable();
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task SelectSource(LearningTrackSource source)
    {
        await OnLearningTrackSourceSelected.InvokeAsync(source);
    }

    private void ShowAddModal()
    {
        modalTitle = "Add New Source";
        modalSource = new LearningTrackSource { LearningTrackCategoryId = LearningTrackCategoryId };
        isEdit = false;
        showModal = true;
    }

    private void ShowEditModal(LearningTrackSource source)
    {
        modalTitle = "Edit Source";
        modalSource = new LearningTrackSource
        {
            Id = source.Id,
            Name = source.Name,
            SourceType = source.SourceType,
            Url = source.Url,
            Description = source.Description,
            LearningTrackCategoryId = source.LearningTrackCategoryId,
            CreationDate = source.CreationDate
        };
        isEdit = true;
        showModal = true;
    }

    private async Task SaveSource()
    {
        try
        {
            if (isEdit)
            {
                await SourceRepo.UpdateAsync(modalSource);
                await ToastService.ShowToast("Source updated!", ToastLevel.Success);
            }
            else
            {
                modalSource.CreationDate = DateTime.UtcNow;
                await SourceRepo.AddAsync(modalSource);
                await ToastService.ShowToast("Source added!", ToastLevel.Success);
            }
            showModal = false;
            await LoadSourcesFromRepo();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to save source: {ex.Message}", ToastLevel.Error);
        }
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task DeleteSource(LearningTrackSource source)
    {
        try
        {
            await SourceRepo.DeleteAsync(source.Id);
            await ToastService.ShowToast($"Source deleted: {source.Name}", ToastLevel.Success);
            await LoadSourcesFromRepo();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to delete source: {ex.Message}", ToastLevel.Error);
        }
    }
}
