@page "/admin/users"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using WiseUpDude.Data
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Nav
@inject WiseUpDude.Shared.Services.ToastService Toast
@inject ILogger<AdminUsers> Logger

<PageTitle>Admin - Users</PageTitle>

<div class="container my-4">
    <nav aria-label="breadcrumb" class="mb-3">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/admin">Admin</a></li>
            <li class="breadcrumb-item active" aria-current="page">Users</li>
        </ol>
    </nav>

    <div class="d-flex align-items-center justify-content-between mb-3">
        <h2 class="mb-0">Users</h2>
        <button class="btn btn-success" @onclick="AddUser"><i class="bi bi-person-plus me-1"></i>Add User</button>
    </div>

    <div class="row g-2 align-items-end mb-3">
        <div class="col-md-6">
            <label class="form-label">Search by email</label>
            <input class="form-control" placeholder="Enter email..." @bind-value="Search" @bind-value:event="oninput" />
        </div>
        <div class="col-md-3">
            <label class="form-label">Page size</label>
            <select class="form-select" @bind="PageSize">
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
            </select>
        </div>
        <div class="col-md-3 d-flex gap-2">
            <button class="btn btn-primary flex-fill" @onclick="ApplyFilters"><i class="bi bi-search me-1"></i>Search</button>
            <button class="btn btn-outline-secondary" @onclick="ClearFilters">Clear</button>
        </div>
    </div>

    @if (IsLoading)
    {
        <div class="alert alert-info">Loading users...</div>
    }
    else if (Users.Count == 0)
    {
        <div class="alert alert-warning">No users found.</div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-sm table-striped align-middle">
                <thead>
                <tr>
                    <th>Email</th>
                    <th style="width: 35%">Roles</th>
                    <th class="text-end" style="width: 160px">Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var u in Users)
                {
                    <tr>
                        <td>@u.Email</td>
                        <td>
                            @if (u.Roles?.Count > 0)
                            {
                                foreach (var r in u.Roles)
                                {
                                    <span class="badge text-bg-secondary me-1">@r</span>
                                }
                            }
                            else
                            {
                                <span class="text-muted">(none)</span>
                            }
                        </td>
                        <td class="text-end">
                            <button class="btn btn-sm btn-outline-primary me-1" title="Edit" @onclick="() => EditUser(u.Id)">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" title="Delete" @onclick="() => AskDelete(u)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>

        <div class="d-flex align-items-center justify-content-between mt-3">
            <div class="text-muted small">Showing page @Page of @TotalPages (@TotalCount total)</div>
            <nav>
                <ul class="pagination mb-0">
                    <li class="page-item @(Page == 1 ? "disabled" : null)">
                        <button class="page-link" @onclick="PrevPage">Prev</button>
                    </li>
                    <li class="page-item disabled"><span class="page-link">@Page</span></li>
                    <li class="page-item @(Page >= TotalPages ? "disabled" : null)">
                        <button class="page-link" @onclick="NextPage">Next</button>
                    </li>
                </ul>
            </nav>
        </div>
    }

    @if (UserToDelete is not null)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Delete user</h5>
                        <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete <strong>@UserToDelete.Email</strong>?</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                        <button class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [SupplyParameterFromQuery(Name = "q")] private string? Search { get; set; }
    [SupplyParameterFromQuery(Name = "page")] private int Page { get; set; } = 1;

    private int PageSize { get; set; } = 20;
    private int TotalCount { get; set; }
    private int TotalPages => Math.Max(1, (int)Math.Ceiling(TotalCount / (double)PageSize));
    private bool IsLoading { get; set; }

    private List<UserRow> Users { get; set; } = new();
    private UserRow? UserToDelete { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        IsLoading = true;
        Users.Clear();
        try
        {
            var q = UserManager.Users.AsQueryable();
            if (!string.IsNullOrWhiteSpace(Search))
            {
                var s = Search.Trim().ToLower();
                q = q.Where(u => u.Email!.ToLower().Contains(s));
            }
            TotalCount = await q.CountAsync();
            if (Page < 1) Page = 1;
            if (Page > TotalPages) Page = TotalPages;
            var pageUsers = await q
                .OrderBy(u => u.Email)
                .Skip((Page - 1) * PageSize)
                .Take(PageSize)
                .ToListAsync();

            foreach (var u in pageUsers)
            {
                var roles = await UserManager.GetRolesAsync(u);
                Users.Add(new UserRow { Id = u.Id, Email = u.Email ?? u.UserName ?? "(no email)", Roles = roles.ToList() });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed loading users");
            await Toast.ShowToast("Failed to load users.", WiseUpDude.Shared.Services.ToastLevel.Error);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void ApplyFilters()
    {
        var uri = new Uri(Nav.Uri);
        var q = System.Web.HttpUtility.ParseQueryString(uri.Query);
        if (!string.IsNullOrWhiteSpace(Search)) q.Set("q", Search);
        else q.Remove("q");
        q.Set("page", "1");
        var baseUri = uri.GetLeftPart(UriPartial.Path);
        var newUri = q.Count > 0 ? $"{baseUri}?{q}" : baseUri;
        Nav.NavigateTo(newUri);
    }

    private void ClearFilters()
    {
        Search = null; Page = 1;
        ApplyFilters();
    }

    private void PrevPage()
    {
        if (Page > 1)
        {
            Page--;
            var uri = new Uri(Nav.Uri);
            var q = System.Web.HttpUtility.ParseQueryString(uri.Query);
            q.Set("page", Page.ToString());
            if (!string.IsNullOrWhiteSpace(Search)) q.Set("q", Search);
            var baseUri = uri.GetLeftPart(UriPartial.Path);
            Nav.NavigateTo($"{baseUri}?{q}");
        }
    }

    private void NextPage()
    {
        if (Page < TotalPages)
        {
            Page++;
            var uri = new Uri(Nav.Uri);
            var q = System.Web.HttpUtility.ParseQueryString(uri.Query);
            q.Set("page", Page.ToString());
            if (!string.IsNullOrWhiteSpace(Search)) q.Set("q", Search);
            var baseUri = uri.GetLeftPart(UriPartial.Path);
            Nav.NavigateTo($"{baseUri}?{q}");
        }
    }

    private void AddUser() => Nav.NavigateTo("/admin/users/add");
    private void EditUser(string id) => Nav.NavigateTo($"/admin/users/edit/{id}");

    private void AskDelete(UserRow u) => UserToDelete = u;
    private void CancelDelete() => UserToDelete = null;

    private async Task ConfirmDelete()
    {
        if (UserToDelete is null) return;
        try
        {
            var user = await UserManager.FindByIdAsync(UserToDelete.Id);
            if (user is null)
            {
                await Toast.ShowToast("User not found.", WiseUpDude.Shared.Services.ToastLevel.Warning);
                return;
            }
            var result = await UserManager.DeleteAsync(user);
            if (result.Succeeded)
            {
                await Toast.ShowToast("User deleted.", WiseUpDude.Shared.Services.ToastLevel.Success);
                UserToDelete = null;
                await LoadAsync();
            }
            else
            {
                var msg = string.Join("; ", result.Errors.Select(e => e.Description));
                await Toast.ShowToast($"Delete failed: {msg}", WiseUpDude.Shared.Services.ToastLevel.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting user {UserId}", UserToDelete.Id);
            await Toast.ShowToast("Unexpected error deleting user.", WiseUpDude.Shared.Services.ToastLevel.Error);
        }
    }

    private sealed class UserRow
    {
        public string Id { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public List<string> Roles { get; set; } = new();
    }
}
