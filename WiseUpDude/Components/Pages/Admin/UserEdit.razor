@page "/admin/users/edit/{UserId}"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.AspNetCore.Identity
@using WiseUpDude.Data
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

<PageTitle>Edit User</PageTitle>

<h2>Edit User</h2>

@if (user == null)
{
    <p>Loading user...</p>
}
else
{
    <EditForm Model="user" OnValidSubmit="UpdateUser">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label>Email</label>
            <InputText @bind-Value="user.Email" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Assign Roles</label>
            <div>
                @foreach (var role in roleModels)
                {
                    <div class="form-check">
                        <InputCheckbox class="form-check-input" @bind-Value="role.IsSelected" />
                        <label class="form-check-label">@role.Name</label>
                    </div>
                }
            </div>
        </div>
        <button class="btn btn-primary" type="submit">Update User</button>
        <button class="btn btn-secondary ms-2" type="button" @onclick="GoBack">Cancel</button>
    </EditForm>
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-info mt-3">@message</div>
    }
}

@code {
    [Parameter] public string UserId { get; set; } = string.Empty;
    private ApplicationUser? user;
    private string? message;
    private List<string> roles = new() { "Admin", "FreeSubscriber", "PaidSubscriber", "EnterpriseSubscriber" };
    private List<RoleModel> roleModels = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.FindByIdAsync(UserId);
        roleModels = roles.Select(r => new RoleModel { Name = r, IsSelected = false }).ToList();
        if (user != null)
        {
            var userRoles = await UserManager.GetRolesAsync(user);
            foreach (var roleModel in roleModels)
            {
                if (userRoles.Contains(roleModel.Name))
                    roleModel.IsSelected = true;
            }
        }
    }

    private async Task UpdateUser()
    {
        if (user != null)
        {
            var result = await UserManager.UpdateAsync(user);
            var selectedRoles = roleModels.Where(r => r.IsSelected).Select(r => r.Name).ToList();
            var currentRoles = await UserManager.GetRolesAsync(user);
            var rolesToAdd = selectedRoles.Except(currentRoles).ToList();
            var rolesToRemove = currentRoles.Except(selectedRoles).ToList();
            if (rolesToRemove.Any())
                await UserManager.RemoveFromRolesAsync(user, rolesToRemove);
            if (rolesToAdd.Any())
                await UserManager.AddToRolesAsync(user, rolesToAdd);
            if (result.Succeeded)
            {
                message = "User updated successfully.";
                NavigationManager.NavigateTo("/admin/users");
            }
            else
            {
                message = string.Join("; ", result.Errors.Select(e => e.Description));
            }
        }
    }

    private void GoBack() => NavigationManager.NavigateTo("/admin/users");

    private class RoleModel
    {
        public string Name { get; set; } = string.Empty;
        public bool IsSelected { get; set; }
    }
}
