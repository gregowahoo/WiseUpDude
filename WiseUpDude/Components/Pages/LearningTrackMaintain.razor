@page "/learningtracks/maintain"

@inject ILearningTrackRepository LearningTrackRepository
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<h3>Maintain Learning Tracks</h3>

@if (learningTracks == null)
{
    <p>Loading...</p>
}
else if (!learningTracks.Any())
{
    <div class="alert alert-info">No learning tracks found.</div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Created</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in learningTracks)
            {
                <tr>
                    <td>@track.Name</td>
                    <td>@track.Description</td>
                    <td>@track.CreationDate.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-1" @onclick="() => EditTrack(track.Id)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteTrack(track.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-2">@message</div>
}

@code {
    private List<WiseUpDude.Model.LearningTrack>? learningTracks;
    private string? message;

    private static readonly string[] DifficultyLevels = new[] { "Easy", "Medium", "Hard" };

    protected override async Task OnInitializedAsync()
    {
        await LoadTracks();
    }

    private async Task LoadTracks()
    {
        var tracks = await LearningTrackRepository.GetAllAsync();
        learningTracks = tracks.ToList();
    }

    private void EditTrack(int id)
    {
        // Navigate to a wizard or edit page (implement as needed)
        NavigationManager.NavigateTo($"/learningtracks/edit/{id}");
    }

    private async Task DeleteTrack(int id)
    {
        await LearningTrackRepository.DeleteAsync(id);
        message = "Learning Track deleted.";
        await LoadTracks();
    }
}