@using WiseUpDude.Model
@inject IJSRuntime JS
@inject ILogger<QuestionCard> Logger
@inject WiseUpDude.Shared.Services.UrlMetaClient UrlMetaClient

<div class="card mb-3 shadow-sm">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center position-relative">
            <h5 class="card-title mb-0">@($"Q{QuestionIndex + 1}: {Question?.Question}")</h5>
        </div>
        <div class="mb-3"></div>

        <div class="options-center">
        @if (Question?.Options != null && Question.Options.Count > 0)
        {
            @foreach (var option in Question.Options)
            {
                <button class="@GetOptionClass(option)"
                        @onclick="() => OnSelectAnswer(option)"
                        disabled="@(!CanEdit)">
                    @option
                </button>
            }
        }
        else
        {
            @foreach (var tf in new[] { "True", "False" })
            {
                <button class="@GetOptionClass(tf)"
                        @onclick="() => OnSelectAnswer(tf)"
                        disabled="@(!CanEdit)">
                    @tf
                </button>
            }
        }
        </div>

        @if (!AutoSubmit)
        {
            <div class="mt-3">
                <button class="btn btn-sm btn-primary" @onclick="CheckAnswer" disabled="@(!CanEdit)">Check Answer</button>
            </div>
        }

        @if (submitted && !string.IsNullOrEmpty(userAnswer))
        {
            <div class="mt-3">
                @if (userAnswer == Question?.Answer)
                {
                    <div class="feedback-correct">
                        ✅ Correct!
                    </div>
                }
                else
                {
                    <div class="feedback-incorrect">
                        ❌ Incorrect!
                    </div>
                }

                <div class="mt-1"><em>Explanation:</em> @Question?.Explanation</div>
            </div>
        }
    </div>

    @if (
        (!string.IsNullOrWhiteSpace(Question?.ContextSnippet)) ||
        (Question?.Citation != null && Question.Citation.Any(citation => !string.IsNullOrWhiteSpace(citation)))
    )
    {
        <div class="card-footer text-muted" style="font-size: small;">
            <div class="d-flex w-100 justify-content-between align-items-center flex-wrap">
                <div class="d-flex align-items-center flex-wrap">
                    @if (Question?.Citation != null && Question.Citation.Any(citation => !string.IsNullOrWhiteSpace(citation)))
                    {
                        @for (int i = 0; i < Question.Citation.Count; i++)
                        {
                            var citation = Question.Citation[i];
                            if (!string.IsNullOrWhiteSpace(citation))
                            {
                                <a tabindex="0" role="button"
                                   class="perplexity-pill popover-dismiss me-1"
                                   data-bs-toggle="popover"
                                   data-bs-trigger="click"
                                   data-bs-html="true"
                                   data-bs-custom-class="perplexity-popover"
                                   data-bs-title="@GetPopoverTitle(i)"
                                   data-bs-content="@GetPopoverContent(i)">
                                    <span class="perplexity-pill-number">@((i + 1).ToString())</span>
                                </a>
                            }
                        }
                    }
                </div>
                <div class="d-flex justify-content-end flex-grow-1">
                    @if (!string.IsNullOrWhiteSpace(Question?.ContextSnippet))
                    {
                        <span @onmouseover="ShowContextPopover" @onmouseout="HideContextPopover" style="cursor:pointer;">
                            <i class="bi bi-info-circle" style="font-size: 1.25rem; color: #0d6efd;" title="Show more info"></i>
                            @if (showContextPopover)
                            {
                                <div class="modern-context-popover fade show position-absolute end-0 mt-2">
                                    <div class="popover-body small" style="padding: 1rem;">
                                        <span style="font-size:1.1em; color:#0d6efd; margin-right:6px;">🛈</span>
                                        <em>Did you know?</em><br />
                                        <span>@Question.ContextSnippet</span>
                                    </div>
                                </div>
                            }
                        </span>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public QuizQuestion? Question { get; set; }
    [Parameter] public int QuestionIndex { get; set; }
    [Parameter] public bool AutoSubmit { get; set; }
    [Parameter] public EventCallback<(bool isCorrect, int questionIndex, string userAnswer)> OnAnswerSubmitted { get; set; }
    [Parameter] public bool MuteSound { get; set; }
    [Parameter] public bool CanEdit { get; set; } = true;

    private string userAnswer = string.Empty; // Tracks the user's selected answer
    private bool submitted = false;
    private bool showContextPopover = false;
    private int? hoveredCitationIndex = null;
    private List<CitationMeta> citationMetas = new();

    private class CitationMeta
    {
        public string Url { get; set; } = string.Empty;
        public string? Title { get; set; }
        public string? Description { get; set; }
    }

    protected override async Task OnParametersSetAsync()
    {
        // Pre-fill the user's saved answer if it exists
        if (Question?.UserAnswer is not null)
        {
            userAnswer = Question.UserAnswer;
            submitted = true; // Mark as submitted to show feedback
        }
        // Fetch citation metas
        citationMetas.Clear();
        if (Question?.Citation != null)
        {
            var tasks = new List<Task<CitationMeta>>();
            foreach (var citation in Question.Citation)
            {
                if (!string.IsNullOrWhiteSpace(citation))
                {
                    tasks.Add(FetchCitationMetaAsync(citation));
                }
                else
                {
                    tasks.Add(Task.FromResult(new CitationMeta { Url = string.Empty, Title = null, Description = null }));
                }
            }
            citationMetas = (await Task.WhenAll(tasks)).ToList();
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Only initialize popovers after rendering
        if (Question?.Citation != null && citationMetas.Count > 0)
        {
            await JS.InvokeVoidAsync("initializePopovers");
        }
    }

    private async Task<CitationMeta> FetchCitationMetaAsync(string citation)
    {
        var meta = await UrlMetaClient.GetUrlMetaAsync(citation);
        Logger.LogInformation($"Fetched meta for citation: {citation}, Title: {meta.Title}, Description: {meta.Description}");
        return new CitationMeta { Url = citation, Title = meta.Title ?? citation, Description = meta.Description };
    }

    private void OnSelectAnswer(string answer)
    {
        if (!CanEdit) return;
        userAnswer = answer;
        submitted = false;

        Logger.LogInformation("Answer selected for question {QuestionIndex}: {Answer}", QuestionIndex, answer);

        if (AutoSubmit)
        {
            CheckAnswerAndNotify();
        }
    }

    private async void CheckAnswerAndNotify()
    {
        if (!CanEdit) return;
        submitted = true;

        if (Question is not null)
        {
            Question.UserAnswer = userAnswer;

            bool isCorrect = userAnswer == Question.Answer;

            Logger.LogInformation("Answer checked for question {QuestionIndex}. UserAnswer: {UserAnswer}, CorrectAnswer: {CorrectAnswer}, IsCorrect: {IsCorrect}",
                QuestionIndex, userAnswer, Question.Answer, isCorrect);

            if (!MuteSound)
            {
                try
                {
                    var soundFile = isCorrect ? "/sounds/correct.mp3" : "/sounds/incorrect.mp3";
                    Logger.LogDebug("Playing sound: {SoundFile}", soundFile);
                    await JS.InvokeVoidAsync("playSound", soundFile);
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Error playing sound for question {QuestionIndex}", QuestionIndex);
                }
            }

            // Pass isCorrect, QuestionIndex, and userAnswer
            await OnAnswerSubmitted.InvokeAsync((isCorrect, QuestionIndex, userAnswer));
        }

        StateHasChanged();
    }

    private void CheckAnswer()
    {
        CheckAnswerAndNotify();
    }

    private string GetOptionClass(string option)
    {
        if (!submitted)
        {
            return "btn btn-outline-dark me-2 mb-2 rounded-pill" + (CanEdit ? "" : " disabled");
        }

        if (option == Question?.Answer)
        {
            return "btn btn-correct me-2 mb-2 rounded-pill" + (CanEdit ? "" : " disabled"); // ✅ Correct
        }

        if (option == userAnswer)
        {
            return "btn btn-incorrect me-2 mb-2 rounded-pill" + (CanEdit ? "" : " disabled"); // ❌ Incorrect
        }

        return "btn btn-outline-secondary me-2 mb-2 rounded-pill" + (CanEdit ? "" : " disabled");
    }

    private string GetPopoverTitle(int currentIndex)
    {
        if (citationMetas.Count > currentIndex)
            return citationMetas[currentIndex].Title ?? citationMetas[currentIndex].Url;
        return "";
    }

    private string GetPopoverContent(int currentIndex)
    {
        if (citationMetas.Count > currentIndex)
            return citationMetas[currentIndex].Url;
        return "";
    }

    private void ShowContextPopover() => showContextPopover = true;
    private void HideContextPopover() => showContextPopover = false;
}

