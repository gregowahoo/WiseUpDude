@page "/learningtrack/{LearningTrackId:int}/quiz/{LearningTrackQuizId:int}/questions"
@using WiseUpDude.Model
@using Microsoft.AspNetCore.Components.Forms
@inject WiseUpDude.Data.Repositories.Interfaces.ILearningTrackQuizQuestionRepository QuizQuestionRepo
@inject WiseUpDude.Data.Repositories.Interfaces.ILearningTrackQuizRepository QuizRepo
@inject WiseUpDude.Shared.Services.ToastService ToastService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<div class="d-flex justify-content-between align-items-center mb-3">
    <div>
        <button class="btn btn-sm btn-outline-secondary mb-2" @onclick="GoBackToQuiz">
            <i class="bi bi-arrow-left"></i> Back to Quiz Details
        </button>
        <h4 class="text-secondary mb-0"><i class="bi bi-card-list me-2"></i>Questions for Quiz: @quizName</h4>
    </div>
    <button class="btn btn-success btn-sm" @onclick="ShowAddModal">
        <i class="bi bi-plus-circle-fill me-1"></i> <span class="small">Add New Question</span>
    </button>
</div>

@if (questions == null)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 150px;">
        <div class="spinner-border text-warning" role="status"><span class="visually-hidden">Loading...</span></div>
        <strong class="ms-2">Loading questions...</strong>
    </div>
}
else if (!questions.Any())
{
    <div class="alert alert-light text-center" role="alert">
        <i class="bi bi-info-circle me-2"></i> No questions found for this quiz.
        <button class="btn btn-link p-0 ms-1" @onclick="ShowAddModal">Add one now!</button>
    </div>
}
else
{
    <ul class="list-group">
        @foreach (var question in questions.OrderByDescending(q => q.CreationDate))
        {
            var inputId = $"questionRadio_{question.Id}";
            <li class="list-group-item d-flex align-items-center justify-content-between" @key="question.Id">
                <div class="form-check flex-grow-1">
                    <input class="form-check-input me-2"
                           type="radio"
                           name="questionRadio"
                           id="@inputId"
                           checked="@(selectedQuestion?.Id == question.Id)"
                           @onchange="() => HandleQuestionSelection(question, LearningTrackAction.Select)" />
                    <label class="form-check-label w-100" for="@inputId">
                        <div class="d-flex w-100 justify-content-between">
                            <span class="fw-semibold">
                                <i class="bi bi-question-circle-fill me-1"></i>@question.Question
                            </span>
                            <small class="@(selectedQuestion?.Id == question.Id ? "text-white-50" : "text-muted")">
                                <i class="bi bi-calendar-event me-1"></i>Created: @question.CreationDate.ToString("yyyy-MM-dd HH:mm")
                            </small>
                        </div>
                        <span class="d-block text-muted small">
                            <i class="bi bi-check2-circle-fill me-1"></i>@question.Answer
                        </span>
                        <span class="d-block text-muted small">
                            <i class="bi bi-bar-chart-steps me-1"></i>Difficulty: @question.Difficulty
                        </span>
                    </label>
                </div>
                <div class="d-flex flex-row align-items-center ms-2" style="gap: 0.5rem;">
                    <button class="btn btn-sm btn-outline-primary" @onclick:stopPropagation="true" @onclick="() => ShowEditModal(question)" title="Edit Question">
                        <i class="bi bi-pencil-square"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-danger" @onclick:stopPropagation="true" @onclick="() => DeleteQuestion(question)" title="Delete Question">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </li>
        }
    </ul>
}
<Modal IsVisible="@showModal" Title="@modalTitle" OnClose="CloseModal">
    <EditForm Model="@modalQuestion" OnValidSubmit="SaveQuestion">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label class="form-label">Question</label>
            <InputTextArea class="form-control" @bind-Value="modalQuestion.Question" rows="3" />
            <ValidationMessage For="@(() => modalQuestion.Question)" />
        </div>
        <div class="mb-3">
            <label class="form-label">Answer</label>
            <InputTextArea class="form-control" @bind-Value="modalQuestion.Answer" rows="3" />
            <ValidationMessage For="@(() => modalQuestion.Answer)" />
        </div>
        <div class="mb-3">
            <label class="form-label">Difficulty</label>
            <InputText class="form-control" @bind-Value="modalQuestion.Difficulty" />
            <ValidationMessage For="@(() => modalQuestion.Difficulty)" />
        </div>
        <div class="d-flex justify-content-end mt-3">
            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="CloseModal">Cancel</button>
        </div>
    </EditForm>
</Modal>

@code {
    [Parameter] public int LearningTrackId { get; set; }
    [Parameter] public int LearningTrackQuizId { get; set; }
    [Parameter] public EventCallback<(LearningTrackQuizQuestion, LearningTrackAction)> OnLearningTrackQuizQuestionSelected { get; set; }

    private List<LearningTrackQuizQuestion>? questions;
    private LearningTrackQuizQuestion? selectedQuestion;
    private bool showModal = false;
    private string modalTitle = "Add/Edit Question";
    private LearningTrackQuizQuestion modalQuestion = new();
    private bool isEdit = false;
    private string? quizName;

    protected override async Task OnParametersSetAsync()
    {
        await LoadQuizName();
        await LoadQuestions();
    }

    private async Task LoadQuizName()
    {
        var quiz = await QuizRepo.GetQuizByIdAsync(LearningTrackQuizId);
        quizName = quiz?.Name ?? $"ID: {LearningTrackQuizId}";
    }

    private async Task LoadQuestions()
    {
        questions = null;
        await InvokeAsync(StateHasChanged);
        try
        {
            var allQuestions = await QuizQuestionRepo.GetQuestionsByQuizIdAsync(LearningTrackQuizId);
            questions = allQuestions?.ToList() ?? new List<LearningTrackQuizQuestion>();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to load questions: {ex.Message}", ToastLevel.Error);
            questions = new List<LearningTrackQuizQuestion>();
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleQuestionSelection(LearningTrackQuizQuestion question, LearningTrackAction action)
    {
        selectedQuestion = question;
        await OnLearningTrackQuizQuestionSelected.InvokeAsync((question, action));
        StateHasChanged();
    }

    private void ShowAddModal()
    {
        modalTitle = "Add New Question";
        modalQuestion = new LearningTrackQuizQuestion { LearningTrackQuizId = LearningTrackQuizId, CreationDate = DateTime.UtcNow };
        isEdit = false;
        showModal = true;
    }

    private void ShowEditModal(LearningTrackQuizQuestion question)
    {
        modalTitle = "Edit Question";
        modalQuestion = new LearningTrackQuizQuestion
        {
            Id = question.Id,
            LearningTrackQuizId = question.LearningTrackQuizId,
            Question = question.Question,
            Answer = question.Answer,
            Difficulty = question.Difficulty,
            CreationDate = question.CreationDate
        };
        isEdit = true;
        showModal = true;
    }

    private async Task SaveQuestion()
    {
        try
        {
            if (isEdit)
            {
                await QuizQuestionRepo.UpdateQuestionAsync(modalQuestion);
                await ToastService.ShowToast("Question updated!", ToastLevel.Success);
            }
            else
            {
                await QuizQuestionRepo.AddQuestionAsync(modalQuestion);
                await ToastService.ShowToast("Question added!", ToastLevel.Success);
            }
            showModal = false;
            await LoadQuestions();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to save question: {ex.Message}", ToastLevel.Error);
        }
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task DeleteQuestion(LearningTrackQuizQuestion question)
    {
        try
        {
            await QuizQuestionRepo.DeleteQuestionAsync(question.Id);
            await ToastService.ShowToast($"Question deleted: {question.Question}", ToastLevel.Success);
            await LoadQuestions();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to delete question: {ex.Message}", ToastLevel.Error);
        }
    }

    private void GoBackToQuiz()
    {
        NavigationManager.NavigateTo($"/learningtrack/{LearningTrackId}/quiz/{LearningTrackQuizId}");
    }
}