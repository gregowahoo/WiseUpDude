@* PleaseWaitDialog.razor *@
@inject ITenorGifService GifService
@inject IConfiguration Configuration
@inject ILogger<PleaseWaitDialog> Logger

@if (IsVisible)
{
    <div class="please-wait-overlay">
        @* Bootstrap 5 Card structure. Added 'shadow' for a default shadow. *@
        <div class="card please-wait-card shadow">
            @if (_isInternalLoadingGif && string.IsNullOrEmpty(_gifUrl)) // Show this only if GIF is actively being fetched for the first time
            {
                <div class="card-body text-center">
                    <p class="loading-text">@CurrentLoadingMessage</p>
                    <div class="spinner-border spinner-border-sm ms-2" role="status">
                        <span class="visually-hidden">Fetching animation...</span>
                    </div>
                    <p class="text-muted small mt-1">Fetching animation...</p>
                </div>
            }
            else if (!string.IsNullOrEmpty(_gifUrl))
            {
                <img src="@_gifUrl" class="card-img-top loading-gif" alt="Loading animation for @SearchKeyword">
                <div class="card-body">
                    <p class="card-text loading-text text-center">@CurrentLoadingMessage</p>
                </div>
            }
            else if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="card-body text-center">
                    @* Optionally, you could include a generic error icon/image above the message if desired *@
                    <p class="card-text error-message">@_errorMessage</p>
                    <p class="card-text text-muted small">Please try again or wait a moment.</p>
                </div>
            }
            else // Fallback: Visible, but no GIF yet (e.g., initial state before GIF loads, or if API key is missing)
            {
                <div class="card-body text-center">
                    <p class="card-text loading-text">@CurrentLoadingMessage</p>
                    <div class="spinner-border text-primary mt-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted small mt-1">Loading content...</p>
                </div>
            }
        </div>
    </div>
}

@code {
    // Your existing C# code block remains unchanged here
    // ... (IsVisible, SearchKeyword, LoadingTextMessage parameters, _gifUrl, etc.) ...

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public string SearchKeyword { get; set; } = "thinking";

    [Parameter]
    public string LoadingTextMessage { get; set; } = "WiseUpDude is working its magic...";

    private string _gifUrl;
    private string _errorMessage;
    private string _tenorApiKey;
    private bool _isInternalLoadingGif;
    private string _currentLoadedKeyword;

    private string CurrentLoadingMessage => string.IsNullOrEmpty(_errorMessage) ? LoadingTextMessage : "Oops! Something went wrong.";


    protected override void OnInitialized()
    {
        _tenorApiKey = Configuration["TenorApiKey"];
        if (string.IsNullOrEmpty(_tenorApiKey))
        {
            _errorMessage = "CRITICAL: Tenor API Key is not configured."; // This will be shown if dialog becomes visible
            Logger?.LogCritical(_errorMessage);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            if (string.IsNullOrEmpty(_tenorApiKey)) // Re-check in case it was missing initially
            {
                _tenorApiKey = Configuration["TenorApiKey"]; // Attempt to re-fetch
                if (string.IsNullOrEmpty(_tenorApiKey))
                {
                    // _errorMessage is already set from OnInitialized if key was missing.
                    // If it was somehow cleared, set it again.
                    if (string.IsNullOrEmpty(_errorMessage)) _errorMessage = "Tenor API Key is not configured.";
                    Logger?.LogError("Tenor API Key is not configured (checked in OnParametersSetAsync).");
                    _gifUrl = null;
                    _isInternalLoadingGif = false; // Not actively loading if key is missing
                    StateHasChanged();
                    return;
                }
                else
                {
                    _errorMessage = null; // Clear error if key is now found
                }
            }

            // Load GIF if:
            // 1. No GIF is currently loaded OR
            // 2. The search keyword has changed OR
            // 3. A previous attempt to load resulted in an error (so we can retry)
            if (string.IsNullOrEmpty(_gifUrl) || _currentLoadedKeyword != SearchKeyword || !string.IsNullOrEmpty(_errorMessage))
            {
                // If only LoadingTextMessage changed but GIF is fine for the keyword, don't reload.
                // However, if there was an error, we should try loading again.
                if (_currentLoadedKeyword == SearchKeyword && !string.IsNullOrEmpty(_gifUrl) && string.IsNullOrEmpty(_errorMessage))
                {
                    // GIF already loaded for this keyword and no error, do nothing.
                }
                else
                {
                    await LoadGifAsync();
                }
            }
        }
        else
        {
            // Reset when hidden so it fetches a fresh GIF next time it's shown,
            _gifUrl = null;
            _currentLoadedKeyword = null;
            // _errorMessage = null; // debatable: keep error if it was a critical one like API key? Or clear?
            // For now, let's clear general errors, API key error handled above.
            if (_errorMessage != "CRITICAL: Tenor API Key is not configured.") _errorMessage = null;
        }
    }

    private async Task LoadGifAsync()
    {
        if (string.IsNullOrEmpty(_tenorApiKey))
        {
            // _errorMessage should already be set.
            // If not (e.g. direct call or race condition), set it.
            if (string.IsNullOrEmpty(_errorMessage)) _errorMessage = "Cannot load GIF: Tenor API Key is missing.";
            Logger?.LogError(_errorMessage);
            _isInternalLoadingGif = false;
            StateHasChanged();
            return;
        }

        _errorMessage = null;   // Clear previous general errors before attempting to load
        _isInternalLoadingGif = true;
        _gifUrl = null;
        StateHasChanged();

        Logger?.LogInformation("Attempting to load GIF for keyword: {Keyword}", SearchKeyword);

        var fetchedUrl = await GifService.GetRandomGifUrlAsync(_tenorApiKey, SearchKeyword);

        if (string.IsNullOrEmpty(fetchedUrl))
        {
            _errorMessage = $"Oops! Could not fetch a fun animation for '{SearchKeyword}'.";
            Logger?.LogWarning("Failed to load GIF for keyword: {Keyword}. Service returned null or empty.", SearchKeyword);
            _gifUrl = null;
            _currentLoadedKeyword = null;
        }
        else
        {
            _gifUrl = fetchedUrl;
            _currentLoadedKeyword = SearchKeyword;
            // _errorMessage = null; // Already cleared at the start of LoadGifAsync
            Logger?.LogInformation("Successfully loaded GIF for {Keyword}: {Url}", SearchKeyword, _gifUrl);
        }

        _isInternalLoadingGif = false;
        StateHasChanged();
    }
}