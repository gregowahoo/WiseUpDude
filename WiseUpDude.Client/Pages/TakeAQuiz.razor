@page "/TakeAQuiz/{QuizId:int}"

@* @rendermode InteractiveAuto *@
@rendermode InteractiveWebAssembly

@using WiseUpDude.Client.Controls
@using WiseUpDude.Model
@using WiseUpDude.Client.Pages
@using WiseUpDude.Shared.Services
@using System.Linq;
@using System.Collections.Generic;

@inject IConfiguration Configuration
@inject ILogger<TakeAQuiz> Logger

@inject HttpClient HttpClient
@inject ILogger<QuizApiService> QuizApiLogger

@inject QuizApiService? QuizApiService
@inject UserQuizApiService UserQuizApiService
@inject IUserQuizAttemptApiService UserQuizAttemptApiService

@inject IJSRuntime JS

@inject NavigationManager Nav

@* Show a subtle transition indicator instead of jarring mode alerts *@
@if (!_isWasmReady && !OperatingSystem.IsBrowser())
{
    <div class="wasm-loading-indicator">
        <div class="d-flex align-items-center text-muted">
            <div class="spinner-border spinner-border-sm me-2" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <small>Loading interactive features...</small>
        </div>
    </div>
}
else if (_isWasmReady || OperatingSystem.IsBrowser())
{
    @* Optional: Remove this section entirely for cleaner UI *@
    @* <div class="alert alert-success fade-in-smooth">
        <small><i class="bi bi-check-circle-fill me-1"></i>Interactive quiz ready!</small>
    </div> *@
}

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div>
            <h3 class="mb-0">
                🧠 Take Quiz -
                @(UserQuiz is null ? ""
                                : UserQuiz.Type switch
                                {
                                    "Topic" => UserQuiz.Topic,
                                    "Prompt" => UserQuiz.Prompt,
                                    "Url" => UserQuiz.Url,
                                    _ => UserQuiz.Description
                                })
            </h3>
            <p class="mb-0">Select an answer for each question to see if you're correct.</p>
            @if (!string.IsNullOrWhiteSpace(UserQuiz?.Difficulty))
            {
                <p class="text-muted mb-0">Quiz Difficulty: <strong>@UserQuiz.Difficulty</strong></p>
            }
        </div>
    </div>
    <div class="card-body">
        <!-- Score Tracker -->
        <ScoreTracker @key="UserQuiz?.Id"
                      TotalQuestions="@totalQuestions"
                      CorrectAnswers="@correctAnswers"
                      QuestionResults="@questionResults"
                      OnQuestionNavigate="@HandleQuestionNavigate" />

        <!-- Final Message -->
        @if (showFinalMessage)
        {
            @if ((double)correctAnswers / totalAnswered >= 0.8)
            {
                <div class="alert alert-success mt-4 fs-5 text-center fw-bold">
                    🎉 You Wise'd Up! Final Score: @correctAnswers / @totalAnswered
                </div>
            }
            else
            {
                <div class="alert alert-danger mt-4 fs-5 text-center fw-bold">
                    😬 You've got work to do, wise guy. Final Score: @correctAnswers / @totalAnswered
                </div>
            }
        }

        <!-- Quiz Controls -->
        <div class="d-flex align-items-center gap-4 mb-3">
            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleAutoSubmit">
                <i class="bi @(autoSubmit ? "bi-lightning-fill" : "bi-lightning") me-1"></i>
                @(autoSubmit ? "Auto-Submit On" : "Auto-Submit Off")
            </button>

            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleMute">
                <i class="bi @(muteSound ? "bi-volume-mute-fill" : "bi-volume-up-fill") me-1"></i>
                @(muteSound ? "Muted" : "Sound On")
            </button>

            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleLearnMode"
                    disabled="@(hasStartedQuiz || learnMode)"
                    title="Learn Mode: When enabled, your answers are saved and you cannot change your answer. You cannot turn off Learn Mode after starting, and you cannot enable it after answering a question.">
                <i class="bi @(learnMode ? "bi-mortarboard-fill" : "bi-mortarboard") me-1"></i>
                @(learnMode ? "Learn Mode On" : "Learn Mode Off")
            </button>
        </div>

        @if (UserQuiz == null || UserQuiz.Questions.Count == 0)
        {
            <div class="alert alert-warning">
                No quiz questions found. Please go to Home and generate a quiz first.
            </div>
        }
        else
        {
            @for (int i = 0; i < UserQuiz.Questions.Count; i++)
            {
                var question = UserQuiz.Questions[i];
                bool canEdit = !learnMode || !answeredQuestions.Contains(i);
                <div class="mb-4" id="question-@i">
                    <p class="text-muted">Question Difficulty: <strong>@question.Difficulty</strong></p>

                    <div class="question-options-center">
                        <QuestionCard @key="question.Id"
                                      Question="question"
                                      QuestionIndex="i"
                                      AutoSubmit="autoSubmit"
                                      MuteSound="muteSound"
                                      CanEdit="@canEdit"
                                      OnAnswerSubmitted="@((args) => HandleAnswerSubmitted(args))" />
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public int QuizId { get; set; }

    private Quiz? UserQuiz { get; set; }
    private int totalQuestions;
    private int correctAnswers;
    private int totalAnswered;
    private bool showFinalMessage;
    private bool autoSubmit = true;
    private bool muteSound = false;
    private bool learnMode = false;
    private bool hasStartedQuiz = false;
    private HashSet<int> answeredQuestions = new HashSet<int>();
    private Dictionary<int, DateTime> questionStartTimes = new Dictionary<int, DateTime>();
    private DateTime? AttemptStartTime;
    private UserQuizAttempt? CurrentAttempt;
    private int? CurrentAttemptId;
    private string? saveMessage;
    private string? saveMessageType;
    private List<bool?> questionResults = new();
    private bool _isWasmReady = false;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation($"Method: OnInitializedAsync START for QuizId={QuizId}");
        try
        {
            UserQuiz = await UserQuizApiService.GetUserQuizByIdAsync(QuizId);
            if (UserQuiz != null && UserQuiz.Questions != null)
            {
                totalQuestions = UserQuiz.Questions.Count;
                learnMode = UserQuiz.LearnMode;
                for (int i = 0; i < UserQuiz.Questions.Count; i++)
                {
                    if (!string.IsNullOrEmpty(UserQuiz.Questions[i].UserAnswer))
                    {
                        answeredQuestions.Add(i);
                        if (UserQuiz.Questions[i].UserAnswer == UserQuiz.Questions[i].Answer)
                        {
                            correctAnswers++;
                        }
                    }
                }
                totalAnswered = answeredQuestions.Count;
                questionResults = BuildQuestionResults();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception in OnInitializedAsync");
        }
        Logger.LogInformation("Method: OnInitializedAsync END");
    }

    private List<bool?> BuildQuestionResults()
    {
        // Logger.LogInformation("Method: BuildQuestionResults");
        if (UserQuiz?.Questions == null)
            return Enumerable.Repeat<bool?>(null, totalQuestions).ToList();
        return UserQuiz.Questions.Select(q =>
            string.IsNullOrEmpty(q.UserAnswer)
                ? (bool?)null
                : q.UserAnswer == q.Answer).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation($"Method: OnAfterRenderAsync (firstRender={firstRender})");
        if (firstRender)
        {
            try
            {
                await JS.InvokeVoidAsync("initBootstrapTooltips");
                
                // Mark WASM as ready for smoother UI transitions
                if (OperatingSystem.IsBrowser())
                {
                    _isWasmReady = true;
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Exception in OnAfterRenderAsync");
            }
        }
    }

    private void ToggleAutoSubmit()
    {
        // Logger.LogInformation("Method: ToggleAutoSubmit");
        autoSubmit = !autoSubmit;
    }

    private void ToggleMute()
    {
        // Logger.LogInformation("Method: ToggleMute");
        muteSound = !muteSound;
    }

    private async Task ToggleLearnMode()
    {
        // Logger.LogInformation($"Method: ToggleLearnMode (learnMode={learnMode})");
        if (UserQuiz?.Questions != null)
        {
            answeredQuestions.Clear();
            for (int i = 0; i < UserQuiz.Questions.Count; i++)
            {
                if (!string.IsNullOrEmpty(UserQuiz.Questions[i].UserAnswer))
                {
                    answeredQuestions.Add(i);
                }
            }
        }
        if ((learnMode && answeredQuestions.Count > 0) ||
            (!learnMode && answeredQuestions.Count > 0))
        {
            return;
        }

        learnMode = !learnMode;
        if (UserQuiz != null)
        {
            await UserQuizApiService.UpdateLearnModeAsync(UserQuiz.Id, learnMode);
        }
    }

    private async Task HandleAnswerSubmitted((bool isCorrect, int questionIndex, string userAnswer) args)
    {
        Logger.LogInformation($"Method: HandleAnswerSubmitted (isCorrect={args.isCorrect}, questionIndex={args.questionIndex}, userAnswer={args.userAnswer})");

        var (isCorrect, questionIndex, userAnswer) = args;
        if (UserQuiz == null || UserQuiz.Questions == null || questionIndex < 0 || questionIndex >= UserQuiz.Questions.Count)
            return;

        if (answeredQuestions.Contains(questionIndex)) return;

        hasStartedQuiz = true;
        var userQuizQuestion = UserQuiz.Questions[questionIndex];
        userQuizQuestion.UserAnswer = userAnswer;
        await UserQuizApiService.UpdateUserQuizQuestionAnswerAsync(userQuizQuestion.Id, userAnswer);

        if (learnMode)
        {
            answeredQuestions.Add(questionIndex);
            DateTime questionStart = questionStartTimes.ContainsKey(questionIndex)
                ? questionStartTimes[questionIndex]
                : AttemptStartTime ?? DateTime.UtcNow;

            var attemptQuestion = new UserQuizAttemptQuestion
            {
                UserQuizAttemptId = CurrentAttemptId ?? 0,
                UserQuizQuestionId = userQuizQuestion.Id,
                UserAnswer = userAnswer,
                IsCorrect = isCorrect,
                TimeTakenSeconds = (DateTime.UtcNow - questionStart).TotalSeconds
            };

            if (CurrentAttempt == null)
            {
                AttemptStartTime = DateTime.UtcNow;
                var newAttempt = new UserQuizAttempt
                {
                    UserQuizId = QuizId,
                    AttemptDate = AttemptStartTime.Value,
                    Score = 0,
                    Duration = TimeSpan.Zero,
                    AttemptQuestions = new List<UserQuizAttemptQuestion> { attemptQuestion },
                    IsComplete = false,
                };
                CurrentAttempt = await UserQuizAttemptApiService.CreateAsync(newAttempt);
                CurrentAttemptId = CurrentAttempt?.Id;
            }
            else
            {
                CurrentAttempt.AttemptQuestions ??= new List<UserQuizAttemptQuestion>();
                CurrentAttempt.AttemptQuestions.Add(attemptQuestion);
                await UserQuizAttemptApiService.UpdateAsync(CurrentAttempt);
            }
        }
        else
        {
            answeredQuestions.Add(questionIndex);
        }

        totalAnswered++;
        if (isCorrect) correctAnswers++;

        questionResults = BuildQuestionResults();

        if (totalAnswered == totalQuestions)
        {
            if (learnMode)
            {
                var duration = AttemptStartTime.HasValue ? DateTime.UtcNow - AttemptStartTime.Value : TimeSpan.Zero;
                if (CurrentAttempt != null)
                {
                    CurrentAttempt.Score = totalQuestions > 0 ? (double)correctAnswers / totalQuestions : 0;
                    CurrentAttempt.Duration = duration;
                    CurrentAttempt.IsComplete = true;
                    await UserQuizAttemptApiService.UpdateAsync(CurrentAttempt);
                }
            }
            await HandleQuizCompletionAsync();
        }

        // StateHasChanged();
    }

    private async Task HandleQuizCompletionAsync()
    {
        // Logger.LogInformation("Method: HandleQuizCompletionAsync");

        showFinalMessage = true;
        await JS.InvokeVoidAsync("scrollToTopSmooth");

        double scorePercent = totalAnswered > 0 ? (double)correctAnswers / totalAnswered : 0;

        if (scorePercent >= 0.8)
        {
            if (!muteSound)
            {
                await JS.InvokeVoidAsync("playSound", "/sounds/applause.mp3");
            }
            await JS.InvokeVoidAsync("launchConfetti");
            saveMessage = "Great job! You've completed the quiz with a passing score.";
            saveMessageType = "success";
        }
        else
        {
            saveMessage = "Quiz completed. You might want to review the material and try again.";
            saveMessageType = "warning";
        }
    }

    private async Task HandleQuestionNavigate(int questionIndex)
    {
        // Logger.LogInformation("Method: ToggleAutoSubmit");

        var questionElementId = $"question-{questionIndex}";
        await JS.InvokeVoidAsync("scrollToElement", questionElementId);
    }
}
