@page "/admin/quiz-of-the-day"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.AspNetCore.Components.Authorization
@using WiseUpDude.Model
@using WiseUpDude.Services
@using WiseUpDude.Data.Repositories

@inject IQuizOfTheDayService QuizOfTheDayService
@inject IRepository<Quiz> QuizRepository
@inject NavigationManager NavigationManager

<PageTitle>Admin - Quiz of the Day Management</PageTitle>

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Quiz of the Day Management</h2>
        <a href="/admin/users" class="btn btn-secondary">Back to Admin Dashboard</a>
    </div>

    <!-- Current Quiz of the Day -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-primary">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Current Quiz of the Day</h5>
                </div>
                <div class="card-body">
                    @if (IsLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            Loading...
                        </div>
                    }
                    else if (CurrentQuizOfTheDay != null)
                    {
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h6>@CurrentQuizOfTheDay.Name</h6>
                                <p class="text-muted mb-1">
                                    <strong>Type:</strong> @CurrentQuizOfTheDay.Type
                                    @if (CurrentQuizOfTheDay.Type == "Topic")
                                    {
                                        <span> - @CurrentQuizOfTheDay.Topic</span>
                                    }
                                </p>
                                <p class="text-muted mb-1"><strong>Featured on:</strong> @CurrentQuizOfTheDay.QuizOfTheDayDate?.ToString("MMMM dd, yyyy")</p>
                                <p class="text-muted mb-0"><strong>Created by:</strong> @CurrentQuizOfTheDay.UserName</p>
                            </div>
                            <div>
                                <button class="btn btn-warning btn-sm" @onclick="() => RemoveQuizOfTheDay(CurrentQuizOfTheDay.Id)" disabled="@IsProcessing">
                                    @if (IsProcessing)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status"></span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-x-circle"></i>
                                    }
                                    Remove
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted mb-0">No Quiz of the Day set for today.</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Search and Set Quiz of the Day -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Set Quiz of the Day</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="input-group">
                                <input type="text" class="form-control" placeholder="Search quizzes by name..." @bind="SearchTerm" @onkeypress="HandleKeyPress" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="SearchQuizzes">
                                    <i class="bi bi-search"></i> Search
                                </button>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <input type="date" class="form-control" @bind="SelectedDate" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Search Results -->
    @if (SearchResults.Any())
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Search Results (@SearchResults.Count quizzes)</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Type</th>
                                        <th>Topic/Prompt</th>
                                        <th>Created By</th>
                                        <th>Created</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var quiz in SearchResults.Take(20))
                                    {
                                        <tr>
                                            <td>@quiz.Name</td>
                                            <td>
                                                <span class="badge @GetTypeBadgeClass(quiz.Type ?? "Unknown")">@quiz.Type</span>
                                            </td>
                                            <td>
                                                @if (quiz.Type == "Topic")
                                                {
                                                    @quiz.Topic
                                                }
                                                else if (quiz.Type == "Prompt")
                                                {
                                                    @(quiz.Prompt?.Length > 30 ? quiz.Prompt.Substring(0, 30) + "..." : quiz.Prompt)
                                                }
                                                else if (quiz.Type == "Url")
                                                {
                                                    <span>URL Quiz</span>
                                                }
                                            </td>
                                            <td>@quiz.UserName</td>
                                            <td>@quiz.CreationDate.ToString("MM/dd/yyyy")</td>
                                            <td>
                                                <button class="btn btn-primary btn-sm" 
                                                        @onclick="() => SetQuizOfTheDay(quiz.Id)" 
                                                        disabled="@(IsProcessing || quiz.IsQuizOfTheDay)">
                                                    @if (IsProcessing)
                                                    {
                                                        <span class="spinner-border spinner-border-sm" role="status"></span>
                                                    }
                                                    else if (quiz.IsQuizOfTheDay)
                                                    {
                                                        <i class="bi bi-check-circle"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="bi bi-star"></i>
                                                    }
                                                    @(quiz.IsQuizOfTheDay ? "Featured" : "Set as QOD")
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        @if (SearchResults.Count > 20)
                        {
                            <p class="text-muted">Showing first 20 results of @SearchResults.Count. Refine your search for more specific results.</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- All Quizzes of the Day -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">All Quizzes of the Day (@AllQuizzesOfTheDay.Count)</h5>
                </div>
                <div class="card-body">
                    @if (AllQuizzesOfTheDay.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Featured Date</th>
                                        <th>Type</th>
                                        <th>Created By</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var quiz in AllQuizzesOfTheDay.Take(10))
                                    {
                                        <tr>
                                            <td>@quiz.Name</td>
                                            <td>@quiz.QuizOfTheDayDate?.ToString("MMMM dd, yyyy")</td>
                                            <td>
                                                <span class="badge @GetTypeBadgeClass(quiz.Type ?? "Unknown")">@quiz.Type</span>
                                            </td>
                                            <td>@quiz.UserName</td>
                                            <td>
                                                <button class="btn btn-warning btn-sm" 
                                                        @onclick="() => RemoveQuizOfTheDay(quiz.Id)" 
                                                        disabled="@IsProcessing">
                                                    @if (IsProcessing)
                                                    {
                                                        <span class="spinner-border spinner-border-sm" role="status"></span>
                                                    }
                                                    else
                                                    {
                                                        <i class="bi bi-x-circle"></i>
                                                    }
                                                    Remove
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        @if (AllQuizzesOfTheDay.Count > 10)
                        {
                            <p class="text-muted">Showing first 10 entries. Total: @AllQuizzesOfTheDay.Count quizzes of the day.</p>
                        }
                    }
                    else
                    {
                        <p class="text-muted">No quizzes have been featured as Quiz of the Day yet.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Quiz? CurrentQuizOfTheDay;
    private List<Quiz> AllQuizzesOfTheDay = new();
    private List<Quiz> SearchResults = new();
    private string SearchTerm = "";
    private DateTime SelectedDate = DateTime.Today;
    private bool IsLoading = true;
    private bool IsProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        IsLoading = true;
        StateHasChanged();

        try
        {
            // Load current quiz of the day
            CurrentQuizOfTheDay = await QuizOfTheDayService.GetCurrentQuizOfTheDayAsync();

            // Load all quizzes of the day
            var allQuizzes = await QuizOfTheDayService.GetAllQuizzesOfTheDayAsync();
            AllQuizzesOfTheDay = allQuizzes.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchQuizzes()
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            SearchResults.Clear();
            return;
        }

        try
        {
            var allQuizzes = await QuizRepository.GetAllAsync();
            
            SearchResults = allQuizzes
                .Where(q => q.Name?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
                           (q.Topic?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                           (q.Prompt?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
                .OrderByDescending(q => q.CreationDate)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching quizzes: {ex.Message}");
        }

        StateHasChanged();
    }

    private async Task SetQuizOfTheDay(int quizId)
    {
        IsProcessing = true;
        StateHasChanged();

        try
        {
            await QuizOfTheDayService.SetQuizOfTheDayAsync(quizId, SelectedDate);
            await LoadData();
            SearchResults.Clear();
            SearchTerm = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting quiz of the day: {ex.Message}");
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task RemoveQuizOfTheDay(int quizId)
    {
        IsProcessing = true;
        StateHasChanged();

        try
        {
            await QuizOfTheDayService.RemoveQuizOfTheDayAsync(quizId);
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing quiz of the day: {ex.Message}");
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchQuizzes();
        }
    }

    private string GetTypeBadgeClass(string type) => type switch
    {
        "Topic" => "bg-info",
        "Prompt" => "bg-warning text-dark",
        "Url" => "bg-primary",
        _ => "bg-secondary"
    };
}