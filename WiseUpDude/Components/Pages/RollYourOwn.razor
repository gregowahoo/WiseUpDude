@page "/rollyourown"

@using Microsoft.AspNetCore.Authorization
@using WiseUpDude.Services
@using WiseUpDude.Services.Interfaces
@using WiseUpDude.Model
@using WiseUpDude.Data.Repositories

@inject QuizRepository QuizRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IQuizFromPromptService QuizGenerationService
@inject ILogger<RollYourOwn> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer
@attribute [Authorize]

@* <p>IsGenerating: @IsGenerating, IsSaving: @IsSaving</p> *@

@if (IsGenerating)
{
    <p class="text-center mt-3 text-muted">🧠 Generating your quiz...</p>
}

<div class="container mt-5">
    <div class="text-center mb-4">
        <h2 class="fw-bold">🎲 Roll Your Own Quiz!</h2>
        <p class="text-muted">Enter a custom prompt to generate a quiz tailored to your needs.</p>
    </div>

    <div class="row justify-content-center">
        <div class="col-md-8">
            <label for="promptInput" class="form-label fw-semibold">Enter your custom prompt:</label>
            <InputText id="promptInput" @bind-Value="UserPrompt" class="form-control form-control-lg mb-3"
                       placeholder="e.g. Create a quiz about the history of space exploration." />
            <br />

            <div class="text-center">
                <button class="btn btn-success btn-lg px-5"
                        @onclick="SaveQuiz"
                        disabled="@(IsGenerating || IsSaving || string.IsNullOrWhiteSpace(UserPrompt))">
                    🚀 Generate & Save Quiz
                </button>
            </div>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <p class="text-danger mt-3">@ErrorMessage</p>
            }
        </div>
    </div>
</div>

@code {
    private string? UserPrompt { get; set; }
    private bool IsGenerating = false;
    private bool IsSaving = false;
    private string? ErrorMessage;

    private bool CanGenerateAndSave =>
        !IsGenerating && !IsSaving && !string.IsNullOrWhiteSpace(UserPrompt);

    private async Task SaveQuiz()
    {
        if (string.IsNullOrWhiteSpace(UserPrompt))
        {
            ErrorMessage = "Please enter a valid prompt.";
            return;
        }

        IsGenerating = true;
        IsSaving = true;
        ErrorMessage = null;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value
                   ?? user.FindFirst("sub")?.Value; // fallback for JWT sub claim

        try
        {
            Logger.LogInformation("Sending prompt to QuizGenerationService: {UserPrompt}", UserPrompt);

            var generatedQuestions = await QuizGenerationService.GenerateQuestionsFromPromptAsync(UserPrompt);

            if (generatedQuestions is null || !generatedQuestions.Any())
            {
                Logger.LogError("QuizGenerationService returned no questions.");
                ErrorMessage = "Failed to generate quiz questions. Please try again.";
                return;
            }

            var quiz = new Quiz
            {
                Name = UserPrompt.Length > 50 ? UserPrompt.Substring(0, 50) : UserPrompt,
                UserId = userId,
                Type = "Prompt",
                Prompt = UserPrompt,
                Description = null, // You can set this to something else if needed
                Difficulty = "Medium",
                LearnMode = false,
                Topic = null, 
                Questions = generatedQuestions
            };

            await QuizRepository.AddAsync(quiz);

            Logger.LogInformation("Quiz successfully saved. QuizId: {QuizId}", quiz.Id);

            NavigationManager.NavigateTo($"/TakeAQuiz/{quiz.Id}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception during quiz save.");
            ErrorMessage = "An error occurred while generating or saving the quiz. Please try again later.";
        }
        finally
        {
            IsGenerating = false;
            IsSaving = false;
        }
    }
}