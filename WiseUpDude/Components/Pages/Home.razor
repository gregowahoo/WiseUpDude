@page "/home"

@layout WiseUpDude.Components.Layout.MinimalLayout

@using Microsoft.AspNetCore.Components.Authorization
@using WiseUpDude.Model
@using WiseUpDude.Services
@using WiseUpDude.Data.Repositories
@using WiseUpDude.Data.Repositories.Interfaces
@using WiseUpDude.Components.Controls

@inject DashboardDataService DashboardData
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
@inject IUserQuizRepository<Quiz> UserQuizRepository
@inject IUserQuizQuestionRepository<QuizQuestion> UserQuizQuestionRepository
@inject QuizStateService QuizState
@rendermode InteractiveServer
@attribute [Authorize(Roles = "FreeSubscriber,PaidSubscriber,Admin,EnterpriseSubscriber")]
@inject WiseUpDude.Shared.Services.ToastService ToastService



<h1 class="text-center mb-4">Welcome to Wise Up Dude!</h1>

<div class="container">
    <!-- Dashboard Summary -->
    <div class="row text-center mb-4">
        <div class="col-md-4">
            <div class="card shadow-sm p-3">
                <h5>Total Quizzes Taken</h5>
                <p class="display-4">@Summary?.TotalQuizzesTaken</p>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm p-3">
                <h5>Average Score</h5>
                <p class="display-4">@($"{Summary?.AverageScore:F0}%")</p>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm p-3">
                <h5>Best Quiz</h5>
                <p>@(Summary?.BestQuizName ?? "N/A")</p>
                <p class="text-success">Score: @($"{Summary?.BestQuizScore ?? 0:F0}%")</p>
            </div>
        </div>
    </div>

    <!-- Saved Quizzes -->
    <div>
        <h3>Your Saved Quizzes</h3>
        @if (IsGenerating)
        {
            <p class="text-center text-muted">🦖 Generating your quiz...</p>
        }
        else if (Summary == null)
        {
            <p>Loading...</p>
        }
        else if (Summary.RecentQuizzes?.Any() == true)
        {
            <div class="row">
                @foreach (var quiz in Summary.RecentQuizzes)
                {
                    var scoreClass = quiz.Score switch
                    {
                        >= 90 => "score-high",
                        >= 75 => "score-low",
                        >= 50 => "score-mid",
                        _ => "score-bad"
                    };

                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card shadow-sm h-100">
                            <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center">
                                @if (editingQuizId == quiz.Id)
                                {
                                    <input type="text" class="form-control form-control-sm w-75" @bind="quiz.Name" />
                                    <div class="d-flex gap-2">
                                        <button class="btn btn-sm btn-light" @onclick="() => SaveQuizName(quiz.Id, quiz.Name)">Save</button>
                                        <button class="btn btn-sm btn-secondary" @onclick="CancelEdit">Cancel</button>
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex align-items-center justify-content-between w-100">
                                        <h5 class="mb-0 text-truncate">@quiz.Name</h5>
                                        <span class="badge rounded-pill @scoreClass ms-2" title="@($"{quiz.Score:F0}% Complete")">
                                            @($"{quiz.Score:F0}%")
                                        </span>
                                    </div>
                                }
                            </div>
                            <div class="card-body">
                                @if (quiz.Type == "Prompt")
                                {
                                    <p><span class="badge bg-warning">Prompt:</span> @quiz.Prompt</p>
                                }
                                else if (quiz.Type == "Topic")
                                {
                                    <p><span class="badge bg-info">Topic:</span> @quiz.Topic</p>
                                }
                                else if (quiz.Type == "Url")
                                {
                                    <p>
                                        <span class="badge bg-primary">URL</span>
                                        @if (!string.IsNullOrWhiteSpace(quiz.Url))
                                        {
                                            <a href="@quiz.Url" target="_blank" class="ms-1 text-decoration-underline text-primary">@quiz.Url</a>
                                        }
                                    </p>
                                }
                                @if (!string.IsNullOrWhiteSpace(quiz.Description))
                                {
                                    <p class="text-muted small">@quiz.Description</p>
                                }
                            </div> <!-- end card-body -->
                            <div class="card-footer p-0">
                                <nav class="navbar navbar-expand bg-light">
                                    <div class="container-fluid justify-content-around">
                                        <a class="text-primary mx-2" title="Resume Quiz" @onclick="() => ResumeQuiz(quiz.Id)">
                                            <i class="bi bi-play-fill fs-5"></i>
                                        </a>
                                        <a class="text-success mx-2" title="Start Over" @onclick="() => StartOver(quiz.Id)">
                                            <i class="bi bi-arrow-clockwise fs-5"></i>
                                        </a>
                                        <a class="text-danger mx-2" title="Delete Quiz" @onclick="() => ConfirmDelete(quiz.Id)">
                                            <i class="bi bi-trash fs-5"></i>
                                        </a>
                                        <a class="text-secondary mx-2" title="Edit Quiz Name" @onclick="() => EditQuizName(quiz.Id)">
                                            <i class="bi bi-pencil fs-5"></i>
                                        </a>
                                        <button type="button"
                                                class="btn btn-link p-0 @GetLearnModeIconClass(quiz.LearnMode) mx-2"
                                                title="@GetLearnModeTooltip(quiz.LearnMode, quiz.Id)"
                                                @onclick="() => ToggleLearnMode(quiz.Id)"
                                                disabled="@(quizzesWithAnswers.Contains(quiz.Id))">
                                            <i class="@GetLearnModeIconType(quiz.LearnMode) fs-5"></i>
                                        </button>
                                    </div>
                                </nav>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p>You have no saved quizzes.</p>
        }
    </div>
    @if (quizToDeleteId.HasValue)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this quiz?</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                        <button class="btn btn-danger" @onclick="ConfirmedDelete">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private int? editingQuizId = null;
    private DashboardSummaryDto? Summary;
    private bool IsGenerating = false;
    private int? quizToDeleteId = null;
    private HashSet<int> quizzesWithAnswers = new HashSet<int>();

    private void EditQuizName(int quizId) => editingQuizId = quizId;
    private void CancelEdit() => editingQuizId = null;

    private async Task SaveQuizName(int quizId, string newName)
    {
        await UserQuizRepository.UpdateQuizNameAsync(quizId, newName);
        editingQuizId = null;
    }

    private async Task DeleteQuiz(int quizId)
    {
        try
        {
            await UserQuizRepository.DeleteAsync(quizId);
            Summary?.RecentQuizzes?.RemoveAll(q => q.Id == quizId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting quiz: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(c => c.Type == "sub" || c.Type.EndsWith("nameidentifier"))?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                Summary = await DashboardData.GetDashboardSummaryAsync(userId);
                if (Summary?.RecentQuizzes != null && Summary.RecentQuizzes.Count > 0)
                {
                    var quizIds = Summary.RecentQuizzes.Select(q => q.Id).ToList();
                    var questions = await UserQuizQuestionRepository.GetByUserAndQuizIdsAsync(userId, quizIds);
                    var quizIdsWithAnswers = questions
                        .Where(q => !string.IsNullOrEmpty(q.UserAnswer))
                        .Select(q => q.QuizId)
                        .Distinct();
                    quizzesWithAnswers = new HashSet<int>(quizIdsWithAnswers);
                }
            }
        }
    }

    private async Task ResumeQuiz(int quizId)
    {
        IsGenerating = true;
        
        try
        {
            var selectedQuiz = await UserQuizRepository.GetByIdAsync(quizId);
            if (selectedQuiz != null)
            {
                QuizState.CurrentQuiz = selectedQuiz;
                NavManager.NavigateTo($"/TakeAQuiz/{quizId}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error resuming quiz: {ex.Message}");
        }
        finally
        {
            IsGenerating = false;
        }
    }

    private async Task ToggleLearnMode(int quizId)
    {
        IsGenerating = true;
        try
        {
            var quiz = Summary?.RecentQuizzes?.FirstOrDefault(q => q.Id == quizId);
            if (quiz != null)
            {
                await UserQuizRepository.UpdateLearnModeAsync(quizId, !quiz.LearnMode);
            }
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity?.IsAuthenticated == true)
            {
                var userId = user.FindFirst(c => c.Type == "sub" || c.Type.EndsWith("nameidentifier"))?.Value;
                if (!string.IsNullOrEmpty(userId))
                {
                    Summary = await DashboardData.GetDashboardSummaryAsync(userId);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling learn mode: {ex.Message}");
        }
        finally
        {
            IsGenerating = false;
        }
    }

    private async Task StartOver(int quizId)
    {
        IsGenerating = true;
        
        try
        {
            await UserQuizQuestionRepository.ClearUserAnswersByQuizIdAsync(quizId);
            NavManager.NavigateTo($"/TakeAQuiz/{quizId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting fresh: {ex.Message}");
        }
        finally
        {
            IsGenerating = false;
        }
    }

    private void ConfirmDelete(int quizId) => quizToDeleteId = quizId;
    private void CancelDelete() => quizToDeleteId = null;

    private async Task ConfirmedDelete()
    {
        if (quizToDeleteId.HasValue)
        {
            await DeleteQuiz(quizToDeleteId.Value);
            quizToDeleteId = null;
        }
    }

    private string GetLearnModeIconClass(bool isActive) =>
        isActive ? "text-info learn-active" : "text-success";

    private string GetLearnModeIconType(bool isActive) =>
        isActive ? "bi bi-mortarboard-fill" : "bi bi-mortarboard";

    private string GetLearnModeTooltip(bool isActive, int quizId)
    {
        if (quizzesWithAnswers.Contains(quizId))
            return "Learn Mode cannot be enabled or disabled after you have started answering questions.";
        return isActive ? "Learn Mode is ON" : "Enable Learn Mode";
    }
}