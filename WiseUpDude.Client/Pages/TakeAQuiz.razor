@page "/TakeAQuiz/{QuizId:int}"
@* @rendermode InteractiveAuto *@
@rendermode InteractiveWebAssembly


@using WiseUpDude.Model
@using WiseUpDude.Client.Pages
@using WiseUpDude.Shared.Services

@inject IConfiguration Configuration
@inject ILogger<TakeAQuiz> Logger

@inject HttpClient HttpClient
@inject ILogger<QuizApiService> QuizApiLogger

@inject QuizApiService? QuizApiService
@inject UserQuizApiService UserQuizApiService

@inject IJSRuntime JS

@inject NavigationManager Nav

@if (OperatingSystem.IsBrowser())
{
    <div class="alert alert-success">
        <strong>WASM Mode:</strong> This page is running in WebAssembly mode.
    </div>
}
else
{
    <div class="alert alert-warning">
        <strong>Server Mode:</strong> This page is running in Blazor Server mode.
    </div>
}

<p>Running on: @(OperatingSystem.IsBrowser() ? "WASM" : "Server")</p>

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div>
            <h3 class="mb-0">
                🧠 Take Quiz -
                @(Quiz?.Type == "Topic"
                                ? Quiz?.Topic
                                : Quiz?.Prompt)
            </h3>
            <p class="mb-0">Select an answer for each question to see if you're correct.</p>
            @if (!string.IsNullOrWhiteSpace(Quiz?.Difficulty))
            {
                <p class="text-muted mb-0">Quiz Difficulty: <strong>@Quiz.Difficulty</strong></p>
            }
        </div>
    </div>
    <div class="card-body">
        <!-- Score Tracker -->
        <ScoreTracker TotalQuestions="@totalQuestions" CorrectAnswers="@correctAnswers" />

        <!-- Final Message -->
        @if (showFinalMessage)
        {
            @if ((double)correctAnswers / totalAnswered >= 0.8)
            {
                <div class="alert alert-success mt-4 fs-5 text-center fw-bold">
                    🎉 You Wise’d Up! Final Score: @correctAnswers / @totalAnswered
                </div>
            }
            else
            {
                <div class="alert alert-danger mt-4 fs-5 text-center fw-bold">
                    😬 You’ve got work to do, wise guy. Final Score: @correctAnswers / @totalAnswered
                </div>
            }
        }

        <!-- Quiz Controls -->
        <div class="d-flex align-items-center gap-4 mb-3">
            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleAutoSubmit">
                <i class="bi @(autoSubmit ? "bi-lightning-fill" : "bi-lightning") me-1"></i>
                @(autoSubmit ? "Auto-Submit On" : "Auto-Submit Off")
            </button>

            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleMute">
                <i class="bi @(muteSound ? "bi-volume-mute-fill" : "bi-volume-up-fill") me-1"></i>
                @(muteSound ? "Muted" : "Sound On")
            </button>

            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleLearnMode">
                <i class="bi @(learnMode ? "bi-mortarboard-fill" : "bi-mortarboard") me-1"></i>
                @(learnMode ? "Learn Mode On" : "Learn Mode Off")
            </button>
        </div>

        <!-- Quiz Content -->
        @if (Quiz == null || Quiz.Questions.Count == 0)
        {
            <div class="alert alert-warning">
                No quiz questions found. Please go to Home and generate a quiz first.
            </div>
        }
        else
        {
            @for (int i = 0; i < Quiz.Questions.Count; i++)
            {
                var question = Quiz.Questions[i];
                <div class="mb-4">
                    <p class="text-muted">Question Difficulty: <strong>@question.Difficulty</strong></p>
                    <QuestionCard Question="question"
                                  QuestionIndex="i"
                                  AutoSubmit="autoSubmit"
                                  MuteSound="muteSound"
                                  OnAnswerSubmitted="HandleAnswerSubmitted" />
                </div>
            }

            @if (!string.IsNullOrWhiteSpace(saveMessage))
            {
                <div class="alert alert-info mt-3">@saveMessage</div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public int QuizId { get; set; }

    private Quiz? Quiz;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogTrace("OnInitializedAsync: Fetching quiz for QuizId={QuizId}", QuizId);

        // Use UserQuizApiService to fetch the user quiz by ID
        Quiz = await UserQuizApiService.GetUserQuizByIdAsync(QuizId);

        if (Quiz?.Questions != null)
        {
            Logger.LogTrace("OnInitializedAsync: Quiz has {Count} questions.", Quiz.Questions.Count);
            totalQuestions = Quiz.Questions.Count;
            learnMode = Quiz.LearnMode;
        }
        else
        {
            Logger.LogTrace("OnInitializedAsync: Quiz or Quiz.Questions is null.");
        }
    }
}

@code {
    private bool autoSubmit = true;
    private string? saveMessage;

    private int totalQuestions;
    private int totalAnswered;
    private int correctAnswers;

    private bool showFinalMessage = false;
    private bool muteSound = false;
    private bool learnMode = false;

    protected override void OnInitialized()
    {
        Logger.LogTrace("OnInitialized: TakeAQuiz component initialized.");
    }

    private void HandleQuizUpdated()
    {
        Logger.LogTrace("HandleQuizUpdated: StateHasChanged called.");
        StateHasChanged();
    }

    private void ToggleAutoSubmit()
    {
        autoSubmit = !autoSubmit;
        Logger.LogTrace("ToggleAutoSubmit: autoSubmit is now {AutoSubmit}", autoSubmit);
    }

    private void ToggleMute()
    {
        muteSound = !muteSound;
        Logger.LogTrace("ToggleMute: muteSound is now {MuteSound}", muteSound);
    }

    private async Task ToggleLearnMode()
    {
        if (Quiz is not null)
        {
            learnMode = !learnMode;
            Quiz.LearnMode = learnMode;
            saveMessage = learnMode ? "Learn Mode enabled!" : "Learn Mode disabled!";
            Logger.LogTrace("ToggleLearnMode: LearnMode is now {LearnMode}", learnMode);
            await JS.InvokeVoidAsync("console.log", saveMessage);
        }
        else
        {
            saveMessage = "No quiz loaded to toggle Learn Mode.";
            Logger.LogTrace("ToggleLearnMode: No quiz loaded.");
        }
    }

    private async Task HandleAnswerSubmitted((bool isCorrect, int questionIndex) args)
    {
        var (isCorrect, questionIndex) = args;

        totalAnswered++;
        Logger.LogTrace("HandleAnswerSubmitted: Answer submitted for question {QuestionIndex}, isCorrect={IsCorrect}, totalAnswered={TotalAnswered}", questionIndex, isCorrect, totalAnswered);

        if (isCorrect)
        {
            correctAnswers++;
            Logger.LogTrace("HandleAnswerSubmitted: correctAnswers incremented to {CorrectAnswers}", correctAnswers);
        }

        if (Quiz?.Questions != null && totalAnswered >= Quiz.Questions.Count)
        {
            Logger.LogTrace("HandleAnswerSubmitted: All questions answered. Final score: {CorrectAnswers}/{TotalAnswered}", correctAnswers, totalAnswered);
            await JS.InvokeVoidAsync("scrollToTopSmooth");
            double scorePercent = (double)correctAnswers / totalAnswered;

            if (scorePercent >= 0.8)
            {
                Logger.LogTrace("HandleAnswerSubmitted: Score >= 80%, playing applause and launching confetti.");
                await JS.InvokeVoidAsync("playSound", "/sounds/applause.mp3");
                await JS.InvokeVoidAsync("launchConfetti");
            }

            showFinalMessage = true;
        }

        StateHasChanged();
    }
}