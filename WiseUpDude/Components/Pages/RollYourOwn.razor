@page "/rollyourown"

@using Microsoft.AspNetCore.Authorization
@using WiseUpDude.Services
@using WiseUpDude.Services.Interfaces
@using WiseUpDude.Model
@using WiseUpDude.Data.Repositories

@inject QuizRepository QuizRepository
@inject UserQuizRepository UserQuizRepository

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IQuizFromPromptService QuizGenerationService
@inject WiseUpDude.Services.PerplexityService PerplexityService
@inject ILogger<RollYourOwn> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITenorGifService TenorGifService
@inject IPromptSuggestionCacheService PromptCache
@inject IUrlSuggestionCacheService UrlCache

@rendermode InteractiveServer
@attribute [Authorize]
@attribute [StreamRendering(true)]

@if (IsGenerating || IsSaving)
{
    <PleaseWaitDialog IsVisible="IsGenerating || IsSaving"
                      LoadingTextMessage="@($"Preparing your \"{UserPrompt}\" quiz...")" />
}
@if (IsUrlGenerating)
{
    <PleaseWaitDialog IsVisible="IsUrlGenerating"
                      LoadingTextMessage="@($"Preparing your quiz from the URL: \"{QuizUrl}\"...")" />
}

<div class="container mt-5">
    <div class="text-center mb-4">
        <h2 class="fw-bold">🎲 Roll Your Own!</h2>
        <p class="text-muted">Choose how you want to generate your quiz.</p>
    </div>

    <ul class="nav nav-tabs custom-tabs justify-content-center mb-3" id="quizTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link @(ActiveTab == 0 ? "active" : "")" id="prompt-tab" data-bs-toggle="tab" type="button" role="tab" @onclick="() => SetTab(0)">Enter Your Custom Prompt</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(ActiveTab == 1 ? "active" : "")" id="url-tab" data-bs-toggle="tab" type="button" role="tab" @onclick="() => SetTab(1)">Create Quiz From A URL</button>
        </li>
    </ul>
    <div class="tab-content">
        <div class="tab-pane fade @(ActiveTab == 0 ? "show active" : "")" id="prompt" role="tabpanel">
            <div class="row justify-content-center">
                <div class="col-md-8">
                    @if (IsLoadingPrompts)
                    {
                        <div class="text-center">
                            <p>Loading suggestions...</p>
                        </div>
                    }
                    else if (SuggestedPrompts?.Any() == true)
                    {
                        <div class="d-flex justify-content-between align-items-center mb-1">
                            <label class="form-label fw-semibold small">Here are some ideas to get you started (click one to try it!):</label>
                        </div>
                        <div class="scrolling-prompts-container d-none d-md-block mb-3 @(promptSelected ? "animation-paused" : "")">
                            <div class="scrolling-prompts">
                                @foreach (var prompt in SuggestedPrompts)
                                {
                                    <span class="scrolling-prompt-item" @onclick="() => SelectPrompt(prompt)">@prompt</span>
                                }
                                <!-- Duplicate for seamless scroll -->
                                @foreach (var prompt in SuggestedPrompts)
                                {
                                    <span class="scrolling-prompt-item" @onclick="() => SelectPrompt(prompt)">@prompt</span>
                                }
                            </div>
                        </div>
                        <div class="text-center mb-3">
                            <button class="btn btn-sm btn-outline-secondary me-2" @onclick="TogglePromptSuggestionsDialog" title="View all suggestions in a dialog">View All</button>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="RefreshPromptsAsync" title="Get a new list of suggestions">
                                <i class="fas fa-sync-alt"></i> Refresh
                            </button>
                        </div>
                    }
                    <label for="promptInput" class="form-label fw-semibold">Enter your custom prompt:</label>
                    <InputTextArea id="promptInput" @bind-Value="UserPrompt" class="form-control form-control-lg mb-3"
                                   placeholder="e.g. The history of space exploration."
                                   Rows="10"
                                   @onkeydown="HandlePromptKeyDown">
                    </InputTextArea>
                    <br />
                    <div class="text-center">
                        <button class="btn btn-success btn-lg px-5"
                                @onclick="GenerateAndSaveQuizFromPrompt"
                                disabled="@(IsGenerating || IsSaving || string.IsNullOrWhiteSpace(UserPrompt))">
                            🚀 Generate & Save Quiz
                        </button>
                    </div>
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <p class="text-danger mt-3">@ErrorMessage</p>
                    }
                </div>
            </div>
        </div>
        <div class="tab-pane fade @(ActiveTab == 1 ? "show active" : "")" id="url" role="tabpanel">
            <div class="row justify-content-center">
                <div class="col-md-8">
                    @if (IsLoadingUrls)
                    {
                        <div class="text-center">
                            <p>Loading suggestions...</p>
                        </div>
                    }
                    else if (SuggestedUrls?.Any() == true)
                    {
                        <div class="d-flex justify-content-between align-items-center mb-1">
                            <label class="form-label fw-semibold small">Here are some ideas to get you started (click one to try it!):</label>
                        </div>
                        <div class="scrolling-prompts-container d-none d-md-block mb-3 @(urlSelected ? "animation-paused" : "")">
                            <div class="scrolling-prompts">
                                @foreach (var url in SuggestedUrls)
                                {
                                    <span class="scrolling-prompt-item" @onclick="() => SelectUrl(url)">@url</span>
                                }
                                <!-- Duplicate for seamless scroll -->
                                @foreach (var url in SuggestedUrls)
                                {
                                    <span class="scrolling-prompt-item" @onclick="() => SelectUrl(url)">@url</span>
                                }
                            </div>
                        </div>
                        <div class="text-center mb-3">
                            <button class="btn btn-sm btn-outline-secondary me-2" @onclick="ToggleUrlSuggestionsDialog" title="View all suggestions in a dialog">View All</button>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="RefreshUrlsAsync" title="Get a new list of suggestions">
                                <i class="fas fa-sync-alt"></i> Refresh
                            </button>
                        </div>
                    }
                    <label for="urlInput" class="form-label fw-semibold">Enter a URL to generate a quiz from its content:</label>
                    <InputText id="urlInput" @bind-Value="QuizUrl" class="form-control form-control-lg mb-3"
                               placeholder="e.g. https://en.wikipedia.org/wiki/Space_exploration" />
                    <br />
                    <div class="text-center">
                        <button class="btn btn-primary btn-lg px-5"
                                @onclick="GenerateAndSaveQuizFromUrl"
                                disabled="@(IsUrlGenerating || string.IsNullOrWhiteSpace(QuizUrl))">
                            🔗 Generate & Save Quiz
                        </button>
                    </div>
                    @if (!string.IsNullOrEmpty(UrlErrorMessage))
                    {
                        <p class="text-danger mt-3">@UrlErrorMessage</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@if (isPromptSuggestionsDialogVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-scrollable" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Prompt Suggestions</h5>
                    <button type="button" class="btn-close" @onclick="TogglePromptSuggestionsDialog"></button>
                </div>
                <div class="modal-body">
                    <ul class="list-group">
                        @foreach (var prompt in SuggestedPrompts)
                        {
                            <li class="list-group-item list-group-item-action" @onclick="async () => await SelectPromptFromDialog(prompt)">@prompt</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (isUrlSuggestionsDialogVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-scrollable" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">URL Suggestions</h5>
                    <button type="button" class="btn-close" @onclick="ToggleUrlSuggestionsDialog"></button>
                </div>
                <div class="modal-body">
                    <ul class="list-group">
                        @foreach (var url in SuggestedUrls)
                        {
                            <li class="list-group-item list-group-item-action" @onclick="async () => await SelectUrlFromDialog(url)">@url</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@code {
    private int ActiveTab { get; set; } = 0;
    private string? UserPrompt { get; set; }
    private string? QuizUrl { get; set; }
    private bool IsGenerating = false;
    private bool IsSaving = false;
    private string? ErrorMessage;
    private string? UrlErrorMessage;
    private bool IsUrlGenerating = false;
    private List<string> SuggestedPrompts = new();
    private bool IsLoadingPrompts = false;
    private bool promptSelected = false;
    private bool isPromptSuggestionsDialogVisible = false;
    private List<string> SuggestedUrls = new();
    private bool IsLoadingUrls = false;
    private bool urlSelected = false;
    private bool isUrlSuggestionsDialogVisible = false;

    private bool CanGenerateAndSave =>
        !IsGenerating && !IsSaving && !string.IsNullOrWhiteSpace(UserPrompt);

    protected override void OnInitialized()
    {
        _ = LoadPromptsAsync();
        _ = LoadUrlsAsync();
    }

    private async Task LoadPromptsAsync()
    {
        IsLoadingPrompts = true;
        await InvokeAsync(StateHasChanged);

        if (PromptCache.HasPrompts())
        {
            SuggestedPrompts = PromptCache.GetPrompts();
        }
        else
        {
            var (prompts, error) = await PerplexityService.GenerateSuggestedPromptsAsync();
            if (prompts != null)
            {
                SuggestedPrompts = prompts;
                PromptCache.SetPrompts(prompts);
            }
            else
            {
                Logger.LogError("Failed to load suggested prompts: {Error}", error);
            }
        }

        IsLoadingPrompts = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task RefreshPromptsAsync()
    {
        IsLoadingPrompts = true;
        await InvokeAsync(StateHasChanged);
        var (prompts, error) = await PerplexityService.GenerateSuggestedPromptsAsync();
        if (prompts != null)
        {
            SuggestedPrompts = prompts;
            PromptCache.SetPrompts(prompts);
        }
        else
        {
            Logger.LogError("Failed to load suggested prompts: {Error}", error);
        }
        IsLoadingPrompts = false;
        await InvokeAsync(StateHasChanged);
    }

    private void TogglePromptSuggestionsDialog()
    {
        isPromptSuggestionsDialogVisible = !isPromptSuggestionsDialogVisible;
    }

    private async Task SelectPromptFromDialog(string prompt)
    {
        TogglePromptSuggestionsDialog();
        await Task.Delay(200); // Allow UI to update
        await SelectPrompt(prompt);
    }

    private void SetTab(int tab)
    {
        ActiveTab = tab;
        ErrorMessage = null;
        UrlErrorMessage = null;
        promptSelected = false; // Reset when switching tabs
        urlSelected = false;
    }

    private async Task SelectPrompt(string prompt)
    {
        promptSelected = true;
        UserPrompt = prompt;
        await GenerateAndSaveQuizFromPrompt();
    }

    private async Task HandlePromptKeyDown(KeyboardEventArgs e)
    {
        // Ctrl+Enter triggers quiz generation
        if (e.CtrlKey && e.Key == "Enter" && CanGenerateAndSave)
        {
            await GenerateAndSaveQuizFromPrompt();
        }
    }

    private async Task GenerateAndSaveQuizFromPrompt()
    {
        if (string.IsNullOrWhiteSpace(UserPrompt))
        {
            ErrorMessage = "Please enter a valid prompt.";
            return;
        }

        IsGenerating = true;
        IsSaving = true;
        ErrorMessage = null;
        await InvokeAsync(StateHasChanged);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value
                   ?? user.FindFirst("sub")?.Value;

        try
        {
            Logger.LogInformation("Sending prompt to PerplexityService: {UserPrompt}", UserPrompt);
            var (quiz, error) = await PerplexityService.GenerateQuizFromPromptAsync(UserPrompt, userId);
            if (quiz == null)
            {
                Logger.LogError("PerplexityService returned no quiz. Error: {Error}", error);
                ErrorMessage = error ?? "Failed to generate quiz from prompt. Please try again.";
                return;
            }
            var userQuizId = await UserQuizRepository.AddAsyncGetId(quiz);
            Logger.LogInformation("Quiz successfully saved to the UserQuiz table. QuizId: {QuizId}", userQuizId);
            NavigationManager.NavigateTo($"/TakeAQuiz/{userQuizId}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception during quiz save.");
            ErrorMessage = "An error occurred while generating or saving the quiz. Please try again later.";
        }
        finally
        {
            IsGenerating = false;
            IsSaving = false;
            if (!promptSelected)
            {
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task GenerateAndSaveQuizFromUrl()
    {
        UrlErrorMessage = null;
        if (string.IsNullOrWhiteSpace(QuizUrl))
        {
            UrlErrorMessage = "Please enter a valid URL.";
            return;
        }
        IsUrlGenerating = true;
        await InvokeAsync(StateHasChanged);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value
                   ?? user.FindFirst("sub")?.Value;

        try
        {
            var (quiz, error) = await PerplexityService.GenerateQuizFromUrlAsync(QuizUrl, userId);
            if (quiz == null)
            {
                UrlErrorMessage = error ?? "Failed to generate quiz from URL.";
                return;
            }
            quiz.Url = QuizUrl; // Set the Url property on the quiz model
            var userQuizId = await UserQuizRepository.AddAsyncGetId(quiz);
            NavigationManager.NavigateTo($"/TakeAQuiz/{userQuizId}");
        }
        catch (Exception ex)
        {
            UrlErrorMessage = "An error occurred while generating or saving the quiz. Please try again later.";
            Logger.LogError(ex, "Exception during quiz save from URL.");
        }
        finally
        {
            IsUrlGenerating = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadUrlsAsync()
    {
        IsLoadingUrls = true;
        await InvokeAsync(StateHasChanged);

        if (UrlCache.HasUrls())
        {
            SuggestedUrls = UrlCache.GetUrls();
        }
        else
        {
            var (urls, error) = await PerplexityService.GenerateSuggestedUrlsAsync();
            if (urls != null)
            {
                SuggestedUrls = urls;
                UrlCache.SetUrls(urls);
            }
            else
            {
                Logger.LogError("Failed to load suggested URLs: {Error}", error);
            }
        }

        IsLoadingUrls = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task RefreshUrlsAsync()
    {
        IsLoadingUrls = true;
        await InvokeAsync(StateHasChanged);
        var (urls, error) = await PerplexityService.GenerateSuggestedUrlsAsync();
        if (urls != null)
        {
            SuggestedUrls = urls;
            UrlCache.SetUrls(urls);
        }
        else
        {
            Logger.LogError("Failed to load suggested URLs: {Error}", error);
        }
        IsLoadingUrls = false;
        await InvokeAsync(StateHasChanged);
    }

    private void ToggleUrlSuggestionsDialog()
    {
        isUrlSuggestionsDialogVisible = !isUrlSuggestionsDialogVisible;
    }

    private async Task SelectUrlFromDialog(string url)
    {
        ToggleUrlSuggestionsDialog();
        await Task.Delay(200); // Allow UI to update
        await SelectUrl(url);
    }

    private async Task SelectUrl(string url)
    {
        urlSelected = true;
        QuizUrl = url;
        await GenerateAndSaveQuizFromUrl();
    }
}