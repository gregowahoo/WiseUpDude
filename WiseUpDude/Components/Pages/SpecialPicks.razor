@page "/specialpicks"
@using WiseUpDude.Model
@using WiseUpDude.Services.Interfaces
@using WiseUpDude.Services
@inject AssignmentTypeDbService AssignmentTypeService
@inject SpecialQuizAssignmentService SpecialQuizAssignmentService
@inject IUserQuizRepository<Quiz> UserQuizRepository
@inject NavigationManager NavigationManager
@inject ILogger<SpecialPicks> Logger

@rendermode InteractiveServer

<PageTitle>Special Picks</PageTitle>

<div class="specialpicks-container">
    <div class="specialpicks-hero">
        <h1 class="specialpicks-title">
            <i class="bi bi-lightbulb-fill me-2"></i>Special Picks
        </h1>
        <p class="specialpicks-subtitle">Curated quizzes for every category. Try something new today!</p>
    </div>

    @if (assignmentTypes == null)
    {
        <div class="specialpicks-loading">
            <div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>
        </div>
    }
    else if (!assignmentTypes.Any())
    {
        <div class="specialpicks-empty">
            <div class="alert alert-warning text-center">No special categories found.</div>
        </div>
    }
    else
    {
        <div class="specialpicks-tabs-container">
            <div class="specialpicks-tabs" style="--tab-count: @assignmentTypes.Count">
                @for (int i = 0; i < assignmentTypes.Count; i++)
                {
                    int tabIndex = i;
                    <button class="specialpicks-tab-btn @(selectedTab == i ? "active" : "")" 
                            @onclick="async () => await SelectTabAsync(tabIndex)">
                        <i class="bi bi-stars me-1"></i> @assignmentTypes[i].Name
                    </button>
                }
                <div class="specialpicks-tab-indicator" style="left: @(selectedTab * (100.0 / assignmentTypes.Count))%"></div>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="specialpicks-loading">
                <div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>
            </div>
        }
        else if (featuredQuizzesForTab == null || !featuredQuizzesForTab.Any())
        {
            <div class="specialpicks-content">
                <div class="specialpicks-empty-state">
                    <i class="bi bi-stars text-muted mb-2"></i>
                    <p class="text-muted mb-0">No special quizzes for this category.</p>
                </div>
            </div>
        }
        else
        {
            <div class="specialpicks-content">
                <div class="specialpicks-quizzes-scroll">
                    @foreach (var featured in featuredQuizzesForTab)
                    {
                        var quiz = featured.Quiz;
                        var type = featured.AssignmentType;
                        <div class="featured-quiz-card">
                            <div class="featured-quiz-badge">
                                @type.Name
                            </div>
                            <div class="featured-quiz-content">
                                <div class="featured-quiz-difficulty">@quiz.Difficulty</div>
                                <h6 class="featured-quiz-title" title="@quiz.Name">@quiz.Name</h6>
                                @if (!string.IsNullOrWhiteSpace(quiz.Description))
                                {
                                    <p class="featured-quiz-description" title="@quiz.Description">@quiz.Description</p>
                                }
                                <button class="featured-quiz-btn" @onclick="() => TakeQuiz(quiz.Id)">
                                    <i class="bi bi-play-fill"></i> Take
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>

@code {
    private List<AssignmentType>? assignmentTypes;
    private int selectedTab = 0;
    private List<FeaturedQuizDisplay>? featuredQuizzesForTab;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing SpecialPicks page");
        try
        {
            assignmentTypes = await AssignmentTypeService.GetAllAsync();
            Logger.LogInformation("Loaded {Count} assignment types", assignmentTypes?.Count ?? 0);
            if (assignmentTypes != null && assignmentTypes.Any())
            {
                selectedTab = 0; // Ensure we start with first tab
                await LoadQuizzesForTab(0);
            }
            else
            {
                selectedTab = 0; // Reset to 0 if no assignment types
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during initialization");
            selectedTab = 0; // Reset to safe value on error
        }
    }

    private async Task LoadQuizzesForTab(int tabIndex)
    {
        if (assignmentTypes == null || tabIndex < 0 || tabIndex >= assignmentTypes.Count)
        {
            featuredQuizzesForTab = new List<FeaturedQuizDisplay>();
            return;
        }
        Logger.LogInformation("Loading quizzes for tab {TabIndex} ({TypeName})", tabIndex, assignmentTypes[tabIndex].Name);
        isLoading = true;
        StateHasChanged();
        try
        {
            var type = assignmentTypes[tabIndex];
            var now = DateTime.UtcNow;
            var assignments = await SpecialQuizAssignmentService.GetAllAsync();
            var quizzes = (await UserQuizRepository.GetAllAsync()).ToList();
            featuredQuizzesForTab = assignments
                .Where(a => a.AssignmentTypeId == type.Id && a.StartDate <= now && a.EndDate >= now)
                .Select(a => new FeaturedQuizDisplay
                {
                    Quiz = quizzes.FirstOrDefault(q => q.Id == a.UserQuizId),
                    AssignmentType = type,
                    Assignment = a
                })
                .Where(fq => fq.Quiz != null)
                .ToList();
            Logger.LogInformation("Loaded {Count} featured quizzes for tab {TabIndex}", featuredQuizzesForTab.Count, tabIndex);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading quizzes for tab {TabIndex}", tabIndex);
        }
        isLoading = false;
        StateHasChanged();
    }

    private async Task SelectTabAsync(int i)
    {
        if (assignmentTypes == null || i < 0 || i >= assignmentTypes.Count)
        {
            Logger.LogWarning("SelectTabAsync called with invalid index {TabIndex}. AssignmentTypes count: {Count}", i, assignmentTypes?.Count ?? 0);
            return;
        }
        Logger.LogInformation("Tab selected: {TabIndex} ({TypeName})", i, assignmentTypes[i].Name);
        selectedTab = i;
        await LoadQuizzesForTab(i);
    }

    private void TakeQuiz(int quizId)
    {
        Logger.LogInformation("TakeQuiz called for quizId: {QuizId}", quizId);
        NavigationManager.NavigateTo($"/TakeAQuiz/{quizId}");
    }
}
