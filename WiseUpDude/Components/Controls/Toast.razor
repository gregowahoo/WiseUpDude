@inject WiseUpDude.Shared.Services.ToastService ToastService
@implements IDisposable

@rendermode InteractiveServer

<div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1100;">
    @if (visible)
    {
        <div class="toast show @GetToastClass()" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-body">
                @message
            </div>
        </div>
    }
</div>

@code {
    private string message = "";
    private bool visible = false;
    private ToastLevel level = ToastLevel.Info;
    private CancellationTokenSource? cts;

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
    }

    private async Task ShowToast(string msg, ToastLevel toastLevel)
    {
        try
        {
            message = msg;
            level = toastLevel;
            visible = true;
            await InvokeAsync(StateHasChanged);

            cts?.Cancel();
            cts = new CancellationTokenSource();
            var token = cts.Token;

            try
            {
                await Task.Delay(3000, token);
                if (!token.IsCancellationRequested)
                {
                    visible = false;
                    await InvokeAsync(StateHasChanged);
                }
            }
            catch (TaskCanceledException)
            {
                // Ignore, another toast was shown
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"[Toast ShowToast Error] {ex}");
        }
    }

    public void Dispose()
    {
        ToastService.OnShow -= ShowToast;
        cts?.Cancel();
        cts?.Dispose();
    }

    private string GetToastClass() => level switch
    {
        ToastLevel.Success => "bg-success text-white",
        ToastLevel.Error => "bg-danger text-white",
        ToastLevel.Warning => "bg-warning text-dark",
        _ => "bg-info text-white"
    };
}