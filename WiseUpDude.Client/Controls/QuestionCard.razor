@using WiseUpDude.Model
@inject IJSRuntime JS
@inject ILogger<QuestionCard> Logger

<div class="card mb-3 shadow-sm">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center position-relative">
            <h5 class="card-title mb-0">@($"Q{QuestionIndex + 1}: {Question?.Question}")</h5>
        </div>

        <div class="mb-3"></div>

        <div class="options-center">
            @if (Question?.Options?.Count > 0)
            {
                @foreach (var option in Question.Options)
                {
                    <button type="button"
                            class="@GetOptionClass(option)"
                            @onclick="() => OnSelectAnswer(option)"
                            disabled="@(!CanEdit)">
                        @option
                    </button>
                }
            }
            else
            {
                @foreach (var tf in new[] { "True", "False" })
                {
                    <button type="button"
                            class="@GetOptionClass(tf)"
                            @onclick="() => OnSelectAnswer(tf)"
                            disabled="@(!CanEdit)">
                        @tf
                    </button>
                }
            }
        </div>

        @if (!AutoSubmit)
        {
            <div class="mt-3">
                <button class="btn btn-sm btn-primary"
                        @onclick="CheckAnswer"
                        disabled="@(!CanEdit)">
                    Check Answer
                </button>
            </div>
        }

        @if (submitted && !string.IsNullOrEmpty(userAnswer))
        {
            <div class="mt-3">
                @if (userAnswer == Question?.Answer)
                {
                    <div class="feedback-correct">✅ Correct!</div>
                }
                else
                {
                    <div class="feedback-incorrect">❌ Incorrect!</div>
                }

                <div class="mt-1"><em>Explanation:</em> @Question?.Explanation</div>
            </div>
        }
    </div>

    @if ((!string.IsNullOrWhiteSpace(Question?.ContextSnippet)) ||
        (Question?.Citation?.Any(c => !string.IsNullOrWhiteSpace(c.Url)) == true))
    {
        <div class="card-footer text-muted" style="font-size: small;">
            <div class="d-flex w-100 justify-content-between align-items-center flex-wrap">

                <!-- Citation popover triggers -->
                <div class="d-flex align-items-center flex-wrap">
                    @if (Question?.Citation != null)
                    {
                        var validCitations = Question.Citation
                        .Where(c => !string.IsNullOrWhiteSpace(c.Url))
                        .ToList();

                        foreach (var tuple in validCitations.Select((citation, idx) => (citation, idx)))
                        {
                            <span class="perplexity-pill popover-dismiss me-1"
                                  role="button"
                                  tabindex="0"
                                  @onclick="() => ToggleCitationPopover(tuple.idx)">
                                <span class="perplexity-pill-number">@(tuple.idx + 1)</span>
                            </span>
                        }
                    }
                </div>

                <!-- Context snippet popover -->
                <div class="d-flex justify-content-end flex-grow-1">
                    @if (!string.IsNullOrWhiteSpace(Question?.ContextSnippet))
                    {
                        <SmartPopover>
                            <ChildContent>
                                <i class="bi bi-info-circle" style="font-size: 1.25rem; color: #0d6efd; cursor: pointer;" title="Show more info"></i>
                            </ChildContent>
                            <PopoverContent>
                                <div class="popover-card">
                                    <div class="popover-card-body">
                                        <span style="font-size:1.1em; color:#0d6efd; margin-right:6px;">🛈</span>
                                        <em>Did you know?</em><br />
                                        <span>@Question.ContextSnippet</span>
                                    </div>
                                </div>
                            </PopoverContent>
                        </SmartPopover>
                    }
                </div>
            </div>
        </div>
    }
</div>

<!-- Citation Popover and Global Click Catcher -->
@if (openCitationPopoverIndex is int idx
    && idx >= 0
    && Question?.Citation?.Count > idx)
{
    <div class="popover-click-catcher" @onclick="HandleCitationClickAway">
        <div class="popover-citation-panel" @onclick:stopPropagation>
            <Popover IsOpen="true"
                     Title="@(Question.Citation[idx].Title ?? Question.Citation[idx].Url)"
                     Source="Citation"
                     Content="@((string.IsNullOrWhiteSpace(Question.Citation[idx].Description) ? "No summary available for this source." : Question.Citation[idx].Description))"
                     IconUrl="https://cdn.syncfusion.com/common/images/favicon/favicon-32x32.png"
                     AutoCloseMs="5000"
                     OnClose="CloseCitationPopover" />
        </div>
    </div>
}

@code {
    [Parameter] public QuizQuestion? Question { get; set; }
    [Parameter] public int QuestionIndex { get; set; }
    [Parameter] public bool AutoSubmit { get; set; }
    [Parameter] public EventCallback<(bool isCorrect, int questionIndex, string userAnswer)> OnAnswerSubmitted { get; set; }
    [Parameter] public bool MuteSound { get; set; }
    [Parameter] public bool CanEdit { get; set; } = true;

    private string userAnswer = string.Empty;
    private bool submitted = false;
    private int? openCitationPopoverIndex = null;

    protected override void OnParametersSet()
    {
        Logger.LogInformation($"Method: OnParametersSet for question {QuestionIndex}");
        try
        {
            if (!string.IsNullOrEmpty(Question?.UserAnswer) && Question.UserAnswer != userAnswer)
            {
                userAnswer = Question.UserAnswer;
                submitted = true;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OnParametersSet for question {QuestionIndex}", QuestionIndex);
        }
    }

    private void OnSelectAnswer(string answer)
    {
        if (!CanEdit) return;
        userAnswer = answer;
        submitted = false;
        if (AutoSubmit) CheckAnswerAndNotify();
    }

    private async void CheckAnswerAndNotify()
    {
        if (!CanEdit || Question == null) return;
        submitted = true;
        Question.UserAnswer = userAnswer;
        bool isCorrect = userAnswer == Question.Answer;

        if (!MuteSound)
        {
            try
            {
                var soundFile = isCorrect ? "/sounds/correct.mp3" : "/sounds/incorrect.mp3";
                await JS.InvokeVoidAsync("playSound", soundFile);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Sound playback failed.");
            }
        }

        await OnAnswerSubmitted.InvokeAsync((isCorrect, QuestionIndex, userAnswer));
    }

    private void CheckAnswer() => CheckAnswerAndNotify();

    private string GetOptionClass(string option)
    {
        if (!submitted)
            return "btn btn-outline-dark me-2 mb-2 rounded-pill" + (CanEdit ? "" : " disabled");
        if (option == Question?.Answer)
            return "btn btn-correct me-2 mb-2 rounded-pill" + (CanEdit ? "" : " disabled");
        if (option == userAnswer)
            return "btn btn-incorrect me-2 mb-2 rounded-pill" + (CanEdit ? "" : " disabled");
        return "btn btn-outline-secondary me-2 mb-2 rounded-pill" + (CanEdit ? "" : " disabled");
    }

    private void ToggleCitationPopover(int idx)
    {
        openCitationPopoverIndex = openCitationPopoverIndex == idx ? (int?)null : idx;
    }

    private void CloseCitationPopover()
    {
        openCitationPopoverIndex = null;
        StateHasChanged();
    }

    private void HandleCitationClickAway()
    {
        openCitationPopoverIndex = null;
        StateHasChanged();
    }
}
