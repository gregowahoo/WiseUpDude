@using WiseUpDude.Model
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.QuickGrid

<div class="card shadow border-0 mb-4">
    <div class="card-header bg-primary text-white d-flex align-items-center">
        <i class="bi bi-list-task me-2"></i>
        <span class="fw-bold">Learning Tracks</span>
        <button class="btn btn-success btn-sm ms-auto" @onclick="AddTrack" title="Add New Learning Track">
            <i class="bi bi-plus-circle"></i> Add
        </button>
    </div>
    <div class="card-body p-0">
        <QuickGrid TGridItem="LearningTrack" Items="@(tracks.AsQueryable())" RowSelected="@OnRowSelected" class="table table-hover table-striped mb-0">
            <PropertyColumn Property="@(track => track.Name)" Title="Name" />
            <PropertyColumn Property="@(track => track.Description)" Title="Description" />
            <TemplateColumn Title="Created">
                <ChildContent Context="track">
                    @track.CreationDate.ToString("yyyy-MM-dd")
                </ChildContent>
            </TemplateColumn>
            <TemplateColumn Title="Actions">
                <ChildContent Context="track">
                    <button class="btn btn-outline-primary btn-sm me-1" @onclick="() => EditTrack(track)"><i class="bi bi-pencil"></i></button>
                    <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteTrack(track)"><i class="bi bi-trash"></i></button>
                </ChildContent>
            </TemplateColumn>
        </QuickGrid>
    </div>
</div>

@code {
    private List<LearningTrack> tracks = new();

    [Parameter] public EventCallback<LearningTrack> OnTrackSelected { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // TODO: Load tracks from repository/service
        tracks = await LoadTracksAsync();
    }

    private async Task<List<LearningTrack>> LoadTracksAsync()
    {
        // TODO: Replace with real data access
        await Task.Delay(100); // Simulate async
        return new List<LearningTrack>();
    }

    private void OnRowSelected(LearningTrack track)
    {
        OnTrackSelected.InvokeAsync(track);
    }

    private void AddTrack()
    {
        // TODO: Show modal for adding
    }
    private void EditTrack(LearningTrack track)
    {
        // TODO: Show modal for editing
    }
    private void DeleteTrack(LearningTrack track)
    {
        // TODO: Confirm and delete
    }
}