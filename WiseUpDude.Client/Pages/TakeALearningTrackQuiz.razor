@page "/TakeALearningTrackQuiz/{QuizId:int}"
@rendermode InteractiveWebAssembly

@using WiseUpDude.Model
@using WiseUpDude.Shared.Services
@using WiseUpDude.Client.Controls

@inject ILogger<TakeALearningTrackQuiz> Logger
@inject LearningTrackQuizApiService LearningTrackQuizApiService
@inject LearningTrackQuizAttemptApiService LearningTrackQuizAttemptApiService
@inject IJSRuntime JS
@inject NavigationManager Nav

@if (OperatingSystem.IsBrowser())
{
    <div class="alert alert-success">
        <strong>WASM Mode:</strong> This page is running in WebAssembly mode.
    </div>
}
else
{
    <div class="alert alert-warning">
        <strong>Server Mode:</strong> This page is running in Blazor Server mode.
    </div>
}

<p>Running on: @(OperatingSystem.IsBrowser() ? "WASM" : "Server")</p>

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div>
            <h3 class="mb-0">
                🧠 Take Learning Track Quiz - @LearningTrackQuiz?.Name
            </h3>
            <p class="mb-0">Select an answer for each question to see if you're correct.</p>
            @if (!string.IsNullOrWhiteSpace(LearningTrackQuiz?.Description))
            {
                <p class="text-muted mb-0">@LearningTrackQuiz.Description</p>
            }
            @if (LearningTrackQuiz != null && LearningTrackQuiz.Questions != null && LearningTrackQuiz.Questions.Count > 0 && !string.IsNullOrWhiteSpace(LearningTrackQuiz.Questions[0].Difficulty))
            {
                <p class="text-muted mb-0">Quiz Difficulty: <strong>@LearningTrackQuiz.Questions[0].Difficulty</strong></p>
            }
        </div>
    </div>
    <div class="card-body">
        <!-- Score Tracker -->
        <ScoreTracker TotalQuestions="@totalQuestions" CorrectAnswers="@correctAnswers" />

        <!-- Quiz Controls -->
        <div class="d-flex align-items-center gap-4 mb-3">
            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleAutoSubmit">
                <i class="bi @(autoSubmit ? "bi-lightning-fill" : "bi-lightning") me-1"></i>
                @(autoSubmit ? "Auto-Submit On" : "Auto-Submit Off")
            </button>

            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleMute">
                <i class="bi @(muteSound ? "bi-volume-mute-fill" : "bi-volume-up-fill") me-1"></i>
                @(muteSound ? "Muted" : "Sound On")
            </button>
        </div>

        <!-- Final Message -->
        @if (showFinalMessage)
        {
            @if ((double)correctAnswers / totalAnswered >= 0.8)
            {
                <div class="alert alert-success mt-4 fs-5 text-center fw-bold">
                    🎉 You Wise'd Up! Final Score: @correctAnswers / @totalAnswered
                </div>
            }
            else
            {
                <div class="alert alert-danger mt-4 fs-5 text-center fw-bold">
                    😬 You've got work to do, wise guy. Final Score: @correctAnswers / @totalAnswered
                </div>
            }
        }

        @if (LearningTrackQuiz == null || LearningTrackQuiz.Questions == null || LearningTrackQuiz.Questions.Count == 0)
        {
            <div class="alert alert-warning">
                No quiz questions found. Please go to Home and select a quiz first.
            </div>
        }
        else
        {
            @for (int i = 0; i < LearningTrackQuiz.Questions.Count; i++)
            {
                var question = LearningTrackQuiz.Questions[i];
                bool canEdit = !answeredQuestions.Contains(i);
                <div class="mb-4">
                    <p class="text-muted">Question Difficulty: <strong>@question.Difficulty</strong></p>
                    <LearningTrackQuestionCard Question="question"
                                               QuestionIndex="i"
                                               AutoSubmit="autoSubmit"
                                               MuteSound="muteSound"
                                               CanEdit="canEdit"
                                               OnAnswerSubmitted="HandleAnswerSubmitted" />
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public int QuizId { get; set; }

    private LearningTrackQuiz? LearningTrackQuiz { get; set; }
    private int totalQuestions;
    private int correctAnswers;
    private int totalAnswered;
    private bool showFinalMessage;
    private bool autoSubmit = true;
    private bool muteSound = false;
    private HashSet<int> answeredQuestions = new HashSet<int>();
    private Dictionary<int, DateTime> questionStartTimes = new();
    private DateTime? AttemptStartTime;
    private LearningTrackQuizAttempt? CurrentAttempt;
    private int? CurrentAttemptId;
    private string? saveMessage;
    private string? saveMessageType;

    protected override async Task OnInitializedAsync()
    {
        LearningTrackQuiz = await LearningTrackQuizApiService.GetQuizByIdAsync(QuizId);
        if (LearningTrackQuiz != null && LearningTrackQuiz.Questions != null)
        {
            totalQuestions = LearningTrackQuiz.Questions.Count;
            // Do not reset totalAnswered or correctAnswers here!
            // They are managed live as the user answers questions.
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("initBootstrapTooltips");
    }

    private void ToggleAutoSubmit()
    {
        autoSubmit = !autoSubmit;
    }

    private void ToggleMute()
    {
        muteSound = !muteSound;
    }

    private async Task HandleAnswerSubmitted((bool isCorrect, int questionIndex, string userAnswer) args)
    {
        var (isCorrect, questionIndex, userAnswer) = args;
        if (LearningTrackQuiz == null || LearningTrackQuiz.Questions == null || questionIndex < 0 || questionIndex >= LearningTrackQuiz.Questions.Count)
            return;

        // Prevent double-counting: If already answered, do nothing
        if (answeredQuestions.Contains(questionIndex))
            return;

        // Track time taken for this question
        DateTime questionStart;
        if (!questionStartTimes.TryGetValue(questionIndex, out questionStart))
        {
            questionStart = AttemptStartTime ?? DateTime.UtcNow;
        }
        var timeTaken = (DateTime.UtcNow - questionStart).TotalSeconds;

        // Record answer as LearningTrackQuizAttemptQuestion
        var attemptQuestion = new LearningTrackQuizAttemptQuestion
        {
            LearningTrackAttemptId = CurrentAttemptId ?? 0,
            LearningTrackQuestionId = LearningTrackQuiz.Questions[questionIndex].Id,
            UserAnswer = userAnswer,
            IsCorrect = isCorrect,
            TimeTakenSeconds = timeTaken
        };

        if (CurrentAttempt == null)
        {
            AttemptStartTime = DateTime.UtcNow;
            var attempt = new LearningTrackQuizAttempt
            {
                LearningTrackQuizId = QuizId,
                AttemptDate = AttemptStartTime.Value,
                Score = 0,
                Duration = TimeSpan.Zero,
                AttemptQuestions = new List<LearningTrackQuizAttemptQuestion> { attemptQuestion },
                IsComplete = false
            };
            CurrentAttempt = await LearningTrackQuizAttemptApiService.CreateAsync(attempt);
            if (CurrentAttempt != null)
            {
                CurrentAttemptId = CurrentAttempt.Id;
            }
            else
            {
                saveMessage = "Failed to start quiz attempt.";
                saveMessageType = "danger";
                Logger.LogError("Failed to create LearningTrackQuizAttempt");
                return;
            }
        }
        else
        {
            CurrentAttempt.AttemptQuestions ??= new List<LearningTrackQuizAttemptQuestion>();
            CurrentAttempt.AttemptQuestions.Add(attemptQuestion);
            await LearningTrackQuizAttemptApiService.UpdateAsync(CurrentAttempt);
        }

        answeredQuestions.Add(questionIndex);
        totalAnswered++;
        if (isCorrect) correctAnswers++;

        if (totalAnswered == totalQuestions)
        {
            var duration = (AttemptStartTime.HasValue) ? (DateTime.UtcNow - AttemptStartTime.Value) : TimeSpan.Zero;
            CurrentAttempt.Score = totalQuestions > 0 ? (double)correctAnswers / totalQuestions : 0;
            CurrentAttempt.Duration = duration;
            CurrentAttempt.IsComplete = true;
            await LearningTrackQuizAttemptApiService.UpdateAsync(CurrentAttempt);
            await HandleQuizCompletionAsync();
        }
        StateHasChanged();
    }

    private async Task HandleQuizCompletionAsync()
    {
        Logger.LogInformation("HandleQuizCompletionAsync: All questions answered. Final score: {CorrectAnswers}/{TotalAnswered}", correctAnswers, totalAnswered);
        showFinalMessage = true;
        await JS.InvokeVoidAsync("scrollToTopSmooth");
        double scorePercent = totalAnswered > 0 ? (double)correctAnswers / totalAnswered : 0;

        if (scorePercent >= 0.8)
        {
            Logger.LogInformation("HandleQuizCompletionAsync: Score >= 80%, playing applause and launching confetti");
            if (!muteSound)
            {
                await JS.InvokeVoidAsync("playSound", "/sounds/applause.mp3");
            }
            await JS.InvokeVoidAsync("launchConfetti");
            saveMessage = "Great job! You've completed the quiz with a passing score.";
            saveMessageType = "success";
        }
        else
        {
            saveMessage = "Quiz completed. You might want to review the material and try again.";
            saveMessageType = "warning";
        }
    }
}