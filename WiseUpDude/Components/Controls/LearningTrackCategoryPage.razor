@using WiseUpDude.Model
@inject WiseUpDude.Data.Repositories.Interfaces.ILearningTrackCategoryRepository LearningTrackCategoryRepo
@inject WiseUpDude.Data.Repositories.Interfaces.ILearningTrackRepository LearningTrackRepo
@inject WiseUpDude.Shared.Services.ToastService ToastService

@rendermode InteractiveServer

<div class="d-flex justify-content-between align-items-center mb-3">
    <h4 class="text-secondary mb-0"><i class="bi bi-diagram-3 me-2"></i>Categories for Track: @learningTrackName</h4>
    <button class="btn btn-success btn-sm" @onclick="AddNewCategory">
        <i class="bi bi-plus-circle-fill me-1"></i> <span class="small">Add New Category</span>
    </button>
</div>

@if (categories == null)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 120px;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <strong class="ms-2">Loading categories...</strong>
    </div>
}
else if (!categories.Any())
{
    <div class="alert alert-light text-center" role="alert">
        <i class="bi bi-info-circle me-2"></i> No categories found for this track.
        <button class="btn btn-link p-0 ms-1" @onclick="AddNewCategory">Add one now!</button>
    </div>
}
else
{
    <div class="card shadow border-0 mb-4 grid-background">
        <ul class="list-group list-group-flush">
            @foreach (var category in categories)
            {
                var inputId = $"categoryRadio_{category.Id}";
                <li class="list-group-item d-flex align-items-center justify-content-between">
                    <div class="form-check flex-grow-1">
                        <input class="form-check-input me-2"
                               type="radio"
                               name="categoryRadio"
                               id="@inputId"
                               checked="@(selectedCategory?.Id == category.Id)"
                               @onchange="() => HandleCategorySelection(category, LearningTrackAction.Select)" />
                        <label class="form-check-label w-100" for="@inputId">
                            <span class="fw-semibold">@category.Name</span>
                            @if (!string.IsNullOrWhiteSpace(category.Description))
                            {
                                <span class="d-block text-muted small">@category.Description</span>
                            }
                        </label>
                    </div>
                    <div class="d-flex flex-row align-items-center ms-2" style="gap: 0.5rem;">
                        <button class="btn btn-sm btn-outline-secondary source-btn @(category.Sources != null && category.Sources.Any() ? "has-source" : "")" @onclick:stopPropagation="true" @onclick="() => OnLearningTrackCategorySelected.InvokeAsync((category, LearningTrackAction.GoToCategories))" title="Sources">
                            <i class="bi bi-link-45deg"></i>
                            @if (category.Sources != null && category.Sources.Any())
                            {
                                <span class="source-badge">@category.Sources.Count</span>
                            }
                        </button>
                        <button class="btn btn-sm btn-outline-primary" @onclick:stopPropagation="true" @onclick="() => EditCategory(category)" title="Edit Category">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" @onclick:stopPropagation="true" @onclick="() => DeleteCategory(category)" title="Delete Category">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </li>
            }
        </ul>
    </div>
}

<Modal IsVisible="@showModal" Title="@modalTitle" OnClose="CloseModal">
    <EditForm Model="@modalCategory" OnValidSubmit="SaveCategory">
        <div class="mb-3">
            <label class="form-label">Name</label>
            <InputText class="form-control" @bind-Value="modalCategory.Name" />
        </div>
        <div class="mb-3">
            <label class="form-label">Description</label>
            <InputTextArea class="form-control" @bind-Value="modalCategory.Description" />
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="CloseModal">Cancel</button>
    </EditForm>
</Modal>

@code {
    [Parameter] public int LearningTrackId { get; set; }
    [Parameter] public EventCallback<(LearningTrackCategory, LearningTrackAction)> OnLearningTrackCategorySelected { get; set; }

    private List<LearningTrackCategory>? categories;
    private LearningTrackCategory? selectedCategory;
    private bool showModal = false;
    private string modalTitle = "Add/Edit Category";
    private LearningTrackCategory modalCategory = new();
    private string? learningTrackName;
    private bool isLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (LearningTrackId != (selectedCategory?.LearningTrackId ?? 0))
            {
                selectedCategory = null;
            }
            await LoadLearningTrackName();
            await LoadCategories();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to load categories on parameter set: {ex.Message}", ToastLevel.Error);
        }
    }

    private async Task LoadLearningTrackName()
    {
        var track = await LearningTrackRepo.GetByIdAsync(LearningTrackId);
        learningTrackName = track?.Name ?? $"ID: {LearningTrackId}";
    }

    private async Task LoadCategories()
    {
        if (isLoading) return;
        isLoading = true;
        try
        {
            int? previouslySelectedCategoryId = selectedCategory?.Id;
            var allCategories = await LearningTrackCategoryRepo.GetAllAsync();
            categories = allCategories.Where(c => c.LearningTrackId == LearningTrackId).ToList();
            if (previouslySelectedCategoryId.HasValue)
            {
                selectedCategory = categories.FirstOrDefault(c => c.Id == previouslySelectedCategoryId.Value);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to load categories: {ex.Message}", ToastLevel.Error);
            categories = new List<LearningTrackCategory>();
            selectedCategory = null;
        }
        finally
        {
            isLoading = false;
        }
        StateHasChanged();
    }

    private async Task HandleCategorySelection(LearningTrackCategory category, LearningTrackAction action)
    {
        selectedCategory = category;
        await OnLearningTrackCategorySelected.InvokeAsync((category, action));
        StateHasChanged();
    }

    private void AddNewCategory()
    {
        modalTitle = "Add New Category";
        modalCategory = new LearningTrackCategory { LearningTrackId = LearningTrackId };
        showModal = true;
    }

    private void EditCategory(LearningTrackCategory category)
    {
        modalTitle = "Edit Category";
        modalCategory = new LearningTrackCategory
        {
            Id = category.Id,
            Name = category.Name,
            Description = category.Description,
            Difficulty = category.Difficulty,
            LearningTrackId = category.LearningTrackId,
            CreationDate = category.CreationDate
        };
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task SaveCategory()
    {
        try
        {
            modalCategory.LearningTrackId = LearningTrackId;
            if (modalCategory.Id == 0)
            {
                await LearningTrackCategoryRepo.AddAsync(modalCategory);
            }
            else
            {
                await LearningTrackCategoryRepo.UpdateAsync(modalCategory);
            }
            await ToastService.ShowToast("Category saved!", ToastLevel.Success);
            showModal = false;
            await LoadCategories();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to save category: {ex.Message}", ToastLevel.Error);
        }
    }

    private async Task DeleteCategory(LearningTrackCategory categoryToDelete)
    {
        try
        {
            await LearningTrackCategoryRepo.DeleteAsync(categoryToDelete.Id);
            await ToastService.ShowToast($"Category deleted: {categoryToDelete.Name}", ToastLevel.Success);
            await LoadCategories();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to delete category: {ex.Message}", ToastLevel.Error);
        }
    }
}