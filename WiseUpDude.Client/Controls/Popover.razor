@if (IsOpen)
{
    <div class="px-popover-backdrop" @onclick="CloseOnBackgroundClick">
        <div class="px-popover-root" @onclick:stopPropagation>
            <div class="px-popover-card">
                <div class="px-popover-row">
                    <img src="@IconUrl" alt="Source Icon" class="px-popover-favicon" />
                    <span class="px-popover-source">@Source</span>
                </div>
                <div class="px-popover-title">@Title</div>
                <div class="px-popover-description">@Content</div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public string IconUrl { get; set; } = "https://cdn.syncfusion.com/common/images/favicon/favicon-32x32.png";
    [Parameter] public string Source { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public string Content { get; set; }
    [Parameter] public int AutoCloseMs { get; set; } = 0;
    [Parameter] public EventCallback OnClose { get; set; }

    private CancellationTokenSource cts;

    protected override async Task OnParametersSetAsync()
    {
        cts?.Cancel();
        if (IsOpen && AutoCloseMs > 0)
        {
            cts = new();
            try
            {
                await Task.Delay(AutoCloseMs, cts.Token);
                if (!cts.Token.IsCancellationRequested)
                    await DoClose();
            }
            catch (TaskCanceledException) { }
        }
    }

    private async Task CloseOnBackgroundClick()
    {
        await DoClose();
    }

    private async Task DoClose()
    {
        cts?.Cancel();
        if (IsOpen)
        {
            IsOpen = false;
            await OnClose.InvokeAsync();
        }
    }

    public void Dispose()
    {
        cts?.Cancel();
    }
}
