@page "/TakeAQuiz/{QuizId:int}"

@* @rendermode InteractiveAuto *@
@rendermode InteractiveWebAssembly

@using WiseUpDude.Client.Controls
@using WiseUpDude.Model
@using WiseUpDude.Client.Pages
@using WiseUpDude.Shared.Services
@using System.Linq;
@using System.Collections.Generic;

@inject IConfiguration Configuration
@inject ILogger<TakeAQuiz> Logger

@inject HttpClient HttpClient
@inject ILogger<QuizApiService> QuizApiLogger

@inject QuizApiService? QuizApiService
@inject UserQuizApiService UserQuizApiService
@inject IUserQuizAttemptApiService UserQuizAttemptApiService

@inject IJSRuntime JS

@inject NavigationManager Nav

@if (OperatingSystem.IsBrowser())
{
    <div class="alert alert-success">
        <strong>WASM Mode:</strong> This page is running in WebAssembly mode.
    </div>
}
else
{
    <div class="alert alert-warning">
        <strong>Server Mode:</strong> This page is running in Blazor Server mode.
    </div>
}

<p>Running on: @(OperatingSystem.IsBrowser() ? "WASM" : "Server")</p>

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div>
            <h3 class="mb-0">
                🧠 Take Quiz -
                @(UserQuiz is null ? ""
                    : UserQuiz.Type switch
                    {
                        "Topic" => UserQuiz.Topic,
                        "Prompt" => UserQuiz.Prompt,
                        "Url" => UserQuiz.Url,
                        _ => UserQuiz.Description
                    })
            </h3>
            <p class="mb-0">Select an answer for each question to see if you're correct.</p>
            @if (!string.IsNullOrWhiteSpace(UserQuiz?.Difficulty))
            {
                <p class="text-muted mb-0">Quiz Difficulty: <strong>@UserQuiz.Difficulty</strong></p>
            }
        </div>
    </div>
    <div class="card-body">
        <!-- Score Tracker -->
        <ScoreTracker TotalQuestions="@totalQuestions" CorrectAnswers="@correctAnswers" QuestionResults="@GetQuestionResults()" />

        <!-- Final Message -->
        @if (showFinalMessage)
        {
            @if ((double)correctAnswers / totalAnswered >= 0.8)
            {
                <div class="alert alert-success mt-4 fs-5 text-center fw-bold">
                    🎉 You Wise'd Up! Final Score: @correctAnswers / @totalAnswered
                </div>
            }
            else
            {
                <div class="alert alert-danger mt-4 fs-5 text-center fw-bold">
                    😬 You've got work to do, wise guy. Final Score: @correctAnswers / @totalAnswered
                </div>
            }
        }

        <!-- Quiz Controls -->
        <div class="d-flex align-items-center gap-4 mb-3">
            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleAutoSubmit">
                <i class="bi @(autoSubmit ? "bi-lightning-fill" : "bi-lightning") me-1"></i>
                @(autoSubmit ? "Auto-Submit On" : "Auto-Submit Off")
            </button>

            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleMute">
                <i class="bi @(muteSound ? "bi-volume-mute-fill" : "bi-volume-up-fill") me-1"></i>
                @(muteSound ? "Muted" : "Sound On")
            </button>

            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleLearnMode"
                    disabled="@(hasStartedQuiz || learnMode)"
                    title="Learn Mode: When enabled, your answers are saved and you cannot change your answer. You cannot turn off Learn Mode after starting, and you cannot enable it after answering a question.">
                <i class="bi @(learnMode ? "bi-mortarboard-fill" : "bi-mortarboard") me-1"></i>
                @(learnMode ? "Learn Mode On" : "Learn Mode Off")
            </button>
        </div>

        @if (UserQuiz == null || UserQuiz.Questions.Count == 0)
        {
            <div class="alert alert-warning">
                No quiz questions found. Please go to Home and generate a quiz first.
            </div>
        }
        else
        {
            @for (int i = 0; i < UserQuiz.Questions.Count; i++)
            {
                var question = UserQuiz.Questions[i];
                bool canEdit = !learnMode || !answeredQuestions.Contains(i);
                <div class="mb-4">
                    <p class="text-muted">Question Difficulty: <strong>@question.Difficulty</strong></p>
                    <div class="question-options-center">
                        <QuestionCard Question="question"
                                      QuestionIndex="i"
                                      AutoSubmit="autoSubmit"
                                      MuteSound="muteSound"
                                      CanEdit="@canEdit"
                                      OnAnswerSubmitted="@((args) => HandleAnswerSubmitted(args))" />
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public int QuizId { get; set; }

    private Quiz? UserQuiz { get; set; }
    private int totalQuestions;
    private int correctAnswers;
    private int totalAnswered;
    private bool showFinalMessage;
    private bool autoSubmit = true;
    private bool muteSound = false;
    private bool learnMode = false;
    private bool hasStartedQuiz = false;
    private HashSet<int> answeredQuestions = new HashSet<int>();
    private Dictionary<int, DateTime> questionStartTimes = new Dictionary<int, DateTime>();
    private DateTime? AttemptStartTime;
    private UserQuizAttempt? CurrentAttempt;
    private int? CurrentAttemptId;
    private string? saveMessage;
    private string? saveMessageType;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation($"OnInitializedAsync START for QuizId={QuizId}");
        try
        {
            UserQuiz = await UserQuizApiService.GetUserQuizByIdAsync(QuizId);
            Logger.LogInformation($"UserQuiz loaded: {{UserQuiz != null}}, Questions loaded: {{UserQuiz?.Questions?.Count ?? 0}}");
            if (UserQuiz != null && UserQuiz.Questions != null)
            {
                totalQuestions = UserQuiz.Questions.Count;
                learnMode = UserQuiz.LearnMode;
                for (int i = 0; i < UserQuiz.Questions.Count; i++)
                {
                    if (!string.IsNullOrEmpty(UserQuiz.Questions[i].UserAnswer))
                    {
                        answeredQuestions.Add(i);
                        if (UserQuiz.Questions[i].UserAnswer == UserQuiz.Questions[i].Answer)
                        {
                            correctAnswers++;
                        }
                    }
                }
                totalAnswered = answeredQuestions.Count;
                Logger.LogInformation($"Quiz state: totalQuestions={totalQuestions}, totalAnswered={totalAnswered}, correctAnswers={correctAnswers}, learnMode={learnMode}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception in OnInitializedAsync");
        }
        Logger.LogInformation("OnInitializedAsync END");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation($"OnAfterRenderAsync START, firstRender={firstRender}");
        try
        {
            await JS.InvokeVoidAsync("initBootstrapTooltips");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception in OnAfterRenderAsync");
        }
        Logger.LogInformation("OnAfterRenderAsync END");
    }

    private void ToggleAutoSubmit()
    {
        Logger.LogInformation($"ToggleAutoSubmit called. autoSubmit={autoSubmit} -> {!autoSubmit}");
        autoSubmit = !autoSubmit;
    }

    private void ToggleMute()
    {
        Logger.LogInformation($"ToggleMute called. muteSound={muteSound} -> {!muteSound}");
        muteSound = !muteSound;
    }

    private async Task ToggleLearnMode()
    {
        Logger.LogInformation($"ToggleLearnMode called. Current learnMode={learnMode}");
        if (UserQuiz?.Questions != null)
        {
            answeredQuestions.Clear();
            for (int i = 0; i < UserQuiz.Questions.Count; i++)
            {
                if (!string.IsNullOrEmpty(UserQuiz.Questions[i].UserAnswer))
                {
                    answeredQuestions.Add(i);
                }
            }
        }
        if (learnMode && answeredQuestions.Count > 0)
        {
            Logger.LogInformation("LearnMode is ON and questions answered, skipping toggle.");
            return;
        }
        if (!learnMode && answeredQuestions.Count > 0)
        {
            Logger.LogInformation("LearnMode is OFF and questions answered, skipping toggle.");
            return;
        }
        learnMode = !learnMode;
        Logger.LogInformation($"LearnMode toggled to {learnMode}");
        if (UserQuiz != null)
        {
            await UserQuizApiService.UpdateLearnModeAsync(UserQuiz.Id, learnMode);
            Logger.LogInformation($"LearnMode updated in DB for QuizId={UserQuiz.Id}");
        }
    }

    private async Task HandleAnswerSubmitted((bool isCorrect, int questionIndex, string userAnswer) args)
    {
        Logger.LogInformation($"HandleAnswerSubmitted called: isCorrect={args.isCorrect}, questionIndex={args.questionIndex}, userAnswer={args.userAnswer}");
        var (isCorrect, questionIndex, userAnswer) = args;
        if (UserQuiz == null || UserQuiz.Questions == null || questionIndex < 0 || questionIndex >= UserQuiz.Questions.Count)
        {
            Logger.LogWarning("HandleAnswerSubmitted: Invalid question index or UserQuiz/Questions null");
            return;
        }
        if (answeredQuestions.Contains(questionIndex))
        {
            Logger.LogInformation($"HandleAnswerSubmitted: Question {questionIndex} already answered");
            return;
        }
        hasStartedQuiz = true;
        var userQuizQuestion = UserQuiz.Questions[questionIndex];
        userQuizQuestion.UserAnswer = userAnswer;
        await UserQuizApiService.UpdateUserQuizQuestionAnswerAsync(userQuizQuestion.Id, userAnswer);
        Logger.LogInformation($"UserQuizQuestion answer updated in DB for QuestionId={userQuizQuestion.Id}");
        if (learnMode)
        {
            answeredQuestions.Add(questionIndex);
            DateTime questionStart;
            if (!questionStartTimes.TryGetValue(questionIndex, out questionStart))
            {
                questionStart = AttemptStartTime ?? DateTime.UtcNow;
            }
            var timeTaken = (DateTime.UtcNow - questionStart).TotalSeconds;
            var attemptQuestion = new UserQuizAttemptQuestion
            {
                UserQuizAttemptId = CurrentAttemptId ?? 0,
                UserQuizQuestionId = userQuizQuestion.Id,
                UserAnswer = userAnswer,
                IsCorrect = isCorrect,
                TimeTakenSeconds = timeTaken
            };
            if (CurrentAttempt == null)
            {
                AttemptStartTime = DateTime.UtcNow;
                var attempt = new UserQuizAttempt
                {
                    UserQuizId = QuizId,
                    AttemptDate = AttemptStartTime.Value,
                    Score = 0,
                    Duration = TimeSpan.Zero,
                    AttemptQuestions = new List<UserQuizAttemptQuestion> { attemptQuestion },
                    IsComplete = false
                };
                CurrentAttempt = await UserQuizAttemptApiService.CreateAsync(attempt);
                if (CurrentAttempt != null)
                {
                    CurrentAttemptId = CurrentAttempt.Id;
                    Logger.LogInformation($"Quiz attempt created. AttemptId={CurrentAttemptId}");
                }
                else
                {
                    saveMessage = "Failed to start quiz attempt.";
                    saveMessageType = "danger";
                    Logger.LogError("Failed to create UserQuizAttempt");
                    return;
                }
            }
            else
            {
                CurrentAttempt.AttemptQuestions ??= new List<UserQuizAttemptQuestion>();
                CurrentAttempt.AttemptQuestions.Add(attemptQuestion);
                await UserQuizAttemptApiService.UpdateAsync(CurrentAttempt);
                Logger.LogInformation($"Quiz attempt updated. AttemptId={CurrentAttemptId}");
            }
        }
        else
        {
            answeredQuestions.Add(questionIndex);
        }
        totalAnswered++;
        if (isCorrect) correctAnswers++;
        Logger.LogInformation($"Quiz progress: totalAnswered={totalAnswered}, correctAnswers={correctAnswers}");
        if (totalAnswered == totalQuestions)
        {
            Logger.LogInformation("All questions answered, calling HandleQuizCompletionAsync");
            if (learnMode)
            {
                var duration = (AttemptStartTime.HasValue) ? (DateTime.UtcNow - AttemptStartTime.Value) : TimeSpan.Zero;
                CurrentAttempt.Score = totalQuestions > 0 ? (double)correctAnswers / totalQuestions : 0;
                CurrentAttempt.Duration = duration;
                CurrentAttempt.IsComplete = true;
                await UserQuizAttemptApiService.UpdateAsync(CurrentAttempt);
                Logger.LogInformation($"Quiz attempt marked complete. AttemptId={CurrentAttemptId}");
            }
            await HandleQuizCompletionAsync();
        }
        StateHasChanged();
    }

    private async Task HandleQuizCompletionAsync()
    {
        Logger.LogInformation($"HandleQuizCompletionAsync: All questions answered. Final score: {correctAnswers}/{totalAnswered}");
        showFinalMessage = true;
        await JS.InvokeVoidAsync("scrollToTopSmooth");
        double scorePercent = totalAnswered > 0 ? (double)correctAnswers / totalAnswered : 0;
        if (scorePercent >= 0.8)
        {
            Logger.LogInformation("HandleQuizCompletionAsync: Score >= 80%, playing applause and launching confetti");
            if (!muteSound)
            {
                await JS.InvokeVoidAsync("playSound", "/sounds/applause.mp3");
            }
            await JS.InvokeVoidAsync("launchConfetti");
            saveMessage = "Great job! You've completed the quiz with a passing score.";
            saveMessageType = "success";
        }
        else
        {
            Logger.LogInformation("HandleQuizCompletionAsync: Score < 80%, showing warning message");
            saveMessage = "Quiz completed. You might want to review the material and try again.";
            saveMessageType = "warning";
        }
    }

    private List<bool?> GetQuestionResults()
    {
        if (UserQuiz?.Questions == null)
            return Enumerable.Repeat<bool?>(null, totalQuestions).ToList();
        var results = new List<bool?>();
        for (int i = 0; i < totalQuestions; i++)
        {
            var q = UserQuiz.Questions[i];
            if (!string.IsNullOrEmpty(q.UserAnswer))
                results.Add(q.UserAnswer == q.Answer ? true : false);
            else
                results.Add(null);
        }
        return results;
    }
}