@page "/TakeALearningTrackQuiz/{QuizId:int}"
@rendermode InteractiveWebAssembly

@using WiseUpDude.Model
@using WiseUpDude.Shared.Services
@using WiseUpDude.Client.Controls
@using System.Linq;
@using System.Collections.Generic;

@inject ILogger<TakeALearningTrackQuiz> Logger
@inject LearningTrackQuizApiService LearningTrackQuizApiService
@inject LearningTrackQuizAttemptApiService LearningTrackQuizAttemptApiService
@inject IJSRuntime JS
@inject NavigationManager Nav

@if (OperatingSystem.IsBrowser())
{
    <div class="alert alert-success">
        <strong>WASM Mode:</strong> This page is running in WebAssembly mode.
    </div>
}
else
{
    <div class="alert alert-warning">
        <strong>Server Mode:</strong> This page is running in Blazor Server mode.
    </div>
}

<p>Running on: @(OperatingSystem.IsBrowser() ? "WASM" : "Server")</p>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        <strong>Error:</strong> @errorMessage
    </div>
}

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div>
            <h3 class="mb-0">
                🧠 Quiz - @LearningTrackQuiz?.Name
            </h3>
            @if (!string.IsNullOrWhiteSpace(LearningTrackQuiz?.Description))
            {
                <p class="text-muted mb-0"><strong>@LearningTrackQuiz.Description</strong></p>
            }
            @if (LearningTrackQuiz != null && LearningTrackQuiz.Questions != null && LearningTrackQuiz.Questions.Count > 0 && !string.IsNullOrWhiteSpace(LearningTrackQuiz.Questions[0].Difficulty))
            {
                <p class="text-muted mb-0">Quiz Difficulty: <strong>@LearningTrackQuiz.Questions[0].Difficulty</strong></p>
            }
            <p class="mb-0">Select an answer for each question to see if you're correct.</p>

        </div>
    </div>
    <div class="card-body">
        <!-- Score Tracker -->
        <ScoreTracker TotalQuestions="@totalQuestions" 
                      CorrectAnswers="@correctAnswers" 
                      QuestionResults="@GetQuestionResults()" 
                      OnQuestionNavigate="@HandleQuestionNavigate" />

        <!-- Quiz Controls -->
        <div class="d-flex align-items-center gap-4 mb-3">
            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleAutoSubmit">
                <i class="bi @(autoSubmit ? "bi-lightning-fill" : "bi-lightning") me-1"></i>
                @(autoSubmit ? "Auto-Submit On" : "Auto-Submit Off")
            </button>

            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleMute">
                <i class="bi @(muteSound ? "bi-volume-mute-fill" : "bi-volume-up-fill") me-1"></i>
                @(muteSound ? "Muted" : "Sound On")
            </button>

            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleAutoScroll">
                <i class="bi @(autoScroll ? "bi-arrow-down-circle-fill" : "bi-arrow-down-circle") me-1"></i>
                @(autoScroll ? "Auto-Scroll On" : "Auto-Scroll Off")
            </button>
        </div>

        <!-- Final Message -->
        @if (showFinalMessage)
        {
            @if ((double)correctAnswers / totalAnswered >= 0.8)
            {
                <div class="alert alert-success mt-4 fs-5 text-center fw-bold">
                    🎉 You Wise'd Up! Grade: <strong>@GetGradeLetter()</strong>
                </div>
            }
            else
            {
                <div class="alert alert-danger mt-4 fs-5 text-center fw-bold">
                    😬 You've got work to do, wise guy. Grade: <strong>@GetGradeLetter()</strong>
                </div>
            }
        }

        @if (LearningTrackQuiz == null || LearningTrackQuiz.Questions == null || LearningTrackQuiz.Questions.Count == 0)
        {
            <div class="alert alert-warning">
                No quiz questions found. Please go to Home and select a quiz first.
            </div>
        }
        else
        {
            @for (int i = 0; i < LearningTrackQuiz.Questions.Count; i++)
            {
                var question = LearningTrackQuiz.Questions[i];
                bool canEdit = !answeredQuestions.Contains(i);
                <div class="mb-4" id="question-@i">
                    <p class="text-muted">Question Difficulty: <strong>@question.Difficulty</strong></p>
                    <LearningTrackQuestionCard Question="question"
                                               QuestionIndex="i"
                                               AutoSubmit="autoSubmit"
                                               MuteSound="muteSound"
                                               CanEdit="canEdit"
                                               OnAnswerSubmitted="HandleAnswerSubmitted" />
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public int QuizId { get; set; }

    private LearningTrackQuiz? LearningTrackQuiz { get; set; }
    private int totalQuestions;
    private int correctAnswers;
    private int totalAnswered;
    private bool showFinalMessage;
    private bool autoSubmit = true;
    private bool muteSound = false;
    private bool autoScroll = true;
    private HashSet<int> answeredQuestions = new HashSet<int>();
    private Dictionary<int, DateTime> questionStartTimes = new();
    private DateTime? AttemptStartTime;
    private LearningTrackQuizAttempt? CurrentAttempt;
    private int? CurrentAttemptId;
    private string? saveMessage;
    private string? saveMessageType;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("Initializing TakeALearningTrackQuiz for QuizId={QuizId}", QuizId);
            LearningTrackQuiz = await LearningTrackQuizApiService.GetQuizByIdAsync(QuizId);
            if (LearningTrackQuiz != null && LearningTrackQuiz.Questions != null)
            {
                totalQuestions = LearningTrackQuiz.Questions.Count;
                Logger.LogInformation("Loaded quiz with {QuestionCount} questions.", totalQuestions);
            }
            else
            {
                Logger.LogWarning("Quiz or questions not found for QuizId={QuizId}", QuizId);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load quiz. Please try again later.";
            Logger.LogError(ex, "Exception in OnInitializedAsync for QuizId={QuizId}", QuizId);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await JS.InvokeVoidAsync("initBootstrapTooltips");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing Bootstrap tooltips");
        }
    }

    private void ToggleAutoSubmit()
    {
        autoSubmit = !autoSubmit;
        Logger.LogInformation("AutoSubmit toggled to {AutoSubmit}", autoSubmit);
    }

    private void ToggleMute()
    {
        muteSound = !muteSound;
        Logger.LogInformation("Mute toggled to {MuteSound}", muteSound);
    }

    private void ToggleAutoScroll()
    {
        autoScroll = !autoScroll;
        Logger.LogInformation("AutoScroll toggled to {AutoScroll}", autoScroll);
    }

    private async Task HandleAnswerSubmitted((bool isCorrect, int questionIndex, string userAnswer) args)
    {
        var (isCorrect, questionIndex, userAnswer) = args;
        try
        {
            if (LearningTrackQuiz == null || LearningTrackQuiz.Questions == null || questionIndex < 0 || questionIndex >= LearningTrackQuiz.Questions.Count)
            {
                Logger.LogWarning("Invalid question index or quiz not loaded.");
                return;
            }

            if (answeredQuestions.Contains(questionIndex))
            {
                Logger.LogInformation("Question {QuestionIndex} already answered.", questionIndex);
                return;
            }

            DateTime questionStart;
            if (!questionStartTimes.TryGetValue(questionIndex, out questionStart))
            {
                questionStart = AttemptStartTime ?? DateTime.UtcNow;
            }
            var timeTaken = (DateTime.UtcNow - questionStart).TotalSeconds;

            var attemptQuestion = new LearningTrackQuizAttemptQuestion
            {
                LearningTrackAttemptId = CurrentAttemptId ?? 0,
                LearningTrackQuestionId = LearningTrackQuiz.Questions[questionIndex].Id,
                UserAnswer = userAnswer,
                IsCorrect = isCorrect,
                TimeTakenSeconds = timeTaken
            };

            if (CurrentAttempt == null)
            {
                AttemptStartTime = DateTime.UtcNow;
                var attemptDto = new LearningTrackQuizAttemptCreateDto
                {
                    LearningTrackQuizId = QuizId,
                    AttemptDate = AttemptStartTime.Value,
                    Score = 0,
                    Duration = TimeSpan.Zero,
                    AttemptQuestions = new List<LearningTrackQuizAttemptQuestionCreateDto> {
                        new LearningTrackQuizAttemptQuestionCreateDto {
                            LearningTrackQuestionId = LearningTrackQuiz.Questions[questionIndex].Id,
                            UserAnswer = userAnswer,
                            IsCorrect = isCorrect,
                            TimeTakenSeconds = timeTaken
                        }
                    },
                    IsComplete = false
                };
                try
                {
                    var createdAttempt = await LearningTrackQuizAttemptApiService.CreateAsync(attemptDto);
                    if (createdAttempt != null)
                    {
                        CurrentAttempt = createdAttempt;
                        CurrentAttemptId = createdAttempt.Id;
                        Logger.LogInformation("Created new quiz attempt with Id={AttemptId}", createdAttempt.Id);
                    }
                    else
                    {
                        saveMessage = "Failed to start quiz attempt.";
                        saveMessageType = "danger";
                        Logger.LogError("Failed to create LearningTrackQuizAttempt");
                        return;
                    }
                }
                catch (Exception ex)
                {
                    errorMessage = "Failed to create quiz attempt. Please try again.";
                    Logger.LogError(ex, "Exception creating quiz attempt");
                    return;
                }
            }
            else
            {
                try
                {
                    CurrentAttempt.AttemptQuestions ??= new List<LearningTrackQuizAttemptQuestion>();
                    CurrentAttempt.AttemptQuestions.Add(attemptQuestion);
                    await LearningTrackQuizAttemptApiService.UpdateAsync(CurrentAttempt);
                    Logger.LogInformation("Updated quiz attempt Id={AttemptId} with new question.", CurrentAttemptId);
                }
                catch (Exception ex)
                {
                    errorMessage = "Failed to update quiz attempt. Please try again.";
                    Logger.LogError(ex, "Exception updating quiz attempt");
                    return;
                }
            }

            answeredQuestions.Add(questionIndex);
            totalAnswered++;
            if (isCorrect) correctAnswers++;

            // Auto-scroll to next question if enabled and there is a next question
            if (autoScroll && questionIndex < totalQuestions - 1)
            {
                // Add a small delay for smooth user experience (allows visual feedback before scrolling)
                _ = Task.Run(async () =>
                {
                    await Task.Delay(300);
                    await InvokeAsync(async () =>
                    {
                        var nextQuestionElementId = $"question-{questionIndex + 1}";
                        await JS.InvokeVoidAsync("scrollToElement", nextQuestionElementId);
                    });
                });
            }

            if (totalAnswered == totalQuestions)
            {
                var duration = (AttemptStartTime.HasValue) ? (DateTime.UtcNow - AttemptStartTime.Value) : TimeSpan.Zero;
                CurrentAttempt.Score = totalQuestions > 0 ? (double)correctAnswers / totalQuestions : 0;
                CurrentAttempt.Duration = duration;
                CurrentAttempt.IsComplete = true;
                try
                {
                    await LearningTrackQuizAttemptApiService.UpdateAsync(CurrentAttempt);
                    Logger.LogInformation("Final update for completed quiz attempt Id={AttemptId}", CurrentAttemptId);
                }
                catch (Exception ex)
                {
                    errorMessage = "Failed to finalize quiz attempt. Please try again.";
                    Logger.LogError(ex, "Exception finalizing quiz attempt");
                }
                await HandleQuizCompletionAsync();
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while submitting your answer. Please try again.";
            Logger.LogError(ex, "Exception in HandleAnswerSubmitted");
        }
    }

    private async Task HandleQuizCompletionAsync()
    {
        try
        {
            Logger.LogInformation("HandleQuizCompletionAsync: All questions answered. Final score: {CorrectAnswers}/{TotalAnswered}", correctAnswers, totalAnswered);
            showFinalMessage = true;
            await JS.InvokeVoidAsync("scrollToTopSmooth");
            double scorePercent = totalAnswered > 0 ? (double)correctAnswers / totalAnswered : 0;

            if (scorePercent >= 0.8)
            {
                Logger.LogInformation("HandleQuizCompletionAsync: Score >= 80%, playing applause and launching confetti");
                if (!muteSound)
                {
                    await JS.InvokeVoidAsync("playSound", "/sounds/applause.mp3");
                }
                await JS.InvokeVoidAsync("launchConfetti");
                saveMessage = "Great job! You've completed the quiz with a passing score.";
                saveMessageType = "success";
            }
            else
            {
                saveMessage = "Quiz completed. You might want to review the material and try again.";
                saveMessageType = "warning";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while completing the quiz. Please try again.";
            Logger.LogError(ex, "Exception in HandleQuizCompletionAsync");
        }
    }

    private List<bool?> GetQuestionResults()
    {
        if (LearningTrackQuiz?.Questions == null)
            return Enumerable.Repeat<bool?>(null, totalQuestions).ToList();
        var results = new List<bool?>();
        for (int i = 0; i < totalQuestions; i++)
        {
            var q = LearningTrackQuiz.Questions[i];
            var attemptQuestion = CurrentAttempt?.AttemptQuestions?.FirstOrDefault(aq => aq.LearningTrackQuestionId == q.Id);
            if (attemptQuestion != null && !string.IsNullOrEmpty(attemptQuestion.UserAnswer))
                results.Add(attemptQuestion.UserAnswer == q.Answer ? true : false);
            else
                results.Add(null);
        }
        return results;
    }

    private string GetGradeLetter()
    {
        int answered = totalAnswered;
        double percent = answered > 0 ? (double)correctAnswers / answered * 100 : 0;
        
        if (percent >= 97) return "A+";
        if (percent >= 93) return "A";
        if (percent >= 90) return "A-";
        if (percent >= 87) return "B+";
        if (percent >= 83) return "B";
        if (percent >= 80) return "B-";
        if (percent >= 77) return "C+";
        if (percent >= 73) return "C";
        if (percent >= 70) return "C-";
        if (percent >= 67) return "D+";
        if (percent >= 63) return "D";
        if (percent >= 60) return "D-";
        return "F";
    }

    private async Task HandleQuestionNavigate(int questionIndex)
    {
        Logger.LogInformation("HandleQuestionNavigate called for question index: {QuestionIndex}", questionIndex);
        var questionElementId = $"question-{questionIndex}";
        await JS.InvokeVoidAsync("scrollToElement", questionElementId);
    }
}