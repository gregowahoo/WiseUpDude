@page "/perplexity-quiz"
@using WiseUpDude.Services
@using WiseUpDude.Model
@using Microsoft.AspNetCore.Authorization

@inject IHttpClientFactory httpClientFactory
@inject ContextualQuizService contextualQuizService
@inject WiseUpDude.Services.PerplexityService perplexityService
@inject AuthenticationStateProvider AuthenticationStateProvider
        
@rendermode InteractiveServer

<h3>Perplexity Quiz Generator</h3>

<button @onclick="GenerateQuiz" disabled="@isLoading">Generate Quiz</button>

@if (isLoading)
{
    <p><em>Generating quiz...</em></p>
}

@if (quiz is not null)
{
    <h4>@quiz.Name</h4>
    <p>@quiz.Description</p>
    <ul>
        @foreach (var question in quiz.Questions)
        {
            <li>
                <strong>@question.Question</strong>
                <ul>
                    @if (question.Options is not null)
                    {
                        @foreach (var option in question.Options)
                        {
                            <li>@option</li>
                        }
                    }
                </ul>
            </li>
        }
    </ul>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}

@* @code {
    private Quiz? quiz;
    private string? errorMessage;
    private bool isLoading = false;

    private async Task GenerateQuiz()
    {
        isLoading = true;
        string explicitContext = "Summary of key points from the content or user-provided background.";
        // string quizTopic = "https://example.com/recent-ai-developments";
        string quizTopic = "Common household chores and tips for efficiency";
        // string quizTopic = "Electric cars in 2025";

        // var (generatedQuiz, error) = await contextualQuizService.GenerateQuizWithContextAsync(
        //     quizTopic,
        //     explicitContext,
        //     searchContextSize: "high"
        // );

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? user.FindFirst("sub")?.Value;

        var (generatedQuiz, error) = await perplexityService.GenerateQuizWithContextFromPromptAsync(
            quizTopic,
            userId
        );

        if (error is not null)
        {
            errorMessage = error;
        }
        else
        {
            quiz = generatedQuiz;
        }
        isLoading = false;
    }
} *@


    @code {  
        private Quiz? quiz;  
        private string? errorMessage;  
        private bool isLoading = false;  


        private async Task GenerateQuiz()  
        {  
            isLoading = true;  

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();  
            var user = authState.User;  
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? user.FindFirst("sub")?.Value;  

            // string prompt = "Common household chores and tips for efficiency";
            // (Quiz? generatedPromptQuiz, string? errorFromPrompt) = await perplexityService.GenerateQuizWithContextFromPromptAsync(prompt, userId);

            string url = "https://en.wikipedia.org/wiki/Carbon_Cycle";

            (Quiz? generatedUrlQuiz, string? errorFromUrl) = await perplexityService.GenerateQuizWithContextFromUrlAsync(url, userId);

        // if (errorFromPrompt is not null)
        //     {  
        //         errorMessage = errorFromPrompt;
        //     }  
        //     else  
        //     {  
        //         quiz = generatedPromptQuiz;
        //     }  

        if (errorFromUrl is not null)
            {  
                errorMessage = errorFromUrl;
            }  
            else  
            {  
                quiz = generatedUrlQuiz;
            }  

            isLoading = false;  
        }  
    }
}
