@page "/Account/Login"

@layout AccountLayout

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using WiseUpDude.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject WiseUpDude.Services.ITokenValidationService TokenValidationService

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-lg-6">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="Input.Email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="Input.Password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
@*                 <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div> *@
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
    <div class="col-lg-4">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    private string? errorMessage;
    private bool _tokenValidationChecked = false;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string? _returnUrl;

    [SupplyParameterFromQuery]
    private string? ReturnUrl
    {
        get
        {
            Console.WriteLine($"[GET] in Login ReturnUrl: {_returnUrl}");
            return _returnUrl;
        }
        set
        {
            Console.WriteLine($"[SET] ReturnUrl in Login: {value}");
            _returnUrl = string.Empty;
        }
    }

    private AuthenticationScheme[] externalLogins = [];

    protected override async Task OnInitializedAsync()
    {
        // Clear the existing external cookie to ensure a clean login process
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }

        // Load available external authentication schemes
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_tokenValidationChecked)
        {
            _tokenValidationChecked = true;
            
            // Check if token is validated before allowing login
            if (!await TokenValidationService.IsTokenValidatedAsync())
            {
                NavigationManager.NavigateTo("/", true);
                return;
            }
        }
    }

    public async Task LoginUser()
    {
        // Log the login attempt
        Logger.LogInformation("Login attempt for email: {Email}", Input.Email);

        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, true, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("Login succeeded for email: {Email}", Input.Email);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            Logger.LogInformation("Login requires two-factor for email: {Email}", Input.Email);
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out for email: {Email}", Input.Email);
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            // Diagnostic logging for failed login
            var user = await SignInManager.UserManager.FindByEmailAsync(Input.Email);
            if (user == null)
            {
                Logger.LogWarning("Login failed: user not found for email: {Email}", Input.Email);
            }
            else
            {
                Logger.LogInformation("Login failed for email: {Email}. EmailConfirmed: {Confirmed}, Lockout: {LockedOut}", Input.Email, user.EmailConfirmed, await SignInManager.UserManager.IsLockedOutAsync(user));
                var passwordValid = await SignInManager.UserManager.CheckPasswordAsync(user, Input.Password);
                Logger.LogInformation("Password valid for email {Email}: {Valid}", Input.Email, passwordValid);
            }
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }
}