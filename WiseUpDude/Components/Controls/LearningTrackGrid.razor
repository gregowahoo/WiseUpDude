@using WiseUpDude.Model
@using Microsoft.AspNetCore.Components.QuickGrid
@inject WiseUpDude.Data.Repositories.Interfaces.ILearningTrackRepository LearningTrackRepo
@inject WiseUpDude.Shared.Services.ToastService ToastService

@rendermode InteractiveServer

<div class="d-flex justify-content-between align-items-center mb-3">
    <h4 class="text-secondary mb-0"><i class="bi bi-list-task me-2"></i>Learning Tracks</h4>
    <button class="btn btn-success" @onclick="AddNewTrack">
        <i class="bi bi-plus-circle-fill me-1"></i> Add New Track
    </button>
</div>

@if (tracks == null)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <strong class="ms-2">Loading tracks...</strong>
    </div>
}
else if (!tracks.Any())
{
    <div class="alert alert-light text-center" role="alert">
        <i class="bi bi-info-circle me-2"></i> No learning tracks found.
        <button class="btn btn-link p-0 ms-1" @onclick="AddNewTrack">Add one now!</button>
    </div>
}
else
{
    <div class="card shadow border-0 mb-4 grid-background">
        <QuickGrid Items="@tracksQueryable"
                   TGridItem="LearningTrack"
                   ResizableColumns="true"
                   Pagination="@paginationState"
                   Class="table table-hover table-striped table-bordered"
                   RowClass="@( (LearningTrack track) => track == selectedTrack ? "custom-selected-row" : null )">

            <PropertyColumn Property="@(t => t.Name)" Sortable="true" Title="Track Name">
                <ColumnOptions>
                    <div class="custom-header">
                        <i class="bi bi-type me-1"></i> Track Name
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="@(t => t.Description)" Title="Description">
                <ColumnOptions>
                    <div class="custom-header">
                        <i class="bi bi-text-paragraph me-1"></i> Description
                    </div>
                </ColumnOptions>
            </PropertyColumn>
    @*         <PropertyColumn Property="@(t => t.CreationDate)" Format="yyyy-MM-dd" Sortable="true" Title="Created On">
                <ColumnOptions>
                    <div class="custom-header">
                        <i class="bi bi-calendar-event me-1"></i> Created On
                    </div>
                </ColumnOptions>
            </PropertyColumn> *@
            <TemplateColumn Title="Actions">
                <ColumnOptions>
                    <div class="custom-header text-center">
                        <i class="bi bi-tools me-1"></i> Actions
                    </div>
                </ColumnOptions>
                <ChildContent Context="track">
                    <div class="text-center">
                        <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => SelectTrack(track)" title="Select Track">
                            <i class="bi bi-check-circle"></i> Select
                        </button>
                        <button class="btn btn-sm btn-outline-secondary me-1" @onclick="() => EditTrack(track)" title="Edit Track">
                            <i class="bi bi-pencil-square"></i> Edit
                        </button>
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteTrack(track)" title="Delete Track">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </div>
                </ChildContent>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="@paginationState" />
    </div>
}

<Modal IsVisible="@showModal" Title="@modalTitle" OnClose="CloseModal">
    <EditForm Model="@modalTrack" OnValidSubmit="SaveTrack">
        <div class="mb-3">
            <label class="form-label">Name</label>
            <InputText class="form-control" @bind-Value="modalTrack.Name" />
        </div>
        <div class="mb-3">
            <label class="form-label">Description</label>
            <InputTextArea class="form-control" @bind-Value="modalTrack.Description" />
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="CloseModal">Cancel</button>
    </EditForm>
</Modal>

@code {
    private List<LearningTrack>? tracks;
    private IQueryable<LearningTrack>? tracksQueryable;
    private PaginationState paginationState = new PaginationState { ItemsPerPage = 10 };

    private bool showModal = false;
    private string modalTitle = "Add/Edit Track";
    private LearningTrack modalTrack = new();

    private LearningTrack? selectedTrack;

    [Parameter] public EventCallback<LearningTrack> OnLearningTrackSelected { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadTracksFromRepo();

        // await ToastService.ShowToast("In OnInitializedAsync", ToastLevel.Info);
    }

    private async Task LoadTracksFromRepo()
    {
        try
        {
            var result = await LearningTrackRepo.GetAllAsync();
            tracks = result.ToList();
            tracksQueryable = tracks.AsQueryable();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to load tracks: {ex.Message}", ToastLevel.Error);
            tracks = new List<LearningTrack>();
            tracksQueryable = tracks.AsQueryable();
        }
    }

    private async Task SelectTrack(LearningTrack track)
    {
        selectedTrack = track;
        StateHasChanged(); // Ensure UI updates
        await OnLearningTrackSelected.InvokeAsync(track);
    }

    private void AddNewTrack()
    {
        modalTitle = "Add New Track";
        modalTrack = new LearningTrack();
        showModal = true;
    }

    private void EditTrack(LearningTrack track)
    {
        modalTitle = "Edit Track";
        modalTrack = new LearningTrack
        {
            Id = track.Id,
            Name = track.Name,
            Description = track.Description,
            CreationDate = track.CreationDate
        };
        showModal = true;
    }

    private async Task SaveTrack()
    {
        if (modalTrack.Id == 0)
            await LearningTrackRepo.AddAsync(modalTrack);
        else
            await LearningTrackRepo.UpdateAsync(modalTrack);

        await ToastService.ShowToast("Track saved!", ToastLevel.Success);
        showModal = false;
        await LoadTracksFromRepo();
        StateHasChanged(); // Ensure UI updates
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task DeleteTrack(LearningTrack track)
    {
        try
        {
            await LearningTrackRepo.DeleteAsync(track.Id);
            await ToastService.ShowToast($"Track deleted: {track.Name}", ToastLevel.Success);
            await LoadTracksFromRepo();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to delete track: {ex.Message}", ToastLevel.Error);
        }
    }
}