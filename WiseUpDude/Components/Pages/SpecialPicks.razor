@page "/specialpicks"
@using WiseUpDude.Model
@using WiseUpDude.Services.Interfaces
@using WiseUpDude.Services
@inject AssignmentTypeDbService AssignmentTypeService
@inject SpecialQuizAssignmentService SpecialQuizAssignmentService
@inject IUserQuizRepository<Quiz> UserQuizRepository
@inject NavigationManager NavigationManager
@inject ILogger<SpecialPicks> Logger

@rendermode InteractiveServer

<PageTitle>Special Picks</PageTitle>

<div class="container">
    <div class="hero-header text-center mb-5">
        <h1 class="dynamic-title mb-3">
            <i class="bi bi-lightbulb-fill me-2"></i>Special Picks
        </h1>
        <p class="hero-subtitle text-muted">Curated favorites grouped by category. Pick a category to explore its quizzes.</p>
    </div>

    @if (assignmentTypes == null)
    {
        <div class="specialpicks-loading">
            <div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>
        </div>
    }
    else if (!assignmentTypes.Any())
    {
        <div class="specialpicks-empty">
            <div class="alert alert-warning text-center">No favorite categories found.</div>
        </div>
    }
    else if (selectedType == null)
    {
        @if (!assignmentTypes.Any(t => GetCount(t.Id) > 0))
        {
            <div class="specialpicks-empty">
                <div class="alert alert-info text-center">No categories currently have active quizzes.</div>
            </div>
        }
        else
        {
            <!-- Category grid -->
            <div class="type-grid">
                @foreach (var t in assignmentTypes.Where(t => GetCount(t.Id) > 0))
                {
                    var count = GetCount(t.Id);
                    var localIcon = GetCategoryIconUrl(t);
                    var fallbackThumb = GetCategoryPhotoUrl(t);
                    <button class="type-card" title="@GetTooltip(t)" @onclick="() => SelectType(t)">
                        <div class="type-thumb" title="@GetTooltip(t)">
                            <img src="@localIcon" alt="@t.Name icon" onerror="this.onerror=null; this.src='@fallbackThumb';" style="width:100%;height:100%;object-fit:cover;border-radius:10px;display:block;" />
                            <span class="type-count" title="Quizzes in this category">@count</span>
                        </div>
                        <div class="type-card-body">
                            <h5 class="type-title text-truncate" title="@t.Name">@t.Name</h5>
                        </div>
                    </button>
                }
            </div>
        }
    }
    else
    {
        <!-- Selected category header -->
        <div class="selected-type-bar">
            <button class="back-btn" @onclick="ClearSelection"><i class="bi bi-arrow-left"></i> All Categories</button>
            <div class="selected-type-meta">
                <h3 class="mb-0">@selectedType.Name</h3>
                <span class="count-pill">@GetCount(selectedType.Id) quizzes</span>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="specialpicks-loading">
                <div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>
            </div>
        }
        else if (featuredQuizzesForType == null || !featuredQuizzesForType.Any())
        {
            <div class="specialpicks-content">
                <div class="specialpicks-empty-state">
                    <i class="bi bi-stars text-muted mb-2"></i>
                    <p class="text-muted mb-0">No quizzes in this category right now.</p>
                </div>
            </div>
        }
        else
        {
            <div class="specialpicks-content">
                <div class="specialpicks-grid">
                    @foreach (var featured in GetDisplayedQuizzes())
                    {
                        var quiz = featured.Quiz;
                        var type = featured.AssignmentType;
                        <div class="featured-quiz-card">
                            <div class="featured-quiz-badge">@type.Name</div>
                            <div class="featured-quiz-content">
                                @if (!string.IsNullOrWhiteSpace(quiz.Difficulty))
                                {
                                    <div class="featured-quiz-difficulty">@quiz.Difficulty</div>
                                }
                                <h6 class="featured-quiz-title" title="@quiz.Name">@quiz.Name</h6>
                                @if (!string.IsNullOrWhiteSpace(quiz.Description))
                                {
                                    <p class="featured-quiz-description" title="@quiz.Description">@quiz.Description</p>
                                }
                                <button class="featured-quiz-btn" @onclick="() => TakeQuiz(quiz.Id)">
                                    <i class="bi bi-play-fill"></i> Take
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>

@code {
    private List<AssignmentType>? assignmentTypes;
    private AssignmentType? selectedType;
    private List<FeaturedQuizDisplay>? featuredQuizzesForType;
    private bool isLoading = false;

    // Per-type counts
    private Dictionary<int, int> typeCounts = new();

    // Curated keywords per category for better image accuracy
    private static readonly Dictionary<string, string> CategoryImageKeywords = new(StringComparer.OrdinalIgnoreCase)
    {
        ["Featured"] = "spotlight, star, highlight",
        ["Seniors Need To Know"] = "senior adults, wellness, active lifestyle",
        ["Fun Facts"] = "trivia, lightbulb, playful",
        ["Wow"] = "awe, amazing, stunning nature",
        ["Brain Boosters"] = "brain, puzzle, logic, memory",
        ["History Mysteries"] = "history, archives, artifacts",
        ["Tech Trends"] = "technology, gadgets, ai",
        ["Pop Culture Picks"] = "pop culture, movies, music, celebrities",
        ["Travel Treasures"] = "travel, landmarks, world",
        ["Health Wellness"] = "health, wellness, fitness",
        ["Financial Smarts"] = "finance, investing, money",
        ["Science Wonders"] = "science, space, laboratory",
        ["Literary Legends"] = "books, library, literature",
        ["Everyday Hacks"] = "life hacks, tips, tools",
        ["Local Legends"] = "local, community, landmarks"
    };

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing SpecialPicks page");
        try
        {
            assignmentTypes = await AssignmentTypeService.GetAllAsync();
            await ComputeTypeCountsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during initialization");
        }
    }

    private async Task ComputeTypeCountsAsync()
    {
        try
        {
            var now = DateTime.UtcNow;
            var assignments = await SpecialQuizAssignmentService.GetAllAsync();
            typeCounts = assignments
                .Where(a => a.StartDate <= now && a.EndDate >= now)
                .GroupBy(a => a.AssignmentTypeId)
                .ToDictionary(g => g.Key, g => g.Count());
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed computing type counts");
            typeCounts = new();
        }
    }

    private int GetCount(int typeId) => typeCounts.TryGetValue(typeId, out var c) ? c : 0;

    private static string Slug(string s)
    {
        s ??= string.Empty;
        s = s.Trim().ToLowerInvariant();
        return System.Text.RegularExpressions.Regex.Replace(s, @"[^a-z0-9]+", "-").Trim('-');
    }

    private string GetCategoryIconUrl(AssignmentType t)
    {
        var name = t?.Name ?? string.Empty;
        var slug = Slug(name);
        // Local icon generated by admin tool
        return $"/images/categories/{slug}.png";
    }

    private string GetCategoryPhotoUrl(AssignmentType t)
    {
        // Prefer curated keyword queries for Unsplash Source (no API key, but subject to Unsplash terms)
        var key = t?.Name ?? string.Empty;
        if (!string.IsNullOrWhiteSpace(key) && CategoryImageKeywords.TryGetValue(key, out var query))
        {
            var q = System.Net.WebUtility.UrlEncode(query);
            return $"https://source.unsplash.com/600x360/?{q}";
        }

        // Fallback to name-based query
        if (!string.IsNullOrWhiteSpace(t?.Name))
        {
            var q = System.Net.WebUtility.UrlEncode(t!.Name + ", learning");
            return $"https://source.unsplash.com/600x360/?{q}";
        }

        // Final fallback: deterministic placeholder without keys
        var seed = Uri.EscapeDataString((t?.Name ?? "favorites") + "-wud");
        return $"https://picsum.photos/seed/{seed}/600/360";
    }

    private string GetTooltip(AssignmentType t)
        => string.IsNullOrWhiteSpace(t?.Description) ? t?.Name ?? string.Empty : t!.Description;

    private void ClearSelection()
    {
        selectedType = null;
        featuredQuizzesForType = null;
    }

    private async Task SelectType(AssignmentType t)
    {
        selectedType = t;
        await LoadQuizzesForType(t.Id);
    }

    private async Task LoadQuizzesForType(int typeId)
    {
        isLoading = true;
        StateHasChanged();
        try
        {
            var now = DateTime.UtcNow;
            var assignments = await SpecialQuizAssignmentService.GetAllAsync();
            var quizzes = (await UserQuizRepository.GetAllAsync()).ToList();

            var type = assignmentTypes?.FirstOrDefault(x => x.Id == typeId);
            featuredQuizzesForType = assignments
                .Where(a => a.AssignmentTypeId == typeId && a.StartDate <= now && a.EndDate >= now)
                .Select(a => new FeaturedQuizDisplay
                {
                    Quiz = quizzes.FirstOrDefault(q => q.Id == a.UserQuizId),
                    AssignmentType = type!,
                    Assignment = a
                })
                .Where(fq => fq.Quiz != null)
                .ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading quizzes for type {TypeId}", typeId);
            featuredQuizzesForType = new List<FeaturedQuizDisplay>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private IEnumerable<FeaturedQuizDisplay> GetDisplayedQuizzes()
        => featuredQuizzesForType ?? Enumerable.Empty<FeaturedQuizDisplay>();

    private void TakeQuiz(int quizId)
    {
        Logger.LogInformation("TakeQuiz called for quizId: {QuizId}", quizId);
        NavigationManager.NavigateTo($"/TakeAQuiz/{quizId}");
    }
}
