@page "/learningtracks"

@using WiseUpDude.Model
@using WiseUpDude.Data.Repositories.Interfaces

@inject ILearningTrackRepository LearningTrackRepository
@inject NavigationManager NavigationManager

@inject ILearningTrackRepository LearningTrackRepo
@inject ILearningTrackCategoryRepository CategoryRepo
@inject ILearningTrackSourceRepository SourceRepo

@rendermode InteractiveServer

<h3>Learning Tracks Management</h3>

<div class="row">
    <div class="col-4">
        @foreach (var track in LearningTracksList)
        {
            <div class="card mb-2">
                <div class="card-body">
                    <h5 class="card-title">@track.Name</h5>
                    <button class="btn btn-sm btn-link" @onclick="() => EditItem(track)">Edit</button>
                    <button class="btn btn-sm btn-link text-danger" @onclick="() => DeleteTrack(track.Id)">Delete</button>
                    <button class="btn btn-sm btn-link" @onclick="() => AddCategory(track.Id)">Add Category</button>
                    <ul class="mt-2">
                        @foreach (var category in track.Categories)
                        {
                            <li>
                                <strong>@category.Name</strong>
                                <button class="btn btn-sm btn-link" @onclick="() => EditItem(category)">Edit</button>
                                <button class="btn btn-sm btn-link text-danger" @onclick="() => DeleteCategory(category.Id)">Delete</button>
                                <button class="btn btn-sm btn-link" @onclick="() => AddSource(category.Id)">Add Source</button>
                                <ul>
                                    @foreach (var source in category.Sources)
                                    {
                                        <li>
                                            @source.Name
                                            <button class="btn btn-sm btn-link" @onclick="() => EditItem(source)">Edit</button>
                                            <button class="btn btn-sm btn-link text-danger" @onclick="() => DeleteSource(source.Id)">Delete</button>
                                        </li>
                                    }
                                </ul>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }
        <button class="btn btn-primary" @onclick="AddTrack">Add Learning Track</button>
    </div>
</div>

@if (showDialog)
{
    <PopupDialog Model="selectedItem" OnSave="HandleSave" OnCancel="HandleCancel" />
}

@code {
    private List<LearningTrack> LearningTracksList = new();
    private object selectedItem;
    private bool showDialog = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        LearningTracksList = (await LearningTrackRepo.GetAllAsync()).ToList();
    }

    void AddTrack() => OpenDialog(new LearningTrack());

    void AddCategory(int trackId)
    {
        OpenDialog(new LearningTrackCategory { LearningTrackId = trackId });
    }

    void AddSource(int categoryId)
    {
        OpenDialog(new LearningTrackSource { LearningTrackCategoryId = categoryId });
    }

    void EditItem(object item) => OpenDialog(item);

    void OpenDialog(object item)
    {
        selectedItem = item;
        showDialog = true;
    }

    async Task HandleSave()
    {
        switch (selectedItem)
        {
            case LearningTrack track:
                if (track.Id == 0) await LearningTrackRepo.AddAsync(track);
                else await LearningTrackRepo.UpdateAsync(track);
                break;
            case LearningTrackCategory category:
                if (category.Id == 0) await CategoryRepo.AddAsync(category);
                else await CategoryRepo.UpdateAsync(category);
                break;
            case LearningTrackSource source:
                if (source.Id == 0) await SourceRepo.AddAsync(source);
                else await SourceRepo.UpdateAsync(source);
                break;
        }
        await LoadData();
        showDialog = false;
    }

    void HandleCancel() => showDialog = false;

    async void DeleteTrack(int id)
    {
        await LearningTrackRepo.DeleteAsync(id);
        await LoadData();
    }

    async void DeleteCategory(int id)
    {
        await CategoryRepo.DeleteAsync(id);
        await LoadData();
    }

    async void DeleteSource(int id)
    {
        await SourceRepo.DeleteAsync(id);
        await LoadData();
    }
}
