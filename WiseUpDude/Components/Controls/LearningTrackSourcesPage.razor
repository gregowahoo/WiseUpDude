@using WiseUpDude.Model
@using Microsoft.AspNetCore.Components.Forms
@inject WiseUpDude.Data.Repositories.Interfaces.ILearningTrackSourceRepository SourceRepo
@inject WiseUpDude.Data.Repositories.Interfaces.ILearningTrackCategoryRepository CategoryRepo
@inject WiseUpDude.Shared.Services.ToastService ToastService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<div class="d-flex justify-content-between align-items-center mb-3">
    <h4 class="text-secondary mb-0"><i class="bi bi-link-45deg me-2"></i>Sources for Category: @categoryName</h4>
    <button class="btn btn-success btn-sm" @onclick="ShowAddModal">
        <i class="bi bi-plus-circle-fill me-1"></i> <span class="small">Add New Source</span>
    </button>
</div>

@if (sources == null && !initialLoadAttempted)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 150px;">
        <div class="spinner-border text-info" role="status"><span class="visually-hidden">Loading...</span></div>
        <strong class="ms-2">Loading sources...</strong>
    </div>
}
else if (sources == null || !sources.Any())
{
    <div class="alert alert-light text-center" role="alert">
        <i class="bi bi-info-circle me-2"></i> No sources found for this category.
        <button class="btn btn-link p-0 ms-1" @onclick="ShowAddModal">Add one now!</button>
    </div>
}
else
{
    <div class="card shadow border-0 mb-4 grid-background">
        <ul class="list-group list-group-flush">
            @foreach (var source in sources)
            {
                var inputId = $"sourceRadio_{source.Id}";
                <li class="list-group-item d-flex align-items-center justify-content-between">
                    <div class="form-check flex-grow-1">
                        <input class="form-check-input me-2"
                               type="radio"
                               name="sourceRadio"
                               id="@inputId"
                               checked="@(selectedSource?.Id == source.Id)"
                               @onchange="() => HandleSourceSelection(source, LearningTrackAction.Select)" />
                        <label class="form-check-label w-100" for="@inputId">
                            <span class="fw-semibold">@source.Name</span>
                            @if (!string.IsNullOrWhiteSpace(source.SourceType))
                            {
                                <span class="d-block text-muted small">Type: @source.SourceType</span>
                            }
                            @if (!string.IsNullOrWhiteSpace(source.Url))
                            {
                                <span class="d-block text-muted small">
                                    <i class="bi bi-link me-1"></i>
                                    <a href="@source.Url" target="_blank" class="@(source.Id == selectedSource?.Id ? "text-white" : "text-primary")" @onclick:stopPropagation="true">
                                        @TruncateUrl(source.Url)
                                    </a>
                                </span>
                            }
                            @if (!string.IsNullOrWhiteSpace(source.Description))
                            {
                                <span class="d-block text-muted small">@source.Description</span>
                            }
                        </label>
                    </div>
                    <div class="d-flex flex-row align-items-center ms-2" style="gap: 0.5rem;">
                        <button class="btn btn-sm btn-outline-secondary" @onclick:stopPropagation="true" @onclick="() => OnLearningTrackSourceSelected.InvokeAsync((source, LearningTrackAction.GoToCategories))" title="Quizzes">
                            <i class="bi bi-patch-question"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-primary" @onclick:stopPropagation="true" @onclick="() => ShowEditModal(source)" title="Edit Source">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" @onclick:stopPropagation="true" @onclick="() => DeleteSource(source)" title="Delete Source">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </li>
            }
        </ul>
    </div>
}

<Modal IsVisible="@showModal" Title="@modalTitle" OnClose="CloseModal">
    <EditForm Model="@modalSource" OnValidSubmit="SaveSource">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label class="form-label">Name</label>
            <InputText class="form-control" @bind-Value="modalSource.Name" />
            <ValidationMessage For="@(() => modalSource.Name)" />
        </div>
        <div class="mb-3">
            <label class="form-label">Type</label>
            <InputText class="form-control" @bind-Value="modalSource.SourceType" />
            <ValidationMessage For="@(() => modalSource.SourceType)" />
        </div>
        <div class="mb-3">
            <label class="form-label">URL</label>
            <InputText type="url" class="form-control" @bind-Value="modalSource.Url" />
            <ValidationMessage For="@(() => modalSource.Url)" />
        </div>
        <div class="mb-3">
            <label class="form-label">Description</label>
            <InputTextArea class="form-control" @bind-Value="modalSource.Description" />
            <ValidationMessage For="@(() => modalSource.Description)" />
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="CloseModal">Cancel</button>
    </EditForm>
</Modal>

@code {
    [Parameter] public int LearningTrackCategoryId { get; set; }
    [Parameter] public EventCallback<(LearningTrackSource, LearningTrackAction)> OnLearningTrackSourceSelected { get; set; }

    private List<LearningTrackSource>? sources;
    private LearningTrackSource? selectedSource;
    private bool isLoading = false;
    private bool showModal = false;
    private string modalTitle = "Add/Edit Source";
    private LearningTrackSource modalSource = new();
    private bool isEdit = false;
    private bool initialLoadAttempted = false;
    private string? categoryName;

    protected override async Task OnParametersSetAsync()
    {
        if (LearningTrackCategoryId != (selectedSource?.LearningTrackCategoryId ?? 0))
        {
            selectedSource = null;
        }
        await LoadCategoryName();
        await LoadSourcesFromRepo();
    }

    private async Task LoadCategoryName()
    {
        var category = await CategoryRepo.GetByIdAsync(LearningTrackCategoryId);
        categoryName = category?.Name ?? $"ID: {LearningTrackCategoryId}";
    }

    private async Task LoadSourcesFromRepo()
    {
        if (isLoading) return;
        isLoading = true;
        initialLoadAttempted = true;
        int? previouslySelectedSourceId = selectedSource?.Id;
        sources = null;

        try
        {
            var allSources = await SourceRepo.GetAllAsync();
            sources = allSources.Where(s => s.LearningTrackCategoryId == LearningTrackCategoryId).ToList();

            if (previouslySelectedSourceId.HasValue)
            {
                selectedSource = sources.FirstOrDefault(s => s.Id == previouslySelectedSourceId.Value);
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to load sources: {ex.Message}", ToastLevel.Error);
            sources = new List<LearningTrackSource>();
            selectedSource = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleSourceSelection(LearningTrackSource source, LearningTrackAction action)
    {
        selectedSource = source;
        await OnLearningTrackSourceSelected.InvokeAsync((source, action));
        StateHasChanged();
    }

    private void ShowAddModal()
    {
        modalTitle = "Add New Source";
        modalSource = new LearningTrackSource { LearningTrackCategoryId = LearningTrackCategoryId };
        isEdit = false;
        showModal = true;
    }

    private void ShowEditModal(LearningTrackSource source)
    {
        modalTitle = "Edit Source";
        modalSource = new LearningTrackSource
        {
            Id = source.Id,
            Name = source.Name,
            SourceType = source.SourceType,
            Url = source.Url,
            Description = source.Description,
            LearningTrackCategoryId = source.LearningTrackCategoryId,
            CreationDate = source.CreationDate
        };
        isEdit = true;
        showModal = true;
    }

    private async Task SaveSource()
    {
        try
        {
            modalSource.LearningTrackCategoryId = LearningTrackCategoryId;

            if (isEdit)
            {
                await SourceRepo.UpdateAsync(modalSource);
                await ToastService.ShowToast("Source updated!", ToastLevel.Success);
            }
            else
            {
                await SourceRepo.AddAsync(modalSource);
                await ToastService.ShowToast("Source added!", ToastLevel.Success);
            }
            showModal = false;
            await LoadSourcesFromRepo();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to save source: {ex.Message}", ToastLevel.Error);
        }
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task DeleteSource(LearningTrackSource sourceToDelete)
    {
        try
        {
            await SourceRepo.DeleteAsync(sourceToDelete.Id);
            await ToastService.ShowToast($"Source deleted: {sourceToDelete.Name}", ToastLevel.Success);
            await LoadSourcesFromRepo();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to delete source: {ex.Message}", ToastLevel.Error);
        }
    }

    private string TruncateUrl(string url, int maxLength = 50)
    {
        if (string.IsNullOrEmpty(url)) return string.Empty;
        return url.Length <= maxLength ? url : url.Substring(0, maxLength - 3) + "...";
    }

    private void NavToQuizzes(int sourceId)
    {
        NavigationManager.NavigateTo($"/learningtrack/source/{sourceId}/quizzes");
    }
}