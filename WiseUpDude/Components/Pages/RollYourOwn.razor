@page "/rollyourown"

@using Microsoft.AspNetCore.Authorization
@using WiseUpDude.Services
@using WiseUpDude.Services.Interfaces
@using WiseUpDude.Model
@using WiseUpDude.Data.Repositories

@inject QuizRepository QuizRepository
@inject UserQuizRepository UserQuizRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IQuizFromPromptService QuizGenerationService
@inject WiseUpDude.Services.PerplexityService PerplexityService
@inject ILogger<RollYourOwn> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITenorGifService TenorGifService
@inject IPromptSuggestionCacheService PromptCache
@inject IUrlSuggestionCacheService UrlCache

@rendermode InteractiveServer
@attribute [Authorize]
@attribute [StreamRendering(true)]

@if (IsGenerating || IsSaving)
{
    <PleaseWaitDialog IsVisible="IsGenerating || IsSaving"
                      LoadingTextMessage="@($"Preparing your \"{UserPrompt}\" quiz...")" />
}
@if (IsUrlGenerating)
{
    <PleaseWaitDialog IsVisible="IsUrlGenerating"
                      LoadingTextMessage="@($"Preparing your quiz from the URL: \"{QuizUrl}\"...")" />
}

<div class="container mt-5">
    <div class="text-center mb-4">
        <h2 class="fw-bold">🎲 Roll Your Own!</h2>
        <p class="text-muted">Choose how you want to generate your quiz.</p>
    </div>

    <div class="d-flex justify-content-center mb-4">
        <ul class="nav nav-pills bg-light rounded-pill px-2 py-1" id="quizTab" role="tablist" style="box-shadow: 0 2px 8px rgba(0,0,0,0.03);">
            <li class="nav-item" role="presentation">
                <button class="nav-link px-4 @(ActiveTab == 0 ? "active" : "")" id="prompt-tab" type="button" role="tab" @onclick="() => SetTab(0)">
                    <span class="fw-semibold">Custom Prompt</span>
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link px-4 @(ActiveTab == 1 ? "active" : "")" id="url-tab" type="button" role="tab" @onclick="() => SetTab(1)">
                    <span class="fw-semibold">From URL</span>
                </button>
            </li>
        </ul>
    </div>

    <div class="tab-content">
        <!-- PROMPT TAB -->
        <div class="tab-pane fade @(ActiveTab == 0 ? "show active" : "")" id="prompt" role="tabpanel">
            <div class="row justify-content-center">
                <div class="col-md-8">
                    <div class="mb-3 d-flex align-items-center">
                        <label class="me-2 mb-0 fw-semibold" for="promptDropdown">Example Prompts:</label>
                        <select id="promptDropdown" class="form-select w-auto" @onchange="OnPromptDropdownChanged" disabled="@IsLoadingPrompts">
                            <option value="">Choose an example...</option>
                            @if (SuggestedPrompts != null)
                            {
                                @foreach (var prompt in SuggestedPrompts)
                                {
                                    <option value="@prompt">@prompt</option>
                                }
                            }
                        </select>
                        <button class="btn btn-outline-secondary btn-sm ms-2" @onclick="RefreshPromptsAsync" disabled="@IsLoadingPrompts">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                    </div>
                    <div class="card shadow-sm border-0 mb-4">
                        <div class="card-body p-4">
                            <label for="promptInput" class="form-label fw-semibold">What would you like to learn about?</label>
                            <InputTextArea id="promptInput" @bind-Value="UserPrompt" class="form-control form-control-lg mb-3"
                                           placeholder="e.g. The history of space exploration, quantum physics basics, cooking techniques..."
                                           Rows="4"
                                           @onkeydown="HandlePromptKeyDown">
                            </InputTextArea>
                            <div class="text-center">
                                <button class="btn btn-success btn-lg px-5"
                                        @onclick="GenerateAndSaveQuizFromPrompt"
                                        disabled="@(IsGenerating || IsSaving || string.IsNullOrWhiteSpace(UserPrompt))">
                                    🚀 Generate & Save Quiz
                                </button>
                            </div>
                            @if (!string.IsNullOrEmpty(ErrorMessage))
                            {
                                <div class="alert alert-danger mt-3" role="alert">
                                    @ErrorMessage
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- URL TAB -->
        <div class="tab-pane fade @(ActiveTab == 1 ? "show active" : "")" id="url" role="tabpanel">
            <div class="row justify-content-center">
                <div class="col-md-8">
                    <div class="mb-3 d-flex align-items-center">
                        <label class="me-2 mb-0 fw-semibold" for="urlDropdown">Example URLs:</label>
                        <select id="urlDropdown" class="form-select w-auto" @onchange="OnUrlDropdownChanged" disabled="@IsLoadingUrls">
                            <option value="">Choose an example...</option>
                            @if (SuggestedUrls != null)
                            {
                                @foreach (var url in SuggestedUrls)
                                {
                                    <option value="@url">@url</option>
                                }
                            }
                        </select>
                        <button class="btn btn-outline-secondary btn-sm ms-2" @onclick="RefreshUrlsAsync" disabled="@IsLoadingUrls">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                    </div>
                    <div class="card shadow-sm border-0 mb-4">
                        <div class="card-body p-4">
                            <div class="alert alert-warning" role="alert">
                                <small><strong>Note:</strong> Quiz data may be slightly out of date, especially for fast-changing topics like sports or news.</small>
                            </div>
                            <label for="urlInput" class="form-label fw-semibold">Enter the URL of an article or webpage:</label>
                            <InputText id="urlInput" @bind-Value="QuizUrl" class="form-control form-control-lg mb-3"
                                       placeholder="e.g. https://en.wikipedia.org/wiki/Space_exploration" />
                            <div class="text-center">
                                <button class="btn btn-primary btn-lg px-5"
                                        @onclick="GenerateAndSaveQuizFromUrl"
                                        disabled="@(IsUrlGenerating || string.IsNullOrWhiteSpace(QuizUrl))">
                                    🔗 Generate & Save Quiz
                                </button>
                            </div>
                            @if (!string.IsNullOrEmpty(UrlErrorMessage))
                            {
                                <div class="alert alert-danger mt-3" role="alert">
                                    @UrlErrorMessage
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private int ActiveTab { get; set; } = 0;
    private string? UserPrompt { get; set; }
    private string? QuizUrl { get; set; }
    private bool IsGenerating = false;
    private bool IsSaving = false;
    private string? ErrorMessage;
    private string? UrlErrorMessage;
    private bool IsUrlGenerating = false;
    private List<string> SuggestedPrompts = new();
    private bool IsLoadingPrompts = false;
    private bool promptSelected = false;
    private List<string> SuggestedUrls = new();
    private bool IsLoadingUrls = false;
    private bool urlSelected = false;

    protected override void OnInitialized()
    {
        _ = LoadPromptsAsync();
        _ = LoadUrlsAsync();
    }

    private async Task LoadPromptsAsync()
    {
        IsLoadingPrompts = true;
        await InvokeAsync(StateHasChanged);

        var cachedPrompts = PromptCache.GetPrompts();
        if (PromptCache.HasPrompts() && cachedPrompts != null)
        {
            SuggestedPrompts = new List<string>(cachedPrompts);
        }
        else
        {
            var (prompts, error) = await PerplexityService.GenerateSuggestedPromptsAsync();
            if (prompts != null)
            {
                SuggestedPrompts = prompts.ToList();
                PromptCache.SetPrompts(prompts);
            }
            else
            {
                Logger.LogError("Failed to load suggested prompts: {Error}", error);
            }
        }

        IsLoadingPrompts = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task RefreshPromptsAsync()
    {
        IsLoadingPrompts = true;
        await InvokeAsync(StateHasChanged);
        var (prompts, error) = await PerplexityService.GenerateSuggestedPromptsAsync();
        if (prompts != null)
        {
            SuggestedPrompts = prompts.ToList();
            PromptCache.SetPrompts(prompts);
        }
        else
        {
            Logger.LogError("Failed to load suggested prompts: {Error}", error);
        }
        IsLoadingPrompts = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadUrlsAsync()
    {
        IsLoadingUrls = true;
        await InvokeAsync(StateHasChanged);

        var cachedUrls = UrlCache.GetUrls();
        if (UrlCache.HasUrls() && cachedUrls != null)
        {
            SuggestedUrls = new List<string>(cachedUrls);
        }
        else
        {
            var (urls, error) = await PerplexityService.GenerateSuggestedUrlsAsync();
            if (urls != null)
            {
                SuggestedUrls = urls.ToList();
                UrlCache.SetUrls(urls);
            }
            else
            {
                Logger.LogError("Failed to load suggested URLs: {Error}", error);
            }
        }

        IsLoadingUrls = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task RefreshUrlsAsync()
    {
        IsLoadingUrls = true;
        await InvokeAsync(StateHasChanged);
        var (urls, error) = await PerplexityService.GenerateSuggestedUrlsAsync();
        if (urls != null)
        {
            SuggestedUrls = urls.ToList();
            UrlCache.SetUrls(urls);
        }
        else
        {
            Logger.LogError("Failed to load suggested URLs: {Error}", error);
        }
        IsLoadingUrls = false;
        await InvokeAsync(StateHasChanged);
    }

    private void SetTab(int tab)
    {
        ActiveTab = tab;
        ErrorMessage = null;
        UrlErrorMessage = null;
        promptSelected = false;
        urlSelected = false;
    }

    private async Task HandlePromptKeyDown(KeyboardEventArgs e)
    {
        if (e.CtrlKey && e.Key == "Enter" && !IsGenerating && !IsSaving && !string.IsNullOrWhiteSpace(UserPrompt))
        {
            await GenerateAndSaveQuizFromPrompt();
        }
    }

    private async Task GenerateAndSaveQuizFromPrompt()
    {
        if (string.IsNullOrWhiteSpace(UserPrompt))
        {
            ErrorMessage = "Please enter a valid prompt.";
            return;
        }

        IsGenerating = true;
        IsSaving = true;
        ErrorMessage = null;
        await InvokeAsync(StateHasChanged);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value
                   ?? user.FindFirst("sub")?.Value;

        try
        {
            Logger.LogInformation("Sending prompt to PerplexityService: {UserPrompt}", UserPrompt);
            var (quiz, error) = await PerplexityService.GenerateQuizFromPromptAsync(UserPrompt, userId);
            if (quiz == null)
            {
                Logger.LogError("PerplexityService returned no quiz. Error: {Error}", error);
                ErrorMessage = error ?? "Failed to generate quiz from prompt. Please try again.";
                return;
            }
            var userQuizId = await UserQuizRepository.AddAsyncGetId(quiz);
            Logger.LogInformation("Quiz successfully saved to the UserQuiz table. QuizId: {QuizId}", userQuizId);
            NavigationManager.NavigateTo($"/TakeAQuiz/{userQuizId}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception during quiz save.");
            ErrorMessage = "An error occurred while generating or saving the quiz. Please try again later.";
        }
        finally
        {
            IsGenerating = false;
            IsSaving = false;
            if (!promptSelected)
            {
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task GenerateAndSaveQuizFromUrl()
    {
        UrlErrorMessage = null;
        if (string.IsNullOrWhiteSpace(QuizUrl))
        {
            UrlErrorMessage = "Please enter a valid URL.";
            return;
        }
        IsUrlGenerating = true;
        await InvokeAsync(StateHasChanged);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value
                   ?? user.FindFirst("sub")?.Value;

        try
        {
            var (quiz, error) = await PerplexityService.GenerateQuizFromUrlAsync(QuizUrl, userId);
            if (quiz == null)
            {
                UrlErrorMessage = error ?? "Failed to generate quiz from URL.";
                return;
            }
            quiz.Url = QuizUrl;
            var userQuizId = await UserQuizRepository.AddAsyncGetId(quiz);
            NavigationManager.NavigateTo($"/TakeAQuiz/{userQuizId}");
        }
        catch (Exception ex)
        {
            UrlErrorMessage = "An error occurred while generating or saving the quiz. Please try again later.";
            Logger.LogError(ex, "Exception during quiz save from URL.");
        }
        finally
        {
            IsUrlGenerating = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnPromptDropdownChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (!string.IsNullOrWhiteSpace(value))
        {
            UserPrompt = value;
        }
    }

    private void OnUrlDropdownChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (!string.IsNullOrWhiteSpace(value))
        {
            QuizUrl = value;
        }
    }
}