@page "/admin/users/add"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using WiseUpDude.Data
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

<PageTitle>Add User</PageTitle>

<h2>Add New User</h2>

<EditForm Model="newUser" OnValidSubmit="CreateUser">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label>Email</label>
        <InputText @bind-Value="newUser.Email" class="form-control" />
    </div>
    <div class="mb-3">
        <label>Password</label>
        <InputText @bind-Value="newUser.Password" type="password" class="form-control" />
    </div>
    <div class="mb-3">
        <label>Assign Roles</label>
        <div>
            @foreach (var role in roleModels)
            {
                <div class="form-check">
                    <InputCheckbox class="form-check-input" @bind-Value="role.IsSelected" />
                    <label class="form-check-label">@role.Name</label>
                </div>
            }
        </div>
    </div>
    <button class="btn btn-success" type="submit">Create User</button>
    <button class="btn btn-secondary ms-2" type="button" @onclick="GoBack">Cancel</button>
</EditForm>

@if (identityErrors != null && identityErrors.Any())
{
    <div class="alert alert-danger mt-3">
        <ul>
            @foreach (var error in identityErrors)
            {
                <li>@error.Description</li>
            }
        </ul>
    </div>
}
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-3">@message</div>
}

@code {
    private NewUserModel newUser = new();
    private string? message;
    private List<string> roles = new() { "Admin", "FreeSubscriber", "PaidSubscriber", "EnterpriseSubscriber" };
    private List<RoleModel> roleModels = new();
    private IEnumerable<IdentityError>? identityErrors;

    protected override void OnInitialized()
    {
        roleModels = roles.Select(r => new RoleModel { Name = r, IsSelected = false }).ToList();
    }

    private async Task CreateUser()
    {
        var user = new ApplicationUser { UserName = newUser.Email, Email = newUser.Email };
        var result = await UserManager.CreateAsync(user, newUser.Password);
        if (result.Succeeded)
        {
            var selectedRoles = roleModels.Where(r => r.IsSelected).Select(r => r.Name).ToList();
            if (selectedRoles.Any())
                await UserManager.AddToRolesAsync(user, selectedRoles);
            message = "User created successfully.";
            identityErrors = null;
            NavigationManager.NavigateTo("/admin/users");
        }
        else
        {
            identityErrors = result.Errors;
            message = null;
        }
    }

    private void GoBack() => NavigationManager.NavigateTo("/admin/users");

    public class NewUserModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;
        [Required]
        [MinLength(6)]
        public string Password { get; set; } = string.Empty;
    }

    private class RoleModel
    {
        public string Name { get; set; } = string.Empty;
        public bool IsSelected { get; set; }
    }
}
