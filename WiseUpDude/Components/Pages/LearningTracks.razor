@page "/learningtracks"

@using WiseUpDude.Model
@using WiseUpDude.Data.Repositories.Interfaces

@inject ILearningTrackRepository LearningTrackRepository
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>Learning Tracks</PageTitle>

<h2>Learning Tracks</h2>

<a class="btn btn-primary mb-3" href="/learningtracks/add">
    <i class="bi bi-plus-circle"></i> Add New Learning Track
</a>

@if (learningTracks == null)
{
    <p>Loading...</p>
}
else if (!learningTracks.Any())
{
    <div class="alert alert-info">No learning tracks found. Create your first one!</div>
}
else
{
    <ul class="list-group mb-4">
        @foreach (var track in learningTracks)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <strong>@track.Name</strong>
                    <span class="text-muted ms-2">@track.Description</span>
                </div>
                <span>
                    <button class="btn btn-sm btn-primary me-2" @onclick="() => EditTrack(track.Id)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(track.Id, track.Name)">Delete</button>
                </span>
                <span class="badge bg-secondary ms-2">@track.CreationDate.ToShortDateString()</span>
            </li>
        }
    </ul>
}

@if (showDeleteConfirm)
{
    <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.3)">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete <strong>@deleteTrackName</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button class="btn btn-danger" @onclick="DeleteTrackConfirmed">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-2">@message</div>
}

@code {
    private List<LearningTrack>? learningTracks;
    private string? message;

    // For delete confirmation
    private bool showDeleteConfirm = false;
    private int deleteTrackId;
    private string? deleteTrackName;

    protected override async Task OnInitializedAsync()
    {
        await LoadTracks();
    }

    private async Task LoadTracks()
    {
        var tracks = await LearningTrackRepository.GetAllAsync();
        learningTracks = tracks.ToList();
    }

    private void EditTrack(int id)
    {
        NavigationManager.NavigateTo($"/learningtracks/edit/{id}");
    }

    private void ConfirmDelete(int id, string name)
    {
        deleteTrackId = id;
        deleteTrackName = name;
        showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
        deleteTrackId = 0;
        deleteTrackName = null;
    }

    private async Task DeleteTrackConfirmed()
    {
        await LearningTrackRepository.DeleteAsync(deleteTrackId);
        message = $"Learning Track '{deleteTrackName}' deleted.";
        showDeleteConfirm = false;
        await LoadTracks();
    }
}