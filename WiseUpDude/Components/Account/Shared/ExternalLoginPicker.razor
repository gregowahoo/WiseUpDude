@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using WiseUpDude.Data
@using WiseUpDude.Components.Account.Controls

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length == 0)
{
        <div>
            <p>
                There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">article
                about setting up this ASP.NET application to support logging in via external services</a>.
            </p>
        </div>
}
else
{
    <div>
        <p>
        @foreach (var provider in externalLogins)
        {
            if (provider.Name.Equals("Google", StringComparison.OrdinalIgnoreCase))
            {
                <ExternalLoginButton ReturnUrl="@ReturnUrl" Provider="@provider.Name" LogoUrl="https://developers.google.com/identity/images/g-logo.png" />
            }
            else if (provider.Name.Equals("Facebook", StringComparison.OrdinalIgnoreCase))
            {
                <ExternalLoginButton ReturnUrl="@ReturnUrl" Provider="@provider.Name" LogoUrl="https://upload.wikimedia.org/wikipedia/commons/5/51/Facebook_f_logo_%282019%29.svg" />
            }
            else
            {
                <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
            }
        }
        </p>
    </div>
}

@code {
    private AuthenticationScheme[] externalLogins = [];

    private string? _returnUrl = String.Empty;

    [SupplyParameterFromQuery]
    private string? ReturnUrl
    {
        get
        {
            Console.WriteLine($"[GET] ReturnUrl in ExternalLoginPicker: {_returnUrl}");
            return _returnUrl;
        }
        set
        {
            Console.WriteLine($"[SET] ReturnUrl in ExternalLoginPicker: {value}");
            _returnUrl = string.Empty;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}
