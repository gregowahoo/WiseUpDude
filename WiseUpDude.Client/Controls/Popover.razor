@implements IDisposable

@if (IsOpen)
{
    <div class="px-popover-wrapper" @onclick="HandleClickAway">
        <div class="px-popover-panel" @onclick:stopPropagation>
            <div class="px-popover-row">
                <img src="@IconUrl" alt="Favicon" class="px-popover-favicon" />
                <span class="px-popover-source">@Source</span>
            </div>
            <div class="px-popover-title">@Title</div>
            <div class="px-popover-description">@Content</div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }

    [Parameter] public string IconUrl { get; set; } = "https://cdn.syncfusion.com/common/images/favicon/favicon-32x32.png";

    [Parameter] public string Source { get; set; } = "Default Source";

    [Parameter] public string Title { get; set; } = "Default Title";

    [Parameter] public string Content { get; set; } = "Default content.";

    [Parameter] public int AutoCloseMs { get; set; } = 0;

    [Parameter] public EventCallback OnClose { get; set; }

    private CancellationTokenSource? autoCloseToken;

    protected override async Task OnParametersSetAsync()
    {
        autoCloseToken?.Cancel();

        if (IsOpen && AutoCloseMs > 0)
        {
            autoCloseToken = new CancellationTokenSource();

            try
            {
                await Task.Delay(AutoCloseMs, autoCloseToken.Token);

                if (!autoCloseToken.Token.IsCancellationRequested)
                {
                    await ClosePopover();
                }
            }
            catch (TaskCanceledException)
            {
                // Expected on cancel
            }
        }
    }

    private async Task HandleClickAway()
    {
        await ClosePopover();
    }

    private async Task ClosePopover()
    {
        autoCloseToken?.Cancel();

        if (IsOpen)
        {
            IsOpen = false;
            await OnClose.InvokeAsync();
        }
    }

    public void Dispose()
    {
        autoCloseToken?.Cancel();
    }
}
