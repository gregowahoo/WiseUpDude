@using WiseUpDude.Model
@using Microsoft.AspNetCore.Components.Authorization
@inject WiseUpDude.Data.Repositories.Interfaces.ILearningTrackRepository LearningTrackRepo
@inject WiseUpDude.Shared.Services.ToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<div class="d-flex justify-content-between align-items-center mb-3">
    <h4 class="text-secondary mb-0"><i class="bi bi-list-task me-2"></i>Learning Tracks</h4>
    <button class="btn btn-success" @onclick="AddNewTrack">
        <i class="bi bi-plus-circle-fill me-1"></i> Add New Track
    </button>
</div>

@if (tracks == null)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <strong class="ms-2">Loading tracks...</strong>
    </div>
}
else if (!tracks.Any())
{
    <div class="alert alert-light text-center" role="alert">
        <i class="bi bi-info-circle me-2"></i> No learning tracks found.
        <button class="btn btn-link p-0 ms-1" style="font-size: 0.85em; padding: 0.1rem 0.4rem;" @onclick="AddNewTrack">Add one now!</button>
    </div>
}
else
{
    <div class="card shadow border-0 mb-4 grid-background">
        <ul class="list-group list-group-flush">
            @foreach (var track in tracks)
            {
                var inputId = $"trackRadio_{track.Id}";
                <li class="list-group-item d-flex align-items-center justify-content-between">
                    <div class="form-check flex-grow-1">
                        <input class="form-check-input me-2" type="radio" name="trackRadio" id="@inputId" checked="@(selectedTrack?.Id == track.Id)" @onchange="() => SelectTrack(track)" />
                        <label class="form-check-label w-100" for="@inputId">
                            <span class="fw-semibold">@track.Name</span>
                            @if (!string.IsNullOrWhiteSpace(track.Description))
                            {
                                <span class="d-block text-muted small">@track.Description</span>
                            }
                        </label>
                    </div>
                    <div class="d-flex flex-row align-items-center ms-2" style="gap: 0.5rem;">
                        <button class="btn btn-sm btn-outline-secondary" @onclick:stopPropagation="true" @onclick="() => OnLearningTrackSelected.InvokeAsync(track)" title="Categories">
                            <i class="bi bi-diagram-3"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-primary" @onclick:stopPropagation="true" @onclick="() => EditTrack(track)" title="Edit Track">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" @onclick:stopPropagation="true" @onclick="() => DeleteTrack(track)" title="Delete Track">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </li>
            }
        </ul>
    </div>
}

<Modal IsVisible="@showModal" Title="@modalTitle" OnClose="CloseModal">
    <EditForm Model="@modalTrack" OnValidSubmit="SaveTrack">
        <div class="mb-3">
            <label class="form-label">Name</label>
            <InputText class="form-control" @bind-Value="modalTrack.Name" />
        </div>
        <div class="mb-3">
            <label class="form-label">Description</label>
            <InputTextArea class="form-control" @bind-Value="modalTrack.Description" />
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="CloseModal">Cancel</button>
    </EditForm>
</Modal>

@code {
    private List<LearningTrack>? tracks;
    private bool showModal = false;
    private string modalTitle = "Add/Edit Track";
    private LearningTrack modalTrack = new();
    private LearningTrack? selectedTrack;
    [Parameter] public EventCallback<LearningTrack> OnLearningTrackSelected { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadTracksFromRepo();
    }

    private async Task LoadTracksFromRepo()
    {
        try
        {
            var result = await LearningTrackRepo.GetAllAsync();
            tracks = result.ToList();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to load tracks: {ex.Message}", ToastLevel.Error);
            tracks = new List<LearningTrack>();
        }
    }

    private async Task SelectTrack(LearningTrack track)
    {
        selectedTrack = track;
        StateHasChanged();
        await OnLearningTrackSelected.InvokeAsync(track);
    }

    private async void AddNewTrack()
    {
        modalTitle = "Add New Track";
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        modalTrack = new LearningTrack();
        if (!string.IsNullOrEmpty(userId))
        {
            modalTrack.UserId = userId;
        }
        showModal = true;
    }

    private void EditTrack(LearningTrack track)
    {
        modalTitle = "Edit Track";
        modalTrack = new LearningTrack
        {
            Id = track.Id,
            Name = track.Name,
            Description = track.Description,
            CreationDate = track.CreationDate,
            UserId = track.UserId
        };
        showModal = true;
    }

    private async Task SaveTrack()
    {
        if (modalTrack.Id == 0 && string.IsNullOrEmpty(modalTrack.UserId))
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                modalTrack.UserId = userId;
            }
        }
        if (modalTrack.Id == 0)
            await LearningTrackRepo.AddAsync(modalTrack);
        else
            await LearningTrackRepo.UpdateAsync(modalTrack);
        await ToastService.ShowToast("Track saved!", ToastLevel.Success);
        showModal = false;
        await LoadTracksFromRepo();
        StateHasChanged();
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task DeleteTrack(LearningTrack track)
    {
        try
        {
            await LearningTrackRepo.DeleteAsync(track.Id);
            await ToastService.ShowToast($"Track deleted: {track.Name}", ToastLevel.Success);
            if (selectedTrack == track)
            {
                selectedTrack = null;
                await OnLearningTrackSelected.InvokeAsync(null);
            }
            await LoadTracksFromRepo();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to delete track: {ex.Message}", ToastLevel.Error);
        }
    }

    private void NavToCategories(int trackId)
    {
        NavigationManager.NavigateTo($"/learningtrack/{trackId}/categories");
    }
}