@using WiseUpDude.Model
@inject IJSRuntime JS
@inject ILogger<QuestionCard> Logger

<div class="card mb-3 shadow-sm">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center position-relative">
            <h5 class="card-title mb-0">@($"Q{QuestionIndex + 1}: {Question?.Question}")</h5>
        </div>

        <div class="mb-3"></div>

        <div class="options-center">
            @if (Question?.Options?.Count > 0)
            {
                @foreach (var option in Question.Options)
                {
                    <button type="button"
                            class="@GetOptionClass(option)"
                            @onclick="() => OnSelectAnswer(option)"
                            disabled="@(!CanEdit)">
                        @option
                    </button>
                }
            }
            else
            {
                @foreach (var tf in new[] { "True", "False" })
                {
                    <button type="button"
                            class="@GetOptionClass(tf)"
                            @onclick="() => OnSelectAnswer(tf)"
                            disabled="@(!CanEdit)">
                        @tf
                    </button>
                }
            }
        </div>

        @if (!AutoSubmit)
        {
            <div class="mt-3">
                <button class="btn btn-sm btn-primary"
                        @onclick="CheckAnswer"
                        disabled="@(!CanEdit)">
                    Check Answer
                </button>
            </div>
        }

        @if (submitted && !string.IsNullOrEmpty(userAnswer))
        {
            <div class="mt-3">
                @if (userAnswer == Question?.Answer)
                {
                    <div class="feedback-correct">✅ Correct!</div>
                }
                else
                {
                    <div class="feedback-incorrect">❌ Incorrect!</div>
                }

                <div class="mt-1"><em>Explanation:</em> @Question?.Explanation</div>
            </div>
        }
    </div>

    @if ((!string.IsNullOrWhiteSpace(Question?.ContextSnippet)) ||
        (Question?.Citation?.Any(c => !string.IsNullOrWhiteSpace(c.Url)) == true))
    {
        <div class="card-footer text-muted" style="font-size: small;">
            <div class="d-flex w-100 justify-content-between align-items-center flex-wrap">

                <!-- Citation popover triggers -->
                <div class="d-flex align-items-center flex-wrap">
                    @if (Question?.Citation != null)
                    {
                        var validCitations = Question.Citation
                        .Where(c => !string.IsNullOrWhiteSpace(c.Url))
                        .ToList();

                        foreach (var tuple in validCitations.Select((citation, idx) => (citation, idx)))
                        {
                            <a tabindex="0" role="button" href="javascript:void(0)"
                               class="perplexity-pill popover-dismiss me-1"
                               data-bs-toggle="popover"
                               data-bs-trigger="click"
                               data-bs-placement="right"
                               data-bs-html="true"
                               data-bs-title=" "
                               data-bs-content="@GetCitationPopoverContent(tuple.citation)">
                                <span class="perplexity-pill-number">@(tuple.idx + 1)</span>
                            </a>
                        }
                    }
                </div>

                <!-- Context snippet popover -->
                <div class="d-flex justify-content-end flex-grow-1">
                    @if (!string.IsNullOrWhiteSpace(Question?.ContextSnippet))
                    {
                        <i class="bi bi-info-circle" 
                           style="font-size: 1.25rem; color: #0d6efd; cursor: pointer;"
                           data-bs-toggle="popover"
                           data-bs-trigger="hover focus"
                           data-bs-placement="left"
                           data-bs-html="true"
                           data-bs-title="Did you know?"
                           data-bs-content="@GetContextPopoverContent(Question.ContextSnippet)"
                           title="Show more info"></i>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public QuizQuestion? Question { get; set; }
    [Parameter] public int QuestionIndex { get; set; }
    [Parameter] public bool AutoSubmit { get; set; }
    [Parameter] public EventCallback<(bool isCorrect, int questionIndex, string userAnswer)> OnAnswerSubmitted { get; set; }
    [Parameter] public bool MuteSound { get; set; }
    [Parameter] public bool CanEdit { get; set; } = true;

    private string userAnswer = string.Empty;
    private bool submitted = false;

    private string GetCitationPopoverContent(CitationMeta citation)
    {
        var title = citation.Title ?? citation.Url;
        var description = string.IsNullOrWhiteSpace(citation.Description) ? "No summary available for this source." : citation.Description;
        var url = citation.Url;
        
        return $@"
            <div class='card' style='min-width: 250px; max-width: 320px; border: none; box-shadow: 0 4px 16px rgba(0, 0, 0, 0.10), 0 1.5px 4px rgba(0, 0, 0, 0.08);'>
                <div class='card-header' style='font-weight: 500; font-size: 1.1em; border: none;'>
                    {title}
                </div>
                <div class='card-body' style='font-size: 1em; border: none;'>
                    {description}
                </div>
                <div class='card-footer text-center bg-white' style='border: none;'>
                    <a href='{url}' target='_blank' rel='noopener' class='btn btn-outline-secondary btn-sm'>Visit Source</a>
                </div>
            </div>";
    }


    private string GetContextPopoverContent(string contextSnippet)
    {
        return $@"
            <div style='min-width:220px'>
                <span style='font-size:1.1em; color:#0d6efd; margin-right:6px;'>🛈</span>
                <span>{contextSnippet}</span>
            </div>";
    }

    protected override void OnParametersSet()
    {
        Logger.LogInformation($"Method: OnParametersSet for question {QuestionIndex}");
        try
        {
            if (!string.IsNullOrEmpty(Question?.UserAnswer) && Question.UserAnswer != userAnswer)
            {
                userAnswer = Question.UserAnswer;
                submitted = true;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OnParametersSet for question {QuestionIndex}", QuestionIndex);
        }
    }

    private void OnSelectAnswer(string answer)
    {
        if (!CanEdit) return;
        userAnswer = answer;
        submitted = false;
        if (AutoSubmit) CheckAnswerAndNotify();
    }

    private async void CheckAnswerAndNotify()
    {
        if (!CanEdit || Question == null) return;
        submitted = true;
        Question.UserAnswer = userAnswer;
        bool isCorrect = userAnswer == Question.Answer;

        if (!MuteSound)
        {
            try
            {
                var soundFile = isCorrect ? "/sounds/correct.mp3" : "/sounds/incorrect.mp3";
                await JS.InvokeVoidAsync("playSound", soundFile);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Sound playback failed.");
            }
        }

        await OnAnswerSubmitted.InvokeAsync((isCorrect, QuestionIndex, userAnswer));
    }

    private void CheckAnswer() => CheckAnswerAndNotify();

    private string GetOptionClass(string option)
    {
        if (!submitted)
            return "btn btn-outline-dark me-2 mb-2 rounded-pill" + (CanEdit ? "" : " disabled");
        if (option == Question?.Answer)
            return "btn btn-correct me-2 mb-2 rounded-pill" + (CanEdit ? "" : " disabled");
        if (option == userAnswer)
            return "btn btn-incorrect me-2 mb-2 rounded-pill" + (CanEdit ? "" : " disabled");
        return "btn btn-outline-secondary me-2 mb-2 rounded-pill" + (CanEdit ? "" : " disabled");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize Bootstrap popovers for this component
            await JS.InvokeVoidAsync("initializePopovers");
        }
    }
}
