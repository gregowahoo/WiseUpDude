@page "/TakeAQuiz/{QuizId:int}"
@rendermode InteractiveWebAssembly

@using WiseUpDude.Client.Controls
@using WiseUpDude.Model
@using WiseUpDude.Client.Pages
@using WiseUpDude.Shared.Services

@inject IConfiguration Configuration
@inject ILogger<TakeAQuiz> Logger

@inject HttpClient HttpClient
@inject ILogger<QuizApiService> QuizApiLogger

@inject QuizApiService? QuizApiService
@inject UserQuizApiService UserQuizApiService
@inject IUserQuizAttemptApiService UserQuizAttemptApiService

@inject IJSRuntime JS

@inject NavigationManager Nav

@if (OperatingSystem.IsBrowser())
{
    <div class="alert alert-success">
        <strong>WASM Mode:</strong> This page is running in WebAssembly mode.
    </div>
}
else
{
    <div class="alert alert-warning">
        <strong>Server Mode:</strong> This page is running in Blazor Server mode.
    </div>
}

<p>Running on: @(OperatingSystem.IsBrowser() ? "WASM" : "Server")</p>

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div>
            <h3 class="mb-0">
                🧠 Take Quiz -
                @(Quiz?.Type == "Topic"
                                ? Quiz?.Topic
                                : Quiz?.Prompt)
            </h3>
            <p class="mb-0">Select an answer for each question to see if you're correct.</p>
            @if (!string.IsNullOrWhiteSpace(Quiz?.Difficulty))
            {
                <p class="text-muted mb-0">Quiz Difficulty: <strong>@Quiz.Difficulty</strong></p>
            }
        </div>
    </div>
    <div class="card-body">
        <!-- Score Tracker -->
        <ScoreTracker TotalQuestions="@totalQuestions" CorrectAnswers="@correctAnswers" />

        <!-- Final Message -->
        @if (showFinalMessage)
        {
            @if ((double)correctAnswers / totalAnswered >= 0.8)
            {
                <div class="alert alert-success mt-4 fs-5 text-center fw-bold">
                    🎉 You Wise'd Up! Final Score: @correctAnswers / @totalAnswered
                </div>
            }
            else
            {
                <div class="alert alert-danger mt-4 fs-5 text-center fw-bold">
                    😬 You've got work to do, wise guy. Final Score: @correctAnswers / @totalAnswered
                </div>
            }
        }

        <!-- Quiz Controls -->
        <div class="d-flex align-items-center gap-4 mb-3">
            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleAutoSubmit">
                <i class="bi @(autoSubmit ? "bi-lightning-fill" : "bi-lightning") me-1"></i>
                @(autoSubmit ? "Auto-Submit On" : "Auto-Submit Off")
            </button>

            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleMute">
                <i class="bi @(muteSound ? "bi-volume-mute-fill" : "bi-volume-up-fill") me-1"></i>
                @(muteSound ? "Muted" : "Sound On")
            </button>

            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleLearnMode"
                    disabled="@(hasStartedQuiz || learnMode)"
                    title="Learn Mode: When enabled, your answers are saved and you can only change your answer until you answer another question. Once you move on, previous answers are locked. You cannot turn off Learn Mode after starting, and you cannot enable it after answering a question.">
                <i class="bi @(learnMode ? "bi-mortarboard-fill" : "bi-mortarboard") me-1"></i>
                @(learnMode ? "Learn Mode On" : "Learn Mode Off")
            </button>
        </div>

        @if (Quiz == null || Quiz.Questions.Count == 0)
        {
            <div class="alert alert-warning">
                No quiz questions found. Please go to Home and generate a quiz first.
            </div>
        }
        else
        {
            @for (int i = 0; i < Quiz.Questions.Count; i++)
            {
                var question = Quiz.Questions[i];
                bool canEdit = !learnMode || (activeQuestionIndex == i || !answeredQuestions.Contains(i)) && !lockedQuestions.Contains(i);
                <div class="mb-4">
                    <p class="text-muted">Question Difficulty: <strong>@question.Difficulty</strong></p>
                    <QuestionCard Question="question"
                                  QuestionIndex="i"
                                  AutoSubmit="autoSubmit"
                                  MuteSound="muteSound"
                                  CanEdit="@canEdit"
                                  OnAnswerSubmitted="HandleAnswerSubmitted" />
                </div>
            }

            @if (!string.IsNullOrWhiteSpace(saveMessage))
            {
                <div class="alert alert-@(saveMessageType) mt-3">@saveMessage</div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public int QuizId { get; set; }

    private Quiz? Quiz;
    private UserQuizAttempt? CurrentAttempt;
    private int? CurrentAttemptId;
    private DateTime? AttemptStartTime;
    private int totalQuestions;
    private int totalAnswered;
    private int correctAnswers;
    private bool showFinalMessage = false;
    private bool autoSubmit = true;
    private bool muteSound = false;
    private bool learnMode = false;
    private bool hasStartedQuiz = false;
    private string? saveMessage;
    private string saveMessageType = "info";
    private HashSet<int> answeredQuestions = new();
    private HashSet<int> lockedQuestions = new();
    private int? activeQuestionIndex = null;
    private Dictionary<int, DateTime> questionStartTimes = new();

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync: Fetching quiz for QuizId={QuizId}", QuizId);
        try
        {
            Quiz = await UserQuizApiService.GetUserQuizByIdAsync(QuizId);
            if (Quiz?.Questions != null)
            {
                Logger.LogInformation("OnInitializedAsync: Quiz has {Count} questions.", Quiz.Questions.Count);
                totalQuestions = Quiz.Questions.Count;
                learnMode = Quiz.LearnMode;
            }
            else
            {
                Logger.LogWarning("OnInitializedAsync: Quiz or Quiz.Questions is null.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "OnInitializedAsync: Error fetching quiz: {Message}", ex.Message);
            saveMessage = $"Error loading quiz: {ex.Message}";
            saveMessageType = "danger";
        }
    }

    private void ToggleAutoSubmit()
    {
        autoSubmit = !autoSubmit;
        Logger.LogInformation("ToggleAutoSubmit: autoSubmit is now {AutoSubmit}", autoSubmit);
    }

    private void ToggleMute()
    {
        muteSound = !muteSound;
        Logger.LogInformation("ToggleMute: muteSound is now {MuteSound}", muteSound);
    }

    private async Task ToggleLearnMode()
    {
        if (hasStartedQuiz)
        {
            saveMessage = "Cannot enable Learn Mode after starting the quiz.";
            saveMessageType = "warning";
            Logger.LogWarning("ToggleLearnMode: Attempted to enable Learn Mode after quiz started.");
            return;
        }
        if (!learnMode)
        {
            learnMode = true;
            Quiz.LearnMode = true;
            saveMessage = "Learn Mode enabled! Your answers will be saved and locked after you move on.";
            saveMessageType = "info";
            Logger.LogInformation("ToggleLearnMode: LearnMode is now true");
            await JS.InvokeVoidAsync("console.log", saveMessage);
        }
    }

    private async Task HandleAnswerSubmitted((bool isCorrect, int questionIndex, string userAnswer) args)
    {
        var (isCorrect, questionIndex, userAnswer) = args;
        if (Quiz == null || Quiz.Questions == null || questionIndex < 0 || questionIndex >= Quiz.Questions.Count)
            return;

        hasStartedQuiz = true;

        if (!learnMode)
        {
            // In non-learn mode, just update UI, do not persist, allow all edits
            Quiz.Questions[questionIndex].UserAnswer = userAnswer;
            StateHasChanged();
            return;
        }

        // Learn Mode logic (persist, lock after moving on)
        if (activeQuestionIndex != null && activeQuestionIndex != questionIndex && answeredQuestions.Contains(activeQuestionIndex.Value))
        {
            lockedQuestions.Add(activeQuestionIndex.Value);
        }
        answeredQuestions.Add(questionIndex);
        activeQuestionIndex = questionIndex;

        // Track time taken for this question
        DateTime questionStart;
        if (!questionStartTimes.TryGetValue(questionIndex, out questionStart))
        {
            questionStart = AttemptStartTime ?? DateTime.UtcNow;
        }
        var timeTaken = (DateTime.UtcNow - questionStart).TotalSeconds;

        // Remove any previous answer for this question
        if (CurrentAttempt?.AttemptQuestions != null)
        {
            var existing = CurrentAttempt.AttemptQuestions.FirstOrDefault(q => q.UserQuizQuestionId == Quiz.Questions[questionIndex].Id);
            if (existing != null)
            {
                CurrentAttempt.AttemptQuestions.Remove(existing);
                if (isCorrect) correctAnswers--;
                totalAnswered--;
            }
        }

        // Record answer as UserQuizAttemptQuestion
        var userQuizQuestion = Quiz.Questions[questionIndex];
        var attemptQuestion = new UserQuizAttemptQuestion
        {
            UserQuizAttemptId = CurrentAttemptId ?? 0,
            UserQuizQuestionId = userQuizQuestion.Id,
            UserAnswer = userAnswer,
            IsCorrect = isCorrect,
            TimeTakenSeconds = timeTaken
        };

        if (CurrentAttempt == null)
        {
            AttemptStartTime = DateTime.UtcNow;
            var attempt = new UserQuizAttempt
            {
                UserQuizId = QuizId,
                AttemptDate = AttemptStartTime.Value,
                Score = 0,
                Duration = TimeSpan.Zero,
                AttemptQuestions = new List<UserQuizAttemptQuestion> { attemptQuestion }
            };
            CurrentAttempt = await UserQuizAttemptApiService.CreateAsync(attempt);
            if (CurrentAttempt != null)
            {
                CurrentAttemptId = CurrentAttempt.Id;
            }
            else
            {
                saveMessage = "Failed to start quiz attempt.";
                saveMessageType = "danger";
                Logger.LogError("Failed to create UserQuizAttempt");
                return;
            }
        }
        else
        {
            CurrentAttempt.AttemptQuestions ??= new List<UserQuizAttemptQuestion>();
            CurrentAttempt.AttemptQuestions.Add(attemptQuestion);
            await UserQuizAttemptApiService.UpdateAsync(CurrentAttempt);
        }

        totalAnswered++;
        if (isCorrect) correctAnswers++;

        if (totalAnswered == totalQuestions)
        {
            var duration = (AttemptStartTime.HasValue) ? (DateTime.UtcNow - AttemptStartTime.Value) : TimeSpan.Zero;
            CurrentAttempt.Score = totalQuestions > 0 ? (double)correctAnswers / totalQuestions : 0;
            CurrentAttempt.Duration = duration;
            await UserQuizAttemptApiService.UpdateAsync(CurrentAttempt);
            await HandleQuizCompletionAsync();
        }
        StateHasChanged();
    }

    private async Task HandleQuizCompletionAsync()
    {
        Logger.LogInformation("HandleQuizCompletionAsync: All questions answered. Final score: {CorrectAnswers}/{TotalAnswered}", correctAnswers, totalAnswered);
        showFinalMessage = true;
        await JS.InvokeVoidAsync("scrollToTopSmooth");
        double scorePercent = totalAnswered > 0 ? (double)correctAnswers / totalAnswered : 0;

        if (scorePercent >= 0.8)
        {
            Logger.LogInformation("HandleQuizCompletionAsync: Score >= 80%, playing applause and launching confetti");
            if (!muteSound)
            {
                await JS.InvokeVoidAsync("playSound", "/sounds/applause.mp3");
            }
            await JS.InvokeVoidAsync("launchConfetti");
            saveMessage = "Great job! You've completed the quiz with a passing score.";
            saveMessageType = "success";
        }
        else
        {
            saveMessage = "Quiz completed. You might want to review the material and try again.";
            saveMessageType = "warning";
        }
    }
}