@page "/TakeAQuiz/{QuizId:int}"
@rendermode InteractiveWebAssembly

@using WiseUpDude.Client.Controls
@using WiseUpDude.Model
@using WiseUpDude.Client.Pages
@using WiseUpDude.Shared.Services

@inject IConfiguration Configuration
@inject ILogger<TakeAQuiz> Logger

@inject HttpClient HttpClient
@inject ILogger<QuizApiService> QuizApiLogger

@inject QuizApiService? QuizApiService
@inject UserQuizApiService UserQuizApiService
@inject IUserQuizAttemptApiService UserQuizAttemptApiService

@inject IJSRuntime JS

@inject NavigationManager Nav

@if (OperatingSystem.IsBrowser())
{
    <div class="alert alert-success">
        <strong>WASM Mode:</strong> This page is running in WebAssembly mode.
    </div>
}
else
{
    <div class="alert alert-warning">
        <strong>Server Mode:</strong> This page is running in Blazor Server mode.
    </div>
}

<p>Running on: @(OperatingSystem.IsBrowser() ? "WASM" : "Server")</p>

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div>
            <h3 class="mb-0">
                🧠 Take Quiz -
                @(UserQuiz?.Type == "Topic"
                                ? UserQuiz?.Topic
                                : UserQuiz?.Prompt)
            </h3>
            <p class="mb-0">Select an answer for each question to see if you're correct.</p>
            @if (!string.IsNullOrWhiteSpace(UserQuiz?.Difficulty))
            {
                <p class="text-muted mb-0">Quiz Difficulty: <strong>@UserQuiz.Difficulty</strong></p>
            }
        </div>
    </div>
    <div class="card-body">
        <!-- Score Tracker -->
        <ScoreTracker TotalQuestions="@totalQuestions" CorrectAnswers="@correctAnswers" />

        <!-- Final Message -->
        @if (showFinalMessage)
        {
            @if ((double)correctAnswers / totalAnswered >= 0.8)
            {
                <div class="alert alert-success mt-4 fs-5 text-center fw-bold">
                    🎉 You Wise'd Up! Final Score: @correctAnswers / @totalAnswered
                </div>
            }
            else
            {
                <div class="alert alert-danger mt-4 fs-5 text-center fw-bold">
                    😬 You've got work to do, wise guy. Final Score: @correctAnswers / @totalAnswered
                </div>
            }
        }

        <!-- Quiz Controls -->
        <div class="d-flex align-items-center gap-4 mb-3">
            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleAutoSubmit">
                <i class="bi @(autoSubmit ? "bi-lightning-fill" : "bi-lightning") me-1"></i>
                @(autoSubmit ? "Auto-Submit On" : "Auto-Submit Off")
            </button>

            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleMute">
                <i class="bi @(muteSound ? "bi-volume-mute-fill" : "bi-volume-up-fill") me-1"></i>
                @(muteSound ? "Muted" : "Sound On")
            </button>

            <button type="button"
                    class="btn btn-outline-secondary btn-sm d-flex align-items-center"
                    @onclick="ToggleLearnMode"
                    disabled="@(hasStartedQuiz || learnMode)"
                    title="Learn Mode: When enabled, your answers are saved and you cannot change your answer. You cannot turn off Learn Mode after starting, and you cannot enable it after answering a question.">
                <i class="bi @(learnMode ? "bi-mortarboard-fill" : "bi-mortarboard") me-1"></i>
                @(learnMode ? "Learn Mode On" : "Learn Mode Off")
            </button>
        </div>

        @if (UserQuiz == null || UserQuiz.Questions.Count == 0)
        {
            <div class="alert alert-warning">
                No quiz questions found. Please go to Home and generate a quiz first.
            </div>
        }
        else
        {
            @for (int i = 0; i < UserQuiz.Questions.Count; i++)
            {
                var question = UserQuiz.Questions[i];
                bool canEdit = !learnMode || !answeredQuestions.Contains(i);
                <div class="mb-4">
                    <p class="text-muted">Question Difficulty: <strong>@question.Difficulty</strong></p>
                    <QuestionCard Question="question"
                                  QuestionIndex="i"
                                  AutoSubmit="autoSubmit"
                                  MuteSound="muteSound"
                                  CanEdit="@canEdit"
                                  OnAnswerSubmitted="@((args) => HandleAnswerSubmitted(args))" />
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public int QuizId { get; set; }

    private Quiz? UserQuiz { get; set; }
    private int totalQuestions;
    private int correctAnswers;
    private int totalAnswered;
    private bool showFinalMessage;
    private bool autoSubmit = true;
    private bool muteSound = false;
    private bool learnMode = false;
    private bool hasStartedQuiz = false;
    private HashSet<int> answeredQuestions = new HashSet<int>();
    private Dictionary<int, DateTime> questionStartTimes = new Dictionary<int, DateTime>();
    private DateTime? AttemptStartTime;
    private UserQuizAttempt? CurrentAttempt;
    private int? CurrentAttemptId;
    private string? saveMessage;
    private string? saveMessageType;

    protected override async Task OnInitializedAsync()
    {
        UserQuiz = await UserQuizApiService.GetUserQuizByIdAsync(QuizId);
        if (UserQuiz != null && UserQuiz.Questions != null)
        {
            totalQuestions = UserQuiz.Questions.Count;
            learnMode = UserQuiz.LearnMode;
            // Populate answeredQuestions with already-answered questions
            for (int i = 0; i < UserQuiz.Questions.Count; i++)
            {
                if (!string.IsNullOrEmpty(UserQuiz.Questions[i].UserAnswer))
                {
                    answeredQuestions.Add(i);
                    // Check if the answer is correct and increment correctAnswers
                    if (UserQuiz.Questions[i].UserAnswer == UserQuiz.Questions[i].Answer)
                    {
                        correctAnswers++;
                    }
                }
            }
            // Set totalAnswered to the count of previously answered questions
            totalAnswered = answeredQuestions.Count;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("initBootstrapTooltips");
    }

    private void ToggleAutoSubmit()
    {
        autoSubmit = !autoSubmit;
    }

    private void ToggleMute()
    {
        muteSound = !muteSound;
    }

    private async Task ToggleLearnMode()
    {
        // Re-check all questions for answers to ensure up-to-date state
        if (UserQuiz?.Questions != null)
        {
            answeredQuestions.Clear();
            for (int i = 0; i < UserQuiz.Questions.Count; i++)
            {
                if (!string.IsNullOrEmpty(UserQuiz.Questions[i].UserAnswer))
                {
                    answeredQuestions.Add(i);
                }
            }
        }

        // If LearnMode is already ON and any question has been answered, do nothing
        if (learnMode && answeredQuestions.Count > 0)
            return;

        // If LearnMode is OFF and any question has been answered, do nothing (optional)
        if (!learnMode && answeredQuestions.Count > 0)
            return;

        learnMode = !learnMode;
        if (UserQuiz != null)
        {
            UserQuiz.LearnMode = learnMode;
            await UserQuizApiService.UpdateLearnModeAsync(UserQuiz.Id, learnMode);
        }
    }

    private async Task HandleAnswerSubmitted((bool isCorrect, int questionIndex, string userAnswer) args)
    {
        var (isCorrect, questionIndex, userAnswer) = args;
        if (UserQuiz == null || UserQuiz.Questions == null || questionIndex < 0 || questionIndex >= UserQuiz.Questions.Count)
            return;

        hasStartedQuiz = true;

        // Always update UserQuizQuestion.UserAnswer in DB
        var userQuizQuestion = UserQuiz.Questions[questionIndex];
        userQuizQuestion.UserAnswer = userAnswer;
        await UserQuizApiService.UpdateUserQuizQuestionAnswerAsync(userQuizQuestion.Id, userAnswer);

        // if (!learnMode)
        // {
        //     // In non-learn mode, just update UI, do not persist, allow all edits
        //     StateHasChanged();
        //     return;
        // }

        if (learnMode)
        {
            // Learn Mode: lock after first answer, never allow change
            if (answeredQuestions.Contains(questionIndex))
                return;

            answeredQuestions.Add(questionIndex);

            // Track time taken for this question
            DateTime questionStart;
            if (!questionStartTimes.TryGetValue(questionIndex, out questionStart))
            {
                questionStart = AttemptStartTime ?? DateTime.UtcNow;
            }
            var timeTaken = (DateTime.UtcNow - questionStart).TotalSeconds;

            // Record answer as UserQuizAttemptQuestion
            var attemptQuestion = new UserQuizAttemptQuestion
            {
                UserQuizAttemptId = CurrentAttemptId ?? 0,
                UserQuizQuestionId = userQuizQuestion.Id,
                UserAnswer = userAnswer,
                IsCorrect = isCorrect,
                TimeTakenSeconds = timeTaken
            };

            if (CurrentAttempt == null)
            {
                AttemptStartTime = DateTime.UtcNow;
                var attempt = new UserQuizAttempt
                {
                    UserQuizId = QuizId,
                    AttemptDate = AttemptStartTime.Value,
                    Score = 0,
                    Duration = TimeSpan.Zero,
                    AttemptQuestions = new List<UserQuizAttemptQuestion> { attemptQuestion }
                };
                CurrentAttempt = await UserQuizAttemptApiService.CreateAsync(attempt);
                if (CurrentAttempt != null)
                {
                    CurrentAttemptId = CurrentAttempt.Id;
                }
                else
                {
                    saveMessage = "Failed to start quiz attempt.";
                    saveMessageType = "danger";
                    Logger.LogError("Failed to create UserQuizAttempt");
                    return;
                }
            }
            else
            {
                CurrentAttempt.AttemptQuestions ??= new List<UserQuizAttemptQuestion>();
                CurrentAttempt.AttemptQuestions.Add(attemptQuestion);
                await UserQuizAttemptApiService.UpdateAsync(CurrentAttempt);
            }
        }

        totalAnswered++;
        if (isCorrect) correctAnswers++;

        Console.WriteLine($"totalAnswered: {totalAnswered}, totalQuestions: {totalQuestions}");

        if (totalAnswered == totalQuestions)
        {
            if (learnMode)
            {
                var duration = (AttemptStartTime.HasValue) ? (DateTime.UtcNow - AttemptStartTime.Value) : TimeSpan.Zero;
                CurrentAttempt.Score = totalQuestions > 0 ? (double)correctAnswers / totalQuestions : 0;
                CurrentAttempt.Duration = duration;
                await UserQuizAttemptApiService.UpdateAsync(CurrentAttempt);
            }

            await HandleQuizCompletionAsync();      //TODO: Maybe for LearnMode change the final display, more professional ;-).
        }
        StateHasChanged();
    }

    private async Task HandleQuizCompletionAsync()
    {
        Logger.LogInformation("HandleQuizCompletionAsync: All questions answered. Final score: {CorrectAnswers}/{TotalAnswered}", correctAnswers, totalAnswered);
        showFinalMessage = true;
        await JS.InvokeVoidAsync("scrollToTopSmooth");
        double scorePercent = totalAnswered > 0 ? (double)correctAnswers / totalAnswered : 0;

        if (scorePercent >= 0.8)
        {
            Logger.LogInformation("HandleQuizCompletionAsync: Score >= 80%, playing applause and launching confetti");
            if (!muteSound)
            {
                await JS.InvokeVoidAsync("playSound", "/sounds/applause.mp3");
            }
            await JS.InvokeVoidAsync("launchConfetti");
            saveMessage = "Great job! You've completed the quiz with a passing score.";
            saveMessageType = "success";
        }
        else
        {
            saveMessage = "Quiz completed. You might want to review the material and try again.";
            saveMessageType = "warning";
        }
    }
}