@page "/learningtracksMothBalled/add"
@page "/learningtracksMothBalled/edit/{Id:int?}"

@inject ILearningTrackRepository LearningTrackRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

@code {
    private static readonly string[] DifficultyLevels = new[] { "Easy", "Medium", "Hard" };
    private static readonly string[] SourceTypes = new[] { "YouTube", "Blog", "Book", "Article", "Podcast", "Other" };
}

<h3>Add a New Learning Track</h3>

<div>DEBUG: @track.Name</div>

<div class="card mb-4">
    <div class="card-body">
        <ul class="nav nav-pills mb-3">
            <li class="nav-item">
                <button class="nav-link @(step == 1 ? "active" : "")" @onclick="() => step = 1">1. Track Info</button>
            </li>
            <li class="nav-item">
                <button class="nav-link @(step == 2 ? "active" : "")" @onclick="() => step = 2" disabled="@(!canGoToCategories)">2. Categories</button>
            </li>
            <li class="nav-item">
                <button class="nav-link @(step == 3 ? "active" : "")" @onclick="() => step = 3" disabled="@(!canGoToSources)">3. Sources</button>
            </li>
            <li class="nav-item">
                <button class="nav-link @(step == 4 ? "active" : "")" @onclick="() => step = 4" disabled="@(!canGoToReview)">4. Review</button>
            </li>
        </ul>

        @if (step == 1)
        {
            <div>
                <div class="mb-3">
                    <label class="form-label">Track Name</label>
                    <input class="form-control" @bind="track.Name" maxlength="200" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Description</label>
                    <textarea class="form-control" @bind="track.Description" maxlength="1000"></textarea>
                </div>
                <button class="btn btn-primary" @onclick="NextStep" disabled="@string.IsNullOrWhiteSpace(track.Name)">Next</button>
            </div>
        }
        else if (step == 2)
        {
            <div>
                <h5>Categories</h5>
                <ul class="list-group mb-2">
                    @foreach (var cat in categories)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>@cat.Name (@cat.Difficulty)</span>
                            <button class="btn btn-sm btn-danger" @onclick="() => RemoveCategory(cat)">Remove</button>
                        </li>
                    }
                </ul>
                <div class="mb-2">
                    <input class="form-control mb-1" placeholder="Category Name" @bind="newCategory.Name" maxlength="100" />
                    <select class="form-select mb-1" @bind="newCategory.Difficulty">
                        <option value="">Select Difficulty</option>
                        @foreach (var level in DifficultyLevels)
                        {
                            <option value="@level">@level</option>
                        }
                    </select>
                    <textarea class="form-control mb-1" placeholder="Description" @bind="newCategory.Description" maxlength="500"></textarea>
                    <button class="btn btn-success btn-sm" @onclick="AddCategory" disabled="@string.IsNullOrWhiteSpace(newCategory.Name)">Add Category</button>
                </div>
                <button class="btn btn-secondary me-2" @onclick="PrevStep">Back</button>
                <button class="btn btn-primary" @onclick="NextStep" disabled="@(categories.Count == 0)">Next</button>
            </div>
        }
        else if (step == 3)
        {
            <div>
                <h5>Sources for Each Category</h5>
                @foreach (var cat in categories)
                {
                    <div class="mb-3 border p-2 rounded">
                        <strong>@cat.Name</strong>
                        <ul class="list-group mb-2">
                            @foreach (var src in cat.Sources)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span>@src.Name (@src.SourceType)</span>
                                    <button class="btn btn-sm btn-danger" @onclick="() => RemoveSource(cat, src)">Remove</button>
                                </li>
                            }
                        </ul>
                        <input class="form-control mb-1" placeholder="Source Name" @bind="newSource.Name" maxlength="200" />
                        <select class="form-select mb-1" @bind="newSource.SourceType">
                            <option value="">Select Source Type</option>
                            @foreach (var type in SourceTypes)
                            {
                                <option value="@type">@type</option>
                            }
                        </select>
                        <input class="form-control mb-1" placeholder="URL" @bind="newSource.Url" maxlength="500" />
                        <textarea class="form-control mb-1" placeholder="Description" @bind="newSource.Description" maxlength="1000"></textarea>
                        <button class="btn btn-success btn-sm" @onclick="() => AddSource(cat)" disabled="@string.IsNullOrWhiteSpace(newSource.Name)">Add Source</button>
                    </div>
                }
                <button class="btn btn-secondary me-2" @onclick="PrevStep">Back</button>
                <button class="btn btn-primary" @onclick="NextStep" disabled="@(!categories.All(c => c.Sources.Count > 0))">Next</button>
            </div>
        }
        else if (step == 4)
        {
            <div>
                <h5>Review & Submit</h5>
                <p><strong>Name:</strong> @track.Name</p>
                <p><strong>Description:</strong> @track.Description</p>
                <ul>
                    @foreach (var cat in categories)
                    {
                        <li>
                            <strong>@cat.Name</strong> (@cat.Difficulty)
                            <ul>
                                @foreach (var src in cat.Sources)
                                {
                                    <li>@src.Name (@src.SourceType) - @src.Url</li>
                                }
                            </ul>
                        </li>
                    }
                </ul>
                <button class="btn btn-secondary me-2" @onclick="PrevStep">Back</button>
                <button class="btn btn-success" @onclick="SaveTrack">Save Learning Track</button>
                @if (saveMessage != null)
                {
                    <div class="alert alert-info mt-2">@saveMessage</div>
                }
            </div>
        }
    </div>
</div>

@code{
    protected override async Task OnInitializedAsync()
    {
        if (isEditMode)
        {
            var existing = await LearningTrackRepository.GetByIdAsync(Id.Value);
            if (existing != null)
            {
                track = existing;
                categories = existing.Categories ?? new();
            }
            else
            {
                NavigationManager.NavigateTo("/learningtracks/maintain");
            }
        }
    }

    [Parameter]
    public int? Id { get; set; }
    private bool isEditMode => Id.HasValue;

    private int step = 1;
    private LearningTrack track = new();
    private List<LearningTrackCategory> categories = new();
    private LearningTrackCategory newCategory = new();
    private LearningTrackSource newSource = new();
    private string? saveMessage;

    private bool canGoToCategories => !string.IsNullOrWhiteSpace(track.Name);
    private bool canGoToSources => categories.Count > 0;
    private bool canGoToReview => categories.All(c => c.Sources.Count > 0);

    private void NextStep()
    {
        if (step < 4) step++;
    }
    private void PrevStep()
    {
        if (step > 1) step--;
    }

    private void AddCategory()
    {
        var cat = new LearningTrackCategory
        {
            Name = newCategory.Name,
            Description = newCategory.Description,
            Difficulty = newCategory.Difficulty,
            Sources = new List<LearningTrackSource>()
        };
        categories.Add(cat);
        newCategory = new LearningTrackCategory();
    }

    private void RemoveCategory(LearningTrackCategory cat)
    {
        categories.Remove(cat);
    }

    private void AddSource(LearningTrackCategory cat)
    {
        var src = new LearningTrackSource
        {
            Name = newSource.Name,
            SourceType = newSource.SourceType,
            Url = newSource.Url,
            Description = newSource.Description
        };
        cat.Sources.Add(src);
        newSource = new LearningTrackSource();
    }

    private void RemoveSource(LearningTrackCategory cat, LearningTrackSource src)
    {
        cat.Sources.Remove(src);
    }

    private async Task SaveTrack()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            track.UserId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
        }
        else
        {
            saveMessage = "You must be logged in to save a Learning Track.";
            return;
        }

        track.Categories = categories;

        if (isEditMode)
            await LearningTrackRepository.UpdateAsync(track);
        else
            await LearningTrackRepository.AddAsync(track);

        saveMessage = "Learning Track saved!";
        NavigationManager.NavigateTo("/learningtracks/maintain");
    }
}