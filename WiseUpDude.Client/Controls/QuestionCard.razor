@using WiseUpDude.Model

@inject IJSRuntime JS
@inject ILogger<QuestionCard> Logger

@code {
    [Parameter] public QuizQuestion? Question { get; set; }
    [Parameter] public int QuestionIndex { get; set; }
    [Parameter] public bool AutoSubmit { get; set; }
    [Parameter] public EventCallback<(bool isCorrect, int questionIndex, string userAnswer)> OnAnswerSubmitted { get; set; }
    [Parameter] public bool MuteSound { get; set; }
    [Parameter] public bool CanEdit { get; set; } = true;

    private string userAnswer = string.Empty; // Tracks the user's selected answer
    private bool submitted = false;
    private bool showContextPopover = false;
    private int? showCitationPopoverIndex = null;
    private HashSet<int> openCitationPopovers = new();
    private int? hoveredCitationIndex = null;
    private bool citationPopoverHovered = false;

    protected override void OnParametersSet()
    {
        // Pre-fill the user's saved answer if it exists
        if (Question?.UserAnswer is not null)
        {
            userAnswer = Question.UserAnswer;
            submitted = true; // Mark as submitted to show feedback
        }
    }

    private void OnSelectAnswer(string answer)
    {
        if (!CanEdit) return;
        userAnswer = answer;
        submitted = false;

        Logger.LogInformation("Answer selected for question {QuestionIndex}: {Answer}", QuestionIndex, answer);

        if (AutoSubmit)
        {
            CheckAnswerAndNotify();
        }
    }

    private async void CheckAnswerAndNotify()
    {
        if (!CanEdit) return;
        submitted = true;

        if (Question is not null)
        {
            Question.UserAnswer = userAnswer;

            bool isCorrect = userAnswer == Question.Answer;

            Logger.LogInformation("Answer checked for question {QuestionIndex}. UserAnswer: {UserAnswer}, CorrectAnswer: {CorrectAnswer}, IsCorrect: {IsCorrect}",
                QuestionIndex, userAnswer, Question.Answer, isCorrect);

            if (!MuteSound)
            {
                try
                {
                    var soundFile = isCorrect ? "/sounds/correct.mp3" : "/sounds/incorrect.mp3";
                    Logger.LogDebug("Playing sound: {SoundFile}", soundFile);
                    await JS.InvokeVoidAsync("playSound", soundFile);
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Error playing sound for question {QuestionIndex}", QuestionIndex);
                }
            }

            // Pass isCorrect, QuestionIndex, and userAnswer
            await OnAnswerSubmitted.InvokeAsync((isCorrect, QuestionIndex, userAnswer));
        }

        StateHasChanged();
    }

    private void CheckAnswer()
    {
        CheckAnswerAndNotify();
    }

    private string GetOptionClass(string option)
    {
        if (!submitted)
        {
            return "btn btn-outline-dark me-2 mb-2 rounded-pill" + (CanEdit ? "" : " disabled");
        }

        if (option == Question?.Answer)
        {
            return "btn btn-correct me-2 mb-2 rounded-pill" + (CanEdit ? "" : " disabled"); // ✅ Correct
        }

        if (option == userAnswer)
        {
            return "btn btn-incorrect me-2 mb-2 rounded-pill" + (CanEdit ? "" : " disabled"); // ❌ Incorrect
        }

        return "btn btn-outline-secondary me-2 mb-2 rounded-pill" + (CanEdit ? "" : " disabled");
    }

    private void ShowContextPopover() => showContextPopover = true;
    private void HideContextPopover() => showContextPopover = false;
    private void ShowCitationPopover(int index) { hoveredCitationIndex = index; StateHasChanged(); }
    private void HideCitationPopover(int index) { if (hoveredCitationIndex == index) hoveredCitationIndex = null; StateHasChanged(); }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Inline Bootstrap popover initialization
            await JS.InvokeVoidAsync("eval", @"
                var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=""popover""]'));
                popoverTriggerList.forEach(function (el) {
                    if (el._popoverInstance) {
                        el._popoverInstance.dispose();
                    }
                    el._popoverInstance = new bootstrap.Popover(el);
                });
            ");
        }
    }
}

<div class="card mb-3 shadow-sm">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center position-relative">
            <h5 class="card-title mb-0">@($"Q{QuestionIndex + 1}: {Question?.Question}")</h5>
            @if (!string.IsNullOrWhiteSpace(Question?.ContextSnippet))
            {
                <span @onmouseover="ShowContextPopover" @onmouseout="HideContextPopover" style="cursor:pointer;">
                    <i class="bi bi-info-circle" style="font-size: 1.25rem;" title="Show context"></i>
                    @if (showContextPopover)
                    {
                        <div class="popover fade show position-absolute end-0 mt-2" style="z-index:1050; min-width:250px; max-width:350px;">
                            <div class="popover-header fw-bold">Context</div>
                            <div class="popover-body small">@Question.ContextSnippet</div>
                        </div>
                    }
                </span>
            }
        </div>
        <div class="mb-3"></div>

        @* Citation popovers *@
        @if (Question?.Citation != null && Question.Citation.Any())
        {
            <div class="mb-2">
                <span class="small text-muted">Sources:
                    @for (int i = 0; i < Question.Citation.Count; i++)
                    {
                        var citation = Question.Citation[i];
                        var displayIndex = i + 1;
                        var popoverId = $"citation-popover-{QuestionIndex}-{i}";
                        <span class="ms-2">
                            <sup id="@popoverId"
                                 tabindex="0"
                                 data-bs-toggle="popover"
                                 data-bs-trigger="focus"
                                 data-bs-placement="top"
                                 data-bs-html="true"
                                 data-bs-content="@((!string.IsNullOrWhiteSpace(citation)) ? $"<a href='{citation}' target='_blank' rel='noopener'>{citation}</a>" : citation)"
                                 style="background:#e9ecef; border-radius:3px; padding:2px 5px; font-weight:bold; cursor:pointer;"
                                 title="Click to view citation">
                                @displayIndex
                            </sup>
                        </span>
                    }
                </span>
            </div>
        }

        <div class="options-center">
        @if (Question?.Options != null && Question.Options.Count > 0)
        {
            @foreach (var option in Question.Options)
            {
                <button class="@GetOptionClass(option)"
                        @onclick="() => OnSelectAnswer(option)"
                        disabled="@(!CanEdit)">
                    @option
                </button>
            }
        }
        else
        {
            @foreach (var tf in new[] { "True", "False" })
            {
                <button class="@GetOptionClass(tf)"
                        @onclick="() => OnSelectAnswer(tf)"
                        disabled="@(!CanEdit)">
                    @tf
                </button>
            }
        }
        </div>

        @if (!AutoSubmit)
        {
            <div class="mt-3">
                <button class="btn btn-sm btn-primary" @onclick="CheckAnswer" disabled="@(!CanEdit)">Check Answer</button>
            </div>
        }

        @if (submitted && !string.IsNullOrEmpty(userAnswer))
        {
            <div class="mt-3">
                @if (userAnswer == Question?.Answer)
                {
                    <div class="feedback-correct">
                        ✅ Correct!
                    </div>
                }
                else
                {
                    <div class="feedback-incorrect">
                        ❌ Incorrect!
                    </div>
                }

                <div class="mt-1"><em>Explanation:</em> @Question?.Explanation</div>
            </div>
        }
    </div>
</div>
