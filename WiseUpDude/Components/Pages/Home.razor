@page "/home"

@layout WiseUpDude.Components.Layout.MinimalLayout

@using Microsoft.AspNetCore.Components.Authorization
@using WiseUpDude.Client.Controls
@using WiseUpDude.Components.Controls
@using WiseUpDude.Data.Repositories
@using WiseUpDude.Data.Repositories.Interfaces
@using WiseUpDude.Model
@using WiseUpDude.Services
@using WiseUpDude.Shared
@using WiseUpDude.Shared.Services
@using WiseUpDude.Shared.Services.Interfaces

@inject DashboardDataService DashboardData
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
@inject IUserQuizRepository<Quiz> UserQuizRepository
@inject IUserQuizQuestionRepository<QuizQuestion> UserQuizQuestionRepository
@inject QuizStateService QuizState
@inject SpecialQuizAssignmentService SpecialQuizAssignmentService
@inject IAssignmentTypeService AssignmentTypeService
@inject ILogger<Home> Logger

@rendermode InteractiveServer

@attribute [Authorize(Roles = "FreeSubscriber,PaidSubscriber,Admin,EnterpriseSubscriber")]

<div class="hero-header text-center mb-5">
    <h1 class="dynamic-title mb-3">@GetDynamicTitle()</h1>
    <p class="hero-subtitle text-muted">@GetDynamicSubtitle()</p>
</div>

<div class="container">
    <!-- Saved Quizzes Heading (moved above filter) -->
    <h3 class="saved-quizzes-heading">Your Saved Quizzes...</h3>

    <!-- Quiz Filter -->
    <div class="mb-4">
        <div class="quiz-filter-pills">
            <input type="radio" class="btn-check" name="quizFilter" id="filterToday" autocomplete="off"
                   checked="@(selectedFilter == QuizFilterPeriod.Today)"
                   @onchange="() => OnFilterChanged(QuizFilterPeriod.Today)">
            <label class="quiz-filter-pill @(selectedFilter == QuizFilterPeriod.Today ? "active" : null)" for="filterToday">
                Today <span class="quiz-count-badge">@GetQuizCount(QuizFilterPeriod.Today)</span>
            </label>

            <input type="radio" class="btn-check" name="quizFilter" id="filterThisWeek" autocomplete="off"
                   checked="@(selectedFilter == QuizFilterPeriod.ThisWeek)"
                   @onchange="() => OnFilterChanged(QuizFilterPeriod.ThisWeek)">
            <label class="quiz-filter-pill @(selectedFilter == QuizFilterPeriod.ThisWeek ? "active" : null)" for="filterThisWeek">
                This Week <span class="quiz-count-badge">@GetQuizCount(QuizFilterPeriod.ThisWeek)</span>
            </label>

            <input type="radio" class="btn-check" name="quizFilter" id="filterThisMonth" autocomplete="off"
                   checked="@(selectedFilter == QuizFilterPeriod.ThisMonth)"
                   @onchange="() => OnFilterChanged(QuizFilterPeriod.ThisMonth)">
            <label class="quiz-filter-pill @(selectedFilter == QuizFilterPeriod.ThisMonth ? "active" : null)" for="filterThisMonth">
                This Month <span class="quiz-count-badge">@GetQuizCount(QuizFilterPeriod.ThisMonth)</span>
            </label>

            <input type="radio" class="btn-check" name="quizFilter" id="filterLast3Months" autocomplete="off"
                   checked="@(selectedFilter == QuizFilterPeriod.Last3Months)"
                   @onchange="() => OnFilterChanged(QuizFilterPeriod.Last3Months)">
            <label class="quiz-filter-pill @(selectedFilter == QuizFilterPeriod.Last3Months ? "active" : null)" for="filterLast3Months">
                Last 3 Months <span class="quiz-count-badge">@GetQuizCount(QuizFilterPeriod.Last3Months)</span>
            </label>

            <input type="radio" class="btn-check" name="quizFilter" id="filterAllQuizzes" autocomplete="off"
                   checked="@(selectedFilter == QuizFilterPeriod.AllQuizzes)"
                   @onchange="() => OnFilterChanged(QuizFilterPeriod.AllQuizzes)">
            <label class="quiz-filter-pill @(selectedFilter == QuizFilterPeriod.AllQuizzes ? "active" : null)" for="filterAllQuizzes">
                All Quizzes <span class="quiz-count-badge">@GetQuizCount(QuizFilterPeriod.AllQuizzes)</span>
            </label>
        </div>
    </div>

    <!-- Saved Quizzes -->
    <div>
        @if (IsGenerating)
        {
            <p class="text-center text-muted">🦖 Generating your quiz...</p>
        }
        else if (Summary == null)
        {
            <p>Loading...</p>
        }
        else if (Summary.RecentQuizzes?.Any() == true)
        {
            var filteredQuizzes = GetFilteredQuizzes();
            if (filteredQuizzes.Any())
            {
                <div class="row">
                    @foreach (var quiz in filteredQuizzes)
                    {
                        var scoreClass = quiz.Score switch
                        {
                            >= 90 => "score-high",
                            >= 75 => "score-low",
                            >= 50 => "score-mid",
                            _ => "score-bad"
                        };

                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card quiz-card-modern h-100">
                                <div class="quiz-card-header d-flex justify-content-between align-items-center">
                                    @if (editingQuizId == quiz.Id)
                                    {
                                        <input type="text" class="quiz-edit-input flex-grow-1 me-2" @bind="quiz.Name" placeholder="Enter quiz name..." />
                                        <div class="quiz-edit-buttons">
                                            <button class="btn btn-sm btn-light" @onclick="() => SaveQuizName(quiz.Id, quiz.Name)">Save</button>
                                            <button class="btn btn-sm btn-secondary" @onclick="CancelEdit">Cancel</button>
                                        </div>
                                    }
                                    else
                                    {
                                        <h5 class="quiz-card-title" title="@quiz.Name">@quiz.Name</h5>
                                        <span class="quiz-score-badge @scoreClass" title="@($"{quiz.Score:F0}% Complete")">
                                            @($"{quiz.Score:F0}%")
                                        </span>
                                    }
                                </div>
                                <div class="quiz-card-body">
                                    @if (!string.IsNullOrWhiteSpace(quiz.Description))
                                    {
                                        <p class="quiz-description">@quiz.Description</p>
                                    }
                                </div>
                                <div class="quiz-card-actions">
                                    <div class="quiz-action-buttons">
                                        <button class="quiz-action-btn action-play" title="Resume Quiz" @onclick="() => ResumeQuiz(quiz.Id)">
                                            <i class="bi bi-play-fill"></i>
                                            @* <span>Play</span> *@
                                        </button>
                                        <button class="quiz-action-btn action-restart" title="Start Over" @onclick="() => StartOver(quiz.Id)">
                                            <i class="bi bi-arrow-clockwise"></i>
                                            @* <span>Restart</span> *@
                                        </button>
                                        <button class="quiz-action-btn action-delete" title="Delete Quiz" @onclick="() => ConfirmDelete(quiz.Id)">
                                            <i class="bi bi-trash"></i>
                                            @* <span>Delete</span> *@
                                        </button>
                                        <button class="quiz-action-btn action-edit" title="Edit Quiz Name" @onclick="() => EditQuizName(quiz.Id)">
                                            <i class="bi bi-pencil"></i>
                                            @* <span>Edit</span> *@
                                        </button>
                                        <button class="quiz-action-btn action-learn @GetLearnModeIconClass(quiz.LearnMode)"
                                                title="@GetLearnModeTooltip(quiz.LearnMode, quiz.Id)"
                                                @onclick="() => ToggleLearnMode(quiz.Id)"
                                                disabled="@(quizzesWithAnswers.Contains(quiz.Id))">
                                            <i class="@GetLearnModeIconType(quiz.LearnMode)"></i>
                                            @* <span>Learn</span> *@
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p>No quizzes found for the selected time period.</p>
            }
        }
        else
        {
            <p>You have no saved quizzes.</p>
        }
    </div>
    @if (quizToDeleteId.HasValue)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this quiz?</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                        <button class="btn btn-danger" @onclick="ConfirmedDelete">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    public enum QuizFilterPeriod
    {
        Today,
        ThisWeek,
        ThisMonth,
        Last3Months,
        AllQuizzes
    }

    private int? editingQuizId = null;
    private List<Model.FeaturedQuizDisplay> FeaturedQuizzes = new();
    private DashboardSummaryDto? Summary;
    private bool IsGenerating = false;
    private int? quizToDeleteId = null;
    private HashSet<int> quizzesWithAnswers = new HashSet<int>();
    private QuizFilterPeriod selectedFilter = QuizFilterPeriod.Today;

    private void EditQuizName(int quizId) => editingQuizId = quizId;
    private void CancelEdit() => editingQuizId = null;

    private async Task SaveQuizName(int quizId, string newName)
    {
        await UserQuizRepository.UpdateQuizNameAsync(quizId, newName);
        editingQuizId = null;
    }

    private async Task DeleteQuiz(int quizId)
    {
        try
        {
            await UserQuizRepository.DeleteAsync(quizId);
            Summary?.RecentQuizzes?.RemoveAll(q => q.Id == quizId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting quiz: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(c => c.Type == "sub" || c.Type.EndsWith("nameidentifier"))?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                Summary = await DashboardData.GetDashboardSummaryAsync(userId);
                if (Summary?.RecentQuizzes != null && Summary.RecentQuizzes.Count > 0)
                {
                    var quizIds = Summary.RecentQuizzes.Select(q => q.Id).ToList();
                    var questions = await UserQuizQuestionRepository.GetByUserAndQuizIdsAsync(userId, quizIds);
                    var quizIdsWithAnswers = questions
                        .Where(q => !string.IsNullOrEmpty(q.UserAnswer))
                        .Select(q => q.QuizId)
                        .Distinct();
                    quizzesWithAnswers = new HashSet<int>(quizIdsWithAnswers);
                }
                
                // Load featured quizzes
                await LoadFeaturedQuizzes();
            }
        }
    }

    private async Task LoadFeaturedQuizzes()
    {
        var now = DateTime.UtcNow;
        var assignments = await SpecialQuizAssignmentService.GetAllAsync();
        var types = await AssignmentTypeService.GetAllAsync();
        var quizzes = await UserQuizRepository.GetAllAsync();
        FeaturedQuizzes = assignments
            .Where(a => a.StartDate <= now && a.EndDate >= now)
            .Select(a => new Model.FeaturedQuizDisplay
            {
                Quiz = quizzes.FirstOrDefault(q => q.Id == a.UserQuizId),
                AssignmentType = types.FirstOrDefault(t => t.Id == a.AssignmentTypeId),
                Assignment = new WiseUpDude.Model.SpecialQuizAssignment {
                    Id = a.Id,
                    UserQuizId = a.UserQuizId,
                    AssignedByUserId = a.AssignedByUserId,
                    AssignmentTypeId = a.AssignmentTypeId,
                    StartDate = a.StartDate,
                    EndDate = a.EndDate,
                    Notes = a.Notes,
                    CreatedAt = a.CreatedAt
                }
            })
            .Where(fq => fq.Quiz != null && fq.AssignmentType != null)
            .ToList();
    }

    private async Task ResumeQuiz(int quizId)
    {
        IsGenerating = true;
        
        try
        {
            var selectedQuiz = await UserQuizRepository.GetByIdAsync(quizId);
            if (selectedQuiz != null)
            {
                QuizState.CurrentQuiz = selectedQuiz;
                NavManager.NavigateTo($"/TakeAQuiz/{quizId}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error resuming quiz: {ex.Message}");
        }
        finally
        {
            IsGenerating = false;
        }
    }

    private async Task ToggleLearnMode(int quizId)
    {
        IsGenerating = true;
        try
        {
            var quiz = Summary?.RecentQuizzes?.FirstOrDefault(q => q.Id == quizId);
            if (quiz != null)
            {
                await UserQuizRepository.UpdateLearnModeAsync(quizId, !quiz.LearnMode);
            }
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity?.IsAuthenticated == true)
            {
                var userId = user.FindFirst(c => c.Type == "sub" || c.Type.EndsWith("nameidentifier"))?.Value;
                if (!string.IsNullOrEmpty(userId))
                {
                    Summary = await DashboardData.GetDashboardSummaryAsync(userId);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling learn mode: {ex.Message}");
        }
        finally
        {
            IsGenerating = false;
        }
    }

    private async Task StartOver(int quizId)
    {
        IsGenerating = true;
        
        try
        {
            await UserQuizQuestionRepository.ClearUserAnswersByQuizIdAsync(quizId);
            NavManager.NavigateTo($"/TakeAQuiz/{quizId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting fresh: {ex.Message}");
        }
        finally
        {
            IsGenerating = false;
        }
    }

    private void ConfirmDelete(int quizId) => quizToDeleteId = quizId;
    private void CancelDelete() => quizToDeleteId = null;

    private async Task ConfirmedDelete()
    {
        if (quizToDeleteId.HasValue)
        {
            await DeleteQuiz(quizToDeleteId.Value);
            quizToDeleteId = null;
        }
    }

    private string GetLearnModeIconClass(bool isActive) =>
        isActive ? "text-info learn-active" : "text-success";

    private string GetLearnModeIconType(bool isActive) =>
        isActive ? "bi bi-mortarboard-fill" : "bi bi-mortarboard";

    private string GetLearnModeTooltip(bool isActive, int quizId)
    {
        if (quizzesWithAnswers.Contains(quizId))
            return "Learn Mode cannot be enabled or disabled after you have started answering questions.";
        return isActive ? "Learn Mode is ON" : "Enable Learn Mode";
    }

    private void OnFilterChanged(QuizFilterPeriod filter)
    {
        selectedFilter = filter;
        StateHasChanged();
    }

    private string GetFilteredQuizzesTitle()
    {
        return selectedFilter switch
        {
            QuizFilterPeriod.Today => "Your Saved Quizzes for Today",
            QuizFilterPeriod.ThisWeek => "Your Saved Quizzes for This Week",
            QuizFilterPeriod.ThisMonth => "Your Saved Quizzes for This Month",
            QuizFilterPeriod.Last3Months => "Your Saved Quizzes for the Last 3 Months",
            QuizFilterPeriod.AllQuizzes => "Your Saved Quizzes",
            _ => "Your Saved Quizzes"
        };
    }

    private List<WiseUpDude.Model.RecentQuizDto> GetFilteredQuizzes()
    {
        if (Summary?.RecentQuizzes == null)
            return new List<WiseUpDude.Model.RecentQuizDto>();

        var quizzes = Summary.RecentQuizzes;
        if (selectedFilter == QuizFilterPeriod.AllQuizzes)
        {
            return quizzes.ToList();
        }

        var now = DateTime.Now;
        var today = now.Date;
        var startOfWeek = today.AddDays(-(int)today.DayOfWeek);
        var startOfMonth = new DateTime(now.Year, now.Month, 1);
        var startOfLast3Months = now.AddMonths(-3).Date;

        DateTime startDate = selectedFilter switch
        {
            QuizFilterPeriod.Today => today,
            QuizFilterPeriod.ThisWeek => startOfWeek,
            QuizFilterPeriod.ThisMonth => startOfMonth,
            QuizFilterPeriod.Last3Months => startOfLast3Months,
            _ => DateTime.MinValue
        };

        // Normalize CreationDate to local time for comparison
        var filtered = quizzes
            .Where(q => q.CreationDate.ToLocalTime() >= startDate)
            .ToList();

        // Debug output (optional, remove in production)
        // foreach (var q in quizzes) Console.WriteLine($"Quiz: {q.Name}, Created: {q.CreationDate}, Local: {q.CreationDate.ToLocalTime()}");
        // Console.WriteLine($"Filter: {selectedFilter}, StartDate: {startDate}, Count: {filtered.Count}");

        return filtered;
    }

    private int GetQuizCount(QuizFilterPeriod filter)
    {
        if (Summary?.RecentQuizzes == null)
            return 0;
        if (filter == QuizFilterPeriod.AllQuizzes)
            return Summary.RecentQuizzes.Count;
        var now = DateTime.Now;
        var today = now.Date;
        var startOfWeek = today.AddDays(-(int)today.DayOfWeek);
        var startOfMonth = new DateTime(now.Year, now.Month, 1);
        var startOfLast3Months = now.AddMonths(-3).Date;
        DateTime startDate = filter switch
        {
            QuizFilterPeriod.Today => today,
            QuizFilterPeriod.ThisWeek => startOfWeek,
            QuizFilterPeriod.ThisMonth => startOfMonth,
            QuizFilterPeriod.Last3Months => startOfLast3Months,
            _ => DateTime.MinValue
        };
        return Summary.RecentQuizzes.Count(q => q.CreationDate.ToLocalTime() >= startDate);
    }

    private void TakeFeaturedQuiz(int quizId)
    {
        Logger.LogInformation("TakeFeaturedQuiz called with quizId: {QuizId}", quizId);
        NavManager.NavigateTo($"/TakeAQuiz/{quizId}");
    }

    private string GetDynamicTitle()
    {
        // Example logic for dynamic title
        if (Summary != null)
        {
            if (Summary.TotalQuizzesTaken == 0)
                return "Start Your First Quiz Today!";
            else if (Summary.AverageScore < 50)
                return "Keep Going! Improve Your Score!";
            else
                return "Great Job! You're Doing Well!";
        }
        return "Welcome to Wise Up Dude!";
    }

    private string GetDynamicSubtitle()
    {
        // Example logic for dynamic subtitle
        if (Summary != null)
        {
            return $"You have taken {Summary.TotalQuizzesTaken} quizzes with an average score of {Summary.AverageScore:F0}%.";
        }
        return "Track your progress and improve your skills.";
    }
}