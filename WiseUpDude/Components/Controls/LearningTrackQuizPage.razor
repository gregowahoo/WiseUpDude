@using WiseUpDude.Model
@using Microsoft.AspNetCore.Components.Forms
@inject WiseUpDude.Data.Repositories.Interfaces.ILearningTrackQuizRepository QuizRepo
@inject WiseUpDude.Shared.Services.ToastService ToastService

@rendermode InteractiveServer

<div class="d-flex justify-content-between align-items-center mb-3">
    <h4 class="text-secondary mb-0"><i class="bi bi-patch-question me-2"></i>Quizzes for Source ID: @LearningTrackSourceId</h4>
    <button class="btn btn-success btn-sm" @onclick="ShowAddModal">
        <i class="bi bi-plus-circle-fill me-1"></i> <span class="small">Add New Quiz</span>
    </button>
</div>

@if (isLoading && !initialLoadAttempted)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 150px;">
        <div class="spinner-border text-success" role="status"><span class="visually-hidden">Loading...</span></div>
        <strong class="ms-2">Loading quizzes...</strong>
    </div>
}
else if (initialLoadAttempted && (quizzes == null || !quizzes.Any()))
{
    <div class="alert alert-light text-center" role="alert">
        <i class="bi bi-info-circle me-2"></i> No quizzes found for this source.
        <button class="btn btn-link p-0 ms-1" @onclick="ShowAddModal">Add one now!</button>
    </div>
}
else if (quizzes != null && quizzes.Any())
{
    <div class="list-group">
        @foreach (var quiz in quizzes)
        {
            <div class="list-group-item list-group-item-action @(selectedQuiz?.Id == quiz.Id ? "active" : "")"
                 @onclick="() => HandleQuizSelection(quiz)" style="cursor:pointer;" @key="quiz.Id">
                <div class="d-flex justify-content-between align-items-start">
                    <div class="flex-grow-1 me-3">
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1 @(selectedQuiz?.Id == quiz.Id ? "text-white" : "")">
                                <i class="bi bi-type me-1"></i>@quiz.Name
                            </h5>
                            <small class="@(selectedQuiz?.Id == quiz.Id ? "text-white-50" : "text-muted")">
                                <i class="bi bi-calendar-event me-1"></i>Created: @quiz.CreationDate.ToString("yyyy-MM-dd HH:mm")
                            </small>
                        </div>
                        <p class="mb-1 @(selectedQuiz?.Id == quiz.Id ? "text-white-75" : "")">
                            <i class="bi bi-text-paragraph me-1"></i>@quiz.Description
                        </p>
                    </div>
                    <div class="action-buttons-list ms-2 d-flex flex-row align-items-center justify-content-end" style="font-size: 0.95em; gap: 0.5rem;">
                        <button class="btn btn-link p-0" @onclick:stopPropagation="true" @onclick="() => OnLearningTrackQuizSelected.InvokeAsync(quiz)" title="Questions">
                            <i class="bi bi-card-list"></i> Questions
                        </button>
                        <button class="btn btn-link p-0" @onclick:stopPropagation="true" @onclick="() => ShowEditModal(quiz)" title="Edit Quiz">
                            <i class="bi bi-pencil-square"></i> Edit
                        </button>
                        <button class="btn btn-link p-0 text-danger" @onclick:stopPropagation="true" @onclick="() => DeleteQuizAsync(quiz)" title="Delete Quiz">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

<Modal IsVisible="@showModal" Title="@modalTitle" OnClose="CloseModal">
    <EditForm Model="@modalQuiz" OnValidSubmit="SaveQuizAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label class="form-label">Name</label>
            <InputText class="form-control" @bind-Value="modalQuiz.Name" />
            <ValidationMessage For="@(() => modalQuiz.Name)" />
        </div>
        <div class="mb-3">
            <label class="form-label">Description</label>
            <InputTextArea class="form-control" @bind-Value="modalQuiz.Description" />
            <ValidationMessage For="@(() => modalQuiz.Description)" />
        </div>
        <div class="d-flex justify-content-end mt-3">
            <button type="button" class="btn btn-secondary me-2" @onclick="CloseModal">Cancel</button>
            <button type="submit" class="btn btn-primary">
                <i class="bi bi-save me-1"></i> @(isEdit ? "Update" : "Save")
            </button>
        </div>
    </EditForm>
</Modal>

@code {
    [Parameter] public int LearningTrackSourceId { get; set; }
    [Parameter] public EventCallback<LearningTrackQuiz?> OnLearningTrackQuizSelected { get; set; }
    [Parameter] public int LearningTrackCategoryId { get; set; }

    private List<LearningTrackQuiz>? quizzes;
    private LearningTrackQuiz? selectedQuiz;

    private bool isLoading = false;
    private bool initialLoadAttempted = false;

    private bool showModal = false;
    private string modalTitle = "Add/Edit Quiz";
    private LearningTrackQuiz modalQuiz = new();
    private bool isEdit = false;

    protected override async Task OnParametersSetAsync()
    {
        bool sourceIdChanged = LearningTrackSourceId != (selectedQuiz?.LearningTrackSourceId ?? 0);
        bool isValidSourceId = LearningTrackSourceId > 0;

        if (isValidSourceId)
        {
            if (sourceIdChanged && selectedQuiz != null)
            {
                selectedQuiz = null;
                await OnLearningTrackQuizSelected.InvokeAsync(null);
            }
            await LoadQuizzesFromRepoAsync();
        }
        else
        {
            quizzes = new List<LearningTrackQuiz>();
            if (selectedQuiz != null)
            {
                selectedQuiz = null;
                await OnLearningTrackQuizSelected.InvokeAsync(null);
            }
            initialLoadAttempted = true;
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadQuizzesFromRepoAsync()
    {
        if (isLoading) return;

        isLoading = true;
        if (!initialLoadAttempted)
        {
            quizzes = null;
        }
        StateHasChanged();

        int? previouslySelectedQuizId = selectedQuiz?.Id;

        try
        {
            var allQuizzes = await QuizRepo.GetAllQuizzesAsync();
            quizzes = allQuizzes
                        .Where(q => q.LearningTrackSourceId == LearningTrackSourceId)
                        .OrderByDescending(q => q.CreationDate)
                        .ToList();

            if (previouslySelectedQuizId.HasValue)
            {
                var newlySelectedQuiz = quizzes.FirstOrDefault(q => q.Id == previouslySelectedQuizId.Value);
                if (selectedQuiz?.Id != newlySelectedQuiz?.Id)
                {
                    selectedQuiz = newlySelectedQuiz;
                    if (selectedQuiz == null)
                    {
                        await OnLearningTrackQuizSelected.InvokeAsync(null);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to load quizzes: {ex.Message}", ToastLevel.Error);
            quizzes = new List<LearningTrackQuiz>();
            if (selectedQuiz != null)
            {
                selectedQuiz = null;
                await OnLearningTrackQuizSelected.InvokeAsync(null);
            }
        }
        finally
        {
            isLoading = false;
            initialLoadAttempted = true;
            StateHasChanged();
        }
    }

    private async Task HandleQuizSelection(LearningTrackQuiz quiz)
    {
        if (selectedQuiz?.Id == quiz.Id)
        {
            // Optional: Implement deselect if clicking the same item again
            // selectedQuiz = null;
            // await OnLearningTrackQuizSelected.InvokeAsync(null);
        }
        else
        {
            selectedQuiz = quiz;
            await OnLearningTrackQuizSelected.InvokeAsync(selectedQuiz);
        }
        StateHasChanged();
    }

    private void ShowAddModal()
    {
        modalTitle = "Add New Quiz";
        modalQuiz = new LearningTrackQuiz { LearningTrackSourceId = LearningTrackSourceId, CreationDate = DateTime.UtcNow };
        isEdit = false;
        showModal = true;
    }

    private void ShowEditModal(LearningTrackQuiz quizToEdit)
    {
        modalTitle = "Edit Quiz";
        modalQuiz = new LearningTrackQuiz
        {
            Id = quizToEdit.Id,
            Name = quizToEdit.Name,
            Description = quizToEdit.Description,
            LearningTrackSourceId = quizToEdit.LearningTrackSourceId,
            CreationDate = quizToEdit.CreationDate
        };
        isEdit = true;
        showModal = true;
    }

    private async Task SaveQuizAsync()
    {
        if (string.IsNullOrWhiteSpace(modalQuiz.Name))
        {
            await ToastService.ShowToast("Quiz name cannot be empty.", ToastLevel.Warning);
            return;
        }

        try
        {
            modalQuiz.LearningTrackSourceId = LearningTrackSourceId;
            if (isEdit)
            {
                await QuizRepo.UpdateQuizAsync(modalQuiz);
                await ToastService.ShowToast("Quiz updated successfully!", ToastLevel.Success);
            }
            else
            {
                modalQuiz.CreationDate = DateTime.UtcNow;
                await QuizRepo.AddQuizAsync(modalQuiz);
                await ToastService.ShowToast("Quiz added successfully!", ToastLevel.Success);
            }
            showModal = false;
            await LoadQuizzesFromRepoAsync();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to save quiz: {ex.Message}", ToastLevel.Error);
        }
    }

    private void CloseModal()
    {
        showModal = false;
        modalQuiz = new();
    }

    private async Task DeleteQuizAsync(LearningTrackQuiz quizToDelete)
    {
        try
        {
            await QuizRepo.DeleteQuizAsync(quizToDelete.Id);
            await ToastService.ShowToast($"Quiz '{quizToDelete.Name}' deleted successfully.", ToastLevel.Success);
            await LoadQuizzesFromRepoAsync();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to delete quiz: {ex.Message}", ToastLevel.Error);
        }
    }
}