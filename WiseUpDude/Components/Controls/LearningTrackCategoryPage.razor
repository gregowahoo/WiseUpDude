@using WiseUpDude.Model
@inject WiseUpDude.Data.Repositories.Interfaces.ILearningTrackCategoryRepository LearningTrackCategoryRepo
@inject WiseUpDude.Data.Repositories.Interfaces.ILearningTrackRepository LearningTrackRepo
@inject WiseUpDude.Shared.Services.ToastService ToastService

@rendermode InteractiveServer

<div class="d-flex justify-content-between align-items-center mb-3">
    <h4 class="text-secondary mb-0"><i class="bi bi-diagram-3 me-2"></i>Categories for Track: @learningTrackName</h4>
    <button class="btn btn-success" @onclick="AddNewCategory">
        <i class="bi bi-plus-circle-fill me-1"></i> Add New Category
    </button>
</div>

@if (categories == null)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 120px;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <strong class="ms-2">Loading categories...</strong>
    </div>
}
else if (!categories.Any())
{
    <div class="alert alert-light text-center" role="alert">
        <i class="bi bi-info-circle me-2"></i> No categories found for this track.
        <button class="btn btn-link p-0 ms-1" @onclick="AddNewCategory">Add one now!</button>
    </div>
}
else
{
    <div class="card shadow border-0 mb-4 grid-background">
        <div class="list-group list-group-flush">
            @foreach (var category in categories)
            {
                <div class="list-group-item list-group-item-action @(category == selectedCategory ? "active" : "")" @onclick="() => HandleCategorySelection(category)" style="cursor:pointer;">
                    <div class="d-flex w-100 justify-content-between align-items-start">
                        <div>
                            <h5 class="mb-1 @(category == selectedCategory ? "text-white" : "")">
                                <i class="bi bi-type me-1"></i> @category.Name
                            </h5>
                            @if (!string.IsNullOrWhiteSpace(category.Description))
                            {
                                <p class="mb-1 small @(category == selectedCategory ? "text-white-75" : "text-muted")">
                                    <i class="bi bi-text-paragraph me-1"></i> @category.Description
                                </p>
                            }
                        </div>
                        <div class="action-buttons-list ms-2">
                            <button class="btn btn-sm @(category == selectedCategory ? "btn-light" : "btn-outline-secondary") me-1 mb-1 mb-md-0"
                                    @onclick:stopPropagation="true" @onclick="() => EditCategory(category)" title="Edit Category">
                                <i class="bi bi-pencil-square"></i> <span class="d-none d-md-inline">Edit</span>
                            </button>
                            <button class="btn btn-sm @(category == selectedCategory ? "btn-warning" : "btn-outline-danger")"
                                    @onclick:stopPropagation="true" @onclick="() => DeleteCategory(category)" title="Delete Category">
                                <i class="bi bi-trash"></i> <span class="d-none d-md-inline">Delete</span>
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

<Modal IsVisible="@showModal" Title="@modalTitle" OnClose="CloseModal">
    <EditForm Model="@modalCategory" OnValidSubmit="SaveCategory">
        <div class="mb-3">
            <label class="form-label">Name</label>
            <InputText class="form-control" @bind-Value="modalCategory.Name" />
        </div>
        <div class="mb-3">
            <label class="form-label">Description</label>
            <InputTextArea class="form-control" @bind-Value="modalCategory.Description" />
        </div>
        @* Add other fields for LearningTrackCategory if they need editing, e.g., Difficulty *@
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="CloseModal">Cancel</button>
    </EditForm>
</Modal>

@code {
    [Parameter] public int LearningTrackId { get; set; }
    [Parameter] public EventCallback<LearningTrackCategory> OnLearningTrackCategorySelected { get; set; }

    private List<LearningTrackCategory>? categories;
    private LearningTrackCategory? selectedCategory; // To track the visually selected category
    private bool showModal = false;
    private string modalTitle = "Add/Edit Category";
    private LearningTrackCategory modalCategory = new();
    private string? learningTrackName;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            selectedCategory = null;
            await LoadLearningTrackName();
            await LoadCategories();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to load categories on parameter set: {ex.Message}", ToastLevel.Error);
        }
    }

    private async Task LoadLearningTrackName()
    {
        var track = await LearningTrackRepo.GetByIdAsync(LearningTrackId);
        learningTrackName = track?.Name ?? $"ID: {LearningTrackId}";
    }

    private async Task LoadCategories()
    {
        try
        {
            var allCategories = await LearningTrackCategoryRepo.GetAllAsync();
            categories = allCategories.Where(c => c.LearningTrackId == LearningTrackId).ToList();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to load categories: {ex.Message}", ToastLevel.Error);
            categories = new List<LearningTrackCategory>();
        }
        StateHasChanged();
    }

    private async Task HandleCategorySelection(LearningTrackCategory category)
    {
        selectedCategory = category;
        await OnLearningTrackCategorySelected.InvokeAsync(category);
    }

    private void AddNewCategory()
    {
        modalTitle = "Add New Category";
        modalCategory = new LearningTrackCategory { LearningTrackId = LearningTrackId };
        showModal = true;
    }

    private void EditCategory(LearningTrackCategory category)
    {
        try
        {
            modalTitle = "Edit Category";
            modalCategory = new LearningTrackCategory
            {
                Id = category.Id,
                Name = category.Name,
                Description = category.Description,
                Difficulty = category.Difficulty,
                LearningTrackId = category.LearningTrackId,
                CreationDate = category.CreationDate
            };
            showModal = true;
        }
        catch (Exception ex)
        {
            ToastService.ShowToast($"Failed to open edit modal: {ex.Message}", ToastLevel.Error);
        }
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task SaveCategory()
    {
        try
        {
            modalCategory.LearningTrackId = LearningTrackId;

            if (modalCategory.Id == 0) // New category
            {
                // *** FIX APPLIED HERE ***
                // No longer assigning the result of AddAsync to a variable
                await LearningTrackCategoryRepo.AddAsync(modalCategory);
                // The commented-out line below is also not strictly needed if LoadCategories handles selection well
                // selectedCategory = addedCategory;
            }
            else // Existing category
            {
                await LearningTrackCategoryRepo.UpdateAsync(modalCategory);
            }

            await ToastService.ShowToast("Category saved!", ToastLevel.Success);
            showModal = false;
            await LoadCategories(); // This will refresh the list and attempt to maintain/set selection by ID
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to save category: {ex.Message}", ToastLevel.Error);
        }
    }

    private async Task DeleteCategory(LearningTrackCategory category)
    {
        try
        {
            await LearningTrackCategoryRepo.DeleteAsync(category.Id);
            await ToastService.ShowToast($"Category deleted: {category.Name}", ToastLevel.Success);
            if (selectedCategory == category)
            {
                selectedCategory = null;
            }
            await LoadCategories();
        }
        catch (Exception ex)
        {
            await ToastService.ShowToast($"Failed to delete category: {ex.Message}", ToastLevel.Error);
        }
    }
}