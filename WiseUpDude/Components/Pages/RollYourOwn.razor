@page "/rollyourown"

@using Microsoft.AspNetCore.Authorization
@using WiseUpDude.Services
@using WiseUpDude.Services.Interfaces
@using WiseUpDude.Model
@using WiseUpDude.Data.Repositories

@inject QuizRepository QuizRepository
@inject UserQuizRepository UserQuizRepository

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IQuizFromPromptService QuizGenerationService
@inject ILogger<RollYourOwn> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITenorGifService TenorGifService

@rendermode InteractiveServer
@attribute [Authorize]

@* <p>IsGenerating: @IsGenerating, IsSaving: @IsSaving</p> *@

@if (IsGenerating || IsSaving)
{
@*     <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-body text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3">🧠 Generating your quiz, please wait...</p>
                </div>
            </div>
        </div>
    </div> *@

    <PleaseWaitDialog IsVisible="IsGenerating || IsSaving"
                      SearchKeyword="@_currentDialogKeyword"
                          LoadingTextMessage="@($"Preparing your \"{UserPrompt}\" quiz...")" /> 
}

<div class="container mt-5">
    <div class="text-center mb-4">
        <h2 class="fw-bold">🎲 Roll Your Own Quiz!</h2>
        <p class="text-muted">Enter a custom prompt to generate a quiz tailored to your needs.</p>
    </div>

    <div class="row justify-content-center">
        <div class="col-md-8">
            <label for="promptInput" class="form-label fw-semibold">Enter your custom prompt:</label>
            <InputText id="promptInput" @bind-Value="UserPrompt" class="form-control form-control-lg mb-3"
                       placeholder="e.g. Create a quiz about the history of space exploration." />
            <br />

            <div class="text-center">
                <button class="btn btn-success btn-lg px-5"
                        @onclick="GenerateAndSaveQuiz"
                        disabled="@(IsGenerating || IsSaving || string.IsNullOrWhiteSpace(UserPrompt))">
                    🚀 Generate & Save Quiz
                </button>
            </div>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <p class="text-danger mt-3">@ErrorMessage</p>
            }
        </div>
    </div>
</div>

@code {
    private string? UserPrompt { get; set; }
    private bool IsGenerating = false;
    private bool IsSaving = false;
    private string? ErrorMessage;

    // --- ADD THESE NEW FIELDS ---
    private Random _keywordRandom = new Random();
    private List<string> _wiseUpDudeThemedKeywords = new List<string> {
        "thinking hard",
        "brain power",
        "smart idea",
        "lightbulb moment",
        "genius at work",
        "knowledge quiz",
        "learning fun",
        "wise guy thinking",
        "aha moment",
        "study time",
        "deep thought",
        "problem solving",
        "getting smarter",
        "wise owl",
        "einstein thinking",
        "quiz loading",
        "education",
        "inspiration",
        "eureka",
        "mind blown",
        "smart cookie",
        "brainy",
        "pondering"
        // Add more relevant keywords/phrases as you like!
    };
    private string _currentDialogKeyword = "thinking hard"; // Default or initial value
    // --- END OF NEW FIELDS ---

    private bool CanGenerateAndSave =>
        !IsGenerating && !IsSaving && !string.IsNullOrWhiteSpace(UserPrompt);

    private async Task GenerateAndSaveQuiz()
    {
        if (string.IsNullOrWhiteSpace(UserPrompt))
        {
            ErrorMessage = "Please enter a valid prompt.";
            return;
        }

        // --- ADD THIS LOGIC TO SELECT A RANDOM KEYWORD ---
        if (_wiseUpDudeThemedKeywords.Any())
        {
            _currentDialogKeyword = _wiseUpDudeThemedKeywords[_keywordRandom.Next(_wiseUpDudeThemedKeywords.Count)];
        }
        Logger?.LogInformation("PleaseWaitDialog will use keyword: {DialogKeyword}", _currentDialogKeyword);
        // --- END OF RANDOM KEYWORD SELECTION ---

        IsGenerating = true;
        IsSaving = true; // You have both flags, the dialog uses IsGenerating || IsSaving
        ErrorMessage = null;
        StateHasChanged(); // Ensure UI updates to show modal and current keyword is picked up

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value
                     ?? user.FindFirst("sub")?.Value; // fallback for JWT sub claim

        try
        {
            Logger.LogInformation("Sending prompt to QuizGenerationService: {UserPrompt}", UserPrompt);

            var generatedQuestions = await QuizGenerationService.GenerateQuestionsFromPromptAsync(UserPrompt);

            if (generatedQuestions is null || !generatedQuestions.Any())
            {
                Logger.LogError("QuizGenerationService returned no questions.");
                ErrorMessage = "Failed to generate quiz questions. Please try again.";
                // Ensure IsGenerating/IsSaving are reset if we return early
                IsGenerating = false;
                IsSaving = false;
                StateHasChanged();
                return;
            }

            var quiz = new Quiz
            {
                Name = UserPrompt.Length > 50 ? UserPrompt.Substring(0, 50) : UserPrompt,
                UserId = userId,
                Type = "Prompt",
                Prompt = UserPrompt,
                Description = null,
                Difficulty = "Medium",
                LearnMode = false,
                Topic = null,
                Questions = generatedQuestions
            };

            // await QuizRepository.AddAsync(quiz); // Your TODO note
            // Logger.LogInformation("Quiz successfully saved to the Quiz table. QuizId: {QuizId}", quiz.Id); // If you re-enable

            await UserQuizRepository.AddAsync(quiz); // Assuming this saves and assigns ID to quiz.Id
            var userQuizId = quiz.Id; // Or get ID from AddAsync if it returns it differently.
                                      // Your original code: var userQuizId = await UserQuizRepository.AddAsyncGetId(quiz);
                                      // Let's assume AddAsync handles ID assignment or AddAsyncGetId is preferred:
            if (quiz.Id == 0 && UserQuizRepository.GetType().GetMethod("AddAsyncGetId") != null)
            {
                // If AddAsync doesn't set ID and AddAsyncGetId exists
                // For safety, let's call AddAsync first, then get ID or re-add with get ID.
                // This part depends on your repository implementation details.
                // Assuming UserQuizRepository.AddAsync(quiz) makes quiz.Id available OR UserQuizRepository.AddAsyncGetId is the one to use.
                // Sticking to your most recent logic:
                // await UserQuizRepository.AddAsync(quiz); // you already called this.
                // var userQuizId = await UserQuizRepository.AddAsyncGetId(quiz); // This might re-add or have specific logic
                // For now, assuming quiz.Id is populated by one of the AddAsync calls.
                // Let's assume the AddAsyncGetId is what you want for the ID for navigation:
                userQuizId = await UserQuizRepository.AddAsyncGetId(quiz); // Use this if it's the correct way to get the ID for navigation
            }
            else if (quiz.Id == 0)
            {
                // Fallback if ID is still not set - this indicates a potential issue in repo logic understanding
                Logger.LogError("Quiz ID was not set after saving to UserQuizRepository.");
                ErrorMessage = "Error saving quiz progress. Quiz ID not obtained.";
                IsGenerating = false;
                IsSaving = false;
                StateHasChanged();
                return;
            }


            Logger.LogInformation("Quiz successfully processed for UserQuiz. Navigating with UserQuizId: {UserQuizId}", userQuizId);

            NavigationManager.NavigateTo($"/TakeAQuiz/{userQuizId}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception during quiz generation or save.");
            ErrorMessage = "An error occurred while generating or saving the quiz. Please try again later.";
        }
        finally
        {
            IsGenerating = false;
            IsSaving = false;
            StateHasChanged(); // Ensure UI updates to hide modal
        }
    }
}