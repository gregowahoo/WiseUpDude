@page "/quiz-of-the-day"

@layout WiseUpDude.Components.Layout.MinimalLayout

@using Microsoft.AspNetCore.Components.Authorization
@using WiseUpDude.Model
@using WiseUpDude.Services

@inject IQuizOfTheDayService QuizOfTheDayService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager

@rendermode InteractiveServer
@attribute [Authorize(Roles = "FreeSubscriber,PaidSubscriber,Admin,EnterpriseSubscriber")]

<h1 class="text-center mb-4">ðŸŽ¯ Quizzes of the Day</h1>

<div class="container">
    <!-- Filter Controls -->
    <div class="row mb-4">
        <div class="col-12">
            <h3>Quizzes of the Day</h3>
            <div class="d-flex gap-2 flex-wrap">
                <button class="btn @(selectedFilter == QuizOfDayFilter.All ? "btn-primary" : "btn-outline-primary")" 
                        @onclick="() => OnFilterChanged(QuizOfDayFilter.All)">
                    All (@GetFilteredCount(QuizOfDayFilter.All))
                </button>
                <button class="btn @(selectedFilter == QuizOfDayFilter.Today ? "btn-primary" : "btn-outline-primary")" 
                        @onclick="() => OnFilterChanged(QuizOfDayFilter.Today)">
                    Today (@GetFilteredCount(QuizOfDayFilter.Today))
                </button>
                <button class="btn @(selectedFilter == QuizOfDayFilter.ThisWeek ? "btn-primary" : "btn-outline-primary")" 
                        @onclick="() => OnFilterChanged(QuizOfDayFilter.ThisWeek)">
                    This Week (@GetFilteredCount(QuizOfDayFilter.ThisWeek))
                </button>
                <button class="btn @(selectedFilter == QuizOfDayFilter.ThisMonth ? "btn-primary" : "btn-outline-primary")" 
                        @onclick="() => OnFilterChanged(QuizOfDayFilter.ThisMonth)">
                    This Month (@GetFilteredCount(QuizOfDayFilter.ThisMonth))
                </button>
                <button class="btn @(selectedFilter == QuizOfDayFilter.Last3Months ? "btn-primary" : "btn-outline-primary")" 
                        @onclick="() => OnFilterChanged(QuizOfDayFilter.Last3Months)">
                    Last 3 Months (@GetFilteredCount(QuizOfDayFilter.Last3Months))
                </button>
            </div>
        </div>
    </div>

    <!-- Quiz List -->
    <div class="row">
        @if (IsLoading)
        {
            <div class="col-12 text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading quizzes...</span>
                </div>
            </div>
        }
        else
        {
            var filteredQuizzes = GetFilteredQuizzes();
            if (filteredQuizzes.Any())
            {
                @foreach (var quiz in filteredQuizzes)
                {
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card shadow-sm h-100">
                            <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center">
                                <h6 class="mb-0 text-truncate">@quiz.Name</h6>
                                <small>@quiz.QuizOfTheDayDate?.ToString("MM/dd/yyyy")</small>
                            </div>
                            <div class="card-body">
                                @if (quiz.Type == "Prompt")
                                {
                                    <p><span class="badge bg-warning">Prompt:</span> @quiz.Prompt</p>
                                }
                                else if (quiz.Type == "Topic")
                                {
                                    <p><span class="badge bg-info">Topic:</span> @quiz.Topic</p>
                                }
                                else if (quiz.Type == "Url")
                                {
                                    <p>
                                        <span class="badge bg-primary">URL</span>
                                        @if (!string.IsNullOrWhiteSpace(quiz.Url))
                                        {
                                            <a href="@quiz.Url" target="_blank" class="ms-1 text-decoration-underline text-primary">Link</a>
                                        }
                                    </p>
                                }
                                @if (!string.IsNullOrWhiteSpace(quiz.Description))
                                {
                                    <p class="text-muted small">@quiz.Description</p>
                                }
                                <p><span class="badge bg-secondary">@quiz.Difficulty</span></p>
                            </div>
                            <div class="card-footer">
                                <button class="btn btn-primary" @onclick="() => TakeQuiz(quiz.Id)">
                                    <i class="bi bi-play-fill"></i> Take Quiz
                                </button>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12">
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i>
                        No Quizzes of the Day found for the selected time period.
                    </div>
                </div>
            }
        }
    </div>

    <!-- Admin Controls -->
    <AuthorizeView Roles="Admin">
        <Authorized>
            <div class="row mt-5">
                <div class="col-12">
                    <div class="card border-warning">
                        <div class="card-header bg-warning">
                            <h5 class="mb-0">Admin Controls</h5>
                        </div>
                        <div class="card-body">
                            <p>Admin functionality for managing Quizzes of the Day will be available in the Admin Dashboard.</p>
                            <a href="/admin" class="btn btn-warning">Go to Admin Dashboard</a>
                        </div>
                    </div>
                </div>
            </div>
        </Authorized>
    </AuthorizeView>
</div>

@code {
    public enum QuizOfDayFilter
    {
        All,
        Today,
        ThisWeek,
        ThisMonth,
        Last3Months
    }

    private List<Quiz> AllQuizzesOfTheDay = new();
    private bool IsLoading = true;
    private QuizOfDayFilter selectedFilter = QuizOfDayFilter.All;

    protected override async Task OnInitializedAsync()
    {
        await LoadQuizzes();
    }

    private async Task LoadQuizzes()
    {
        IsLoading = true;
        StateHasChanged();

        try
        {
            // Load all quizzes of the day
            var allQuizzes = await QuizOfTheDayService.GetAllQuizzesOfTheDayAsync();
            AllQuizzesOfTheDay = allQuizzes.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading quizzes: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void OnFilterChanged(QuizOfDayFilter filter)
    {
        selectedFilter = filter;
        StateHasChanged();
    }

    private List<Quiz> GetFilteredQuizzes()
    {
        var now = DateTime.Now;
        var today = now.Date;
        var startOfWeek = today.AddDays(-(int)today.DayOfWeek);
        var startOfMonth = new DateTime(now.Year, now.Month, 1);
        var startOfLast3Months = now.AddMonths(-3).Date;

        DateTime startDate = selectedFilter switch
        {
            QuizOfDayFilter.Today => today,
            QuizOfDayFilter.ThisWeek => startOfWeek,
            QuizOfDayFilter.ThisMonth => startOfMonth,
            QuizOfDayFilter.Last3Months => startOfLast3Months,
            _ => DateTime.MinValue
        };

        if (selectedFilter == QuizOfDayFilter.All)
        {
            return AllQuizzesOfTheDay.ToList();
        }

        return AllQuizzesOfTheDay
            .Where(q => q.QuizOfTheDayDate.HasValue && q.QuizOfTheDayDate.Value.Date >= startDate)
            .ToList();
    }

    private int GetFilteredCount(QuizOfDayFilter filter)
    {
        var now = DateTime.Now;
        var today = now.Date;
        var startOfWeek = today.AddDays(-(int)today.DayOfWeek);
        var startOfMonth = new DateTime(now.Year, now.Month, 1);
        var startOfLast3Months = now.AddMonths(-3).Date;

        DateTime startDate = filter switch
        {
            QuizOfDayFilter.Today => today,
            QuizOfDayFilter.ThisWeek => startOfWeek,
            QuizOfDayFilter.ThisMonth => startOfMonth,
            QuizOfDayFilter.Last3Months => startOfLast3Months,
            _ => DateTime.MinValue
        };

        if (filter == QuizOfDayFilter.All)
        {
            return AllQuizzesOfTheDay.Count;
        }

        return AllQuizzesOfTheDay
            .Count(q => q.QuizOfTheDayDate.HasValue && q.QuizOfTheDayDate.Value.Date >= startDate);
    }

    private void TakeQuiz(int quizId)
    {
        NavManager.NavigateTo($"/TakeAQuiz/{quizId}");
    }
}